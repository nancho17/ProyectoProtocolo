
ProyectoProtocolo/out/ProyectoProtocolo.elf:     file format elf32-littlearm
ProyectoProtocolo/out/ProyectoProtocolo.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0024dd

Program Header:
0x70000001 off    0x00018780 vaddr 0x1a008780 paddr 0x1a008780 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000b20 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00008788 memsz 0x00008788 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a008788 align 2**16
         filesz 0x00000a74 memsz 0x00000a74 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008780  1a000000  1a000000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000a74  10000000  1a008788  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020a74  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020a74  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020a74  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020a74  2**2
                  CONTENTS
  6 .bss          000000a8  10000a78  10000a78  00000a78  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020a74  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020a74  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020a74  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020a74  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a008780  1a008780  00018780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020a74  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020a74  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020a74  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020a74  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020a74  2**2
                  CONTENTS
 17 .noinit       00000000  10000b20  10000b20  00020a74  2**2
                  CONTENTS
 18 .debug_info   0001e0d1  00000000  00000000  00020a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000048c5  00000000  00000000  0003eb45  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000864d  00000000  00000000  0004340a  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000ac0  00000000  00000000  0004ba57  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000a40  00000000  00000000  0004c517  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000c6b9  00000000  00000000  0004cf57  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000f29c  00000000  00000000  00059610  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    000214b2  00000000  00000000  000688ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      0000007f  00000000  00000000  00089d5e  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  00089ddd  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00002bc0  00000000  00000000  00089e14  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000a78 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a008780 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000b20 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a00118c l     F .text	000000bc uartProcessIRQ
10000a8c l     O .bss	00000004 rxIsrCallbackUART0
10000a90 l     O .bss	00000004 rxIsrCallbackUART2
10000a94 l     O .bss	00000004 rxIsrCallbackUART3
10000a98 l     O .bss	00000004 txIsrCallbackUART0
10000a9c l     O .bss	00000004 txIsrCallbackUART2
10000aa0 l     O .bss	00000004 txIsrCallbackUART3
1a00830c l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 Socket.c
10000a78 l     O .bss	00000002 sock_io_mode
10000a7a l     O .bss	00000002 sock_is_sending
10000000 l     O .data	00000002 sock_any_port
00000000 l    df *ABS*	00000000 W5500.c
00000000 l    df *ABS*	00000000 Wiz5500.c
10000002 l     O .data	00000002 any_port.12281
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000004 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a000e74 l     F .text	00000010 clearInterrupt
1a000e84 l     F .text	0000005c serveInterrupt
1000000c l     O .data	00000048 ultrasonicSensors
1a0081d0 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a000eec l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_spi.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a00135c l     F .text	00000002 errorOcurred
1a00135e l     F .text	00000002 doNothing
10000054 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 board.c
1a00155c l     F .text	00000044 Board_LED_Init
1a0015a0 l     F .text	00000040 Board_TEC_Init
1a0015e0 l     F .text	00000040 Board_GPIO_Init
1a001620 l     F .text	00000038 Board_SPI_Init
1a001658 l     F .text	00000024 Board_I2C_Init
1a00167c l     F .text	00000030 Board_ADC_Init
1a008358 l     O .text	00000008 GpioButtons
1a008360 l     O .text	0000000c GpioLeds
1a00836c l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 system.c
10000aa4 l     O .bss	00000004 heap_end.11488
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a008384 l     O .text	0000000c InitClkStates
1a008390 l     O .text	00000098 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0018cc l     F .text	0000002c Chip_UART_GetIndex
1a008428 l     O .text	00000008 UART_BClock
1a008430 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a001a34 l     F .text	00000014 Chip_ADC_GetClockIndex
1a001a48 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001b10 l     F .text	000000a4 pll_calc_divs
1a001bb4 l     F .text	0000010c pll_get_frac
1a001cc0 l     F .text	0000004c Chip_Clock_FindBaseClock
1a001f34 l     F .text	00000022 Chip_Clock_GetDivRate
10000aa8 l     O .bss	00000008 audio_usb_pll_freq
1a008444 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0084b0 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000094 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0022c8 l     F .text	0000001a SSP_Write2BFifo
1a0022e2 l     F .text	00000018 SSP_Write1BFifo
1a0022fa l     F .text	00000042 SSP_Read2BFifo
1a00233c l     F .text	00000040 SSP_Read1BFifo
1a00237c l     F .text	00000014 Chip_SSP_GetClockIndex
1a002390 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
1a004e5c l     F .text	00000084 __sbprintf
1a00853c l     O .text	00000010 blanks.8605
1a00854c l     O .text	00000010 zeroes.8606
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1a004fac l     F .text	00000124 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0060a0 l     F .text	00000050 std
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
1a008660 l     O .text	0000000c p05.7367
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a0079f4 l     F .text	00000076 __sprint_r.part.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
100000d0 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a008780 l       .bss_RAM5	00000000 __init_array_end
1a008780 l       .bss_RAM5	00000000 __preinit_array_end
1a008780 l       .bss_RAM5	00000000 __init_array_start
1a008780 l       .bss_RAM5	00000000 __preinit_array_start
1a007f30 g     F .text	0000002c .hidden __aeabi_dcmpun
1a001d58 g     F .text	0000001c Chip_Clock_GetDividerSource
1a001750 g     F .text	00000012 _isatty_r
1a007ef4 g     F .text	00000012 .hidden __aeabi_dcmple
1a003238 g     F .text	0000009c _puts_r
1a0013e0 g     F .text	00000044 TIMER2_IRQHandler
1a007e30 g     F .text	0000007a .hidden __cmpdf2
1a00018e  w    F .text	00000002 DebugMon_Handler
1a001762 g     F .text	0000000a _lseek_r
1a000194  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a007e30 g     F .text	0000007a .hidden __eqdf2
1a000194  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a000194  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a002880 g     F .text	0000005a .hidden __floatdidf
1a000194  w    F .text	00000002 I2C0_IRQHandler
1a003210 g     F .text	00000028 printf
10000afc g     O .bss	00000001 __lock___atexit_recursive_mutex
1a007db4 g     F .text	00000050 _wcrtomb_r
1a007968 g     F .text	00000020 __sseek
1a0060fc g     F .text	00000058 __sinit
10000a84 g     O .bss	00000004 callBackFuncParams
1a007a80 g     F .text	000000b0 __swbuf_r
1a000184  w    F .text	00000002 HardFault_Handler
1a000370 g     F .text	000000e4 recv
1a000610 g     F .text	000000d8 connect
1a000000 g       *ABS*	00000000 __vectors_start__
1a001aee g     F .text	0000000c Chip_ADC_SetResolution
1a006f24 g     F .text	0000000c __malloc_unlock
1a000838 g     F .text	00000044 WREAD
1a001154 g     F .text	00000038 SysTick_Handler
10000b00 g     O .bss	00000001 __lock___arc4random_mutex
1a000194  w    F .text	00000002 SDIO_IRQHandler
1a0016e4 g     F .text	0000001c Board_UARTGetChar
1a000194  w    F .text	00000002 ATIMER_IRQHandler
1a006e50 g     F .text	000000c6 memmove
1a000190  w    F .text	00000002 PendSV_Handler
1a000182  w    F .text	00000002 NMI_Handler
1a006f30 g     F .text	0000004c _Balloc
1a008788 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a000194  w    F .text	00000002 I2C1_IRQHandler
1a000194  w    F .text	00000002 UART1_IRQHandler
1a007e20 g     F .text	0000008a .hidden __gtdf2
1a000194  w    F .text	00000002 GPIO5_IRQHandler
1a000194  w    F .text	00000002 CAN1_IRQHandler
1a000abc g     F .text	00000168 loopback_tcpc
1a001746 g     F .text	0000000a _fstat_r
53ff5380 g       *ABS*	00000000 __valid_user_code_checksum
1a008788 g       .ARM.exidx	00000000 _etext
1a007ebc g     F .text	00000010 .hidden __aeabi_cdcmple
1a000194  w    F .text	00000002 USB1_IRQHandler
1a000194  w    F .text	00000002 I2S0_IRQHandler
1a001424 g     F .text	00000044 TIMER3_IRQHandler
1a001fd6 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001b4 g     F .text	00000012 bss_init
1a003048 g     F .text	00000134 memcpy
1a007eac g     F .text	00000020 .hidden __aeabi_cdrcmple
1a000194  w    F .text	00000002 SGPIO_IRQHandler
1a0060f0 g     F .text	0000000c _cleanup_r
1a002808 g     F .text	00000022 .hidden __floatsidf
1a007e28 g     F .text	00000082 .hidden __ltdf2
1a0028dc g     F .text	00000000 .hidden __aeabi_uldivmod
10000b20 g       .noinit	00000000 _noinit
1a0032d4 g     F .text	00000010 puts
10000af8 g     O .bss	00000004 SystemCoreClock
1a0018f8 g     F .text	00000054 Chip_UART_Init
1a000194  w    F .text	00000002 ADC0_IRQHandler
1a008598 g     O .text	000000c8 __mprec_tens
1a00018a  w    F .text	00000002 UsageFault_Handler
1a002054 g     F .text	0000004c Chip_Clock_GetRate
1a000194  w    F .text	00000002 GPIO6_IRQHandler
10000ae0 g     O .bss	00000004 __malloc_top_pad
10000ae8 g     O .bss	00000008 tickCounter
1a001854 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0027e8 g     F .text	0000001e .hidden __aeabi_ui2d
1a006744 g     F .text	0000001c _localeconv_r
1a0070b0 g     F .text	00000012 __i2b
1a0063f4 g     F .text	000002fc __sfvwrite_r
1a00290c g     F .text	000002cc .hidden __udivmoddi4
1a002564 g     F .text	00000000 .hidden __aeabi_drsub
1a0017b8 g     F .text	00000020 _sbrk_r
1a008354 g     O .text	00000004 ExtRateIn
1a000194  w    F .text	00000002 IntDefaultHandler
1a0009a2 g     F .text	0000005e WgetSn_RX_RSR
1a0006e8 g     F .text	00000150 socket
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0012ac g     F .text	0000002c spiRead
1a00176c g     F .text	0000004a _read_r
1a007ee0 g     F .text	00000012 .hidden __aeabi_dcmplt
1a007b98 g     F .text	000000d0 _fclose_r
1a000194  w    F .text	00000002 GPIO1_IRQHandler
10000ad8 g     O .bss	00000004 __malloc_max_sbrked_mem
1a00282c g     F .text	00000042 .hidden __extendsfdf2
1a002e30 g     F .text	000001d0 .hidden __aeabi_ddiv
1a000194  w    F .text	00000002 SSP0_IRQHandler
1a002570 g     F .text	00000276 .hidden __adddf3
1a008780 g       .ARM.exidx	00000000 __exidx_start
10000b04 g     O .bss	00000001 __lock___env_recursive_mutex
1a002bdc g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
10000b08 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a007544 g     F .text	0000035c _realloc_r
1a003000 g     F .text	00000048 __libc_init_array
1a000944 g     F .text	0000005e WgetSn_TX_FSR
1a00087c g     F .text	0000003c WWRITE
1a000454 g     F .text	0000012c send
1a007d08 g     F .text	00000064 _fputwc_r
1a008570 g     O .text	00000028 __mprec_bigtens
1a0027e8 g     F .text	0000001e .hidden __floatunsidf
1a000194  w    F .text	00000002 ADC1_IRQHandler
1a00735c g     F .text	00000036 __mcmp
10000a7c g     O .bss	00000008 sock_pack_info
1a001700 g     F .text	0000003c Board_Init
1a0008b8 g     F .text	00000044 WREAD_BUF
1a002560 g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0023ba g     F .text	000000aa Chip_SSP_RWFrames_Blocking
1a000194  w    F .text	00000002 RTC_IRQHandler
10000b20 g       .bss	00000000 _ebss
1a001360 g     F .text	00000040 TIMER0_IRQHandler
1a0010d8 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a000194  w    F .text	00000002 SPI_IRQHandler
1a007010 g     F .text	0000003e __hi0bits
1a002290 g     F .text	00000038 Chip_I2C_SetClockRate
1a007f5c g     F .text	0000004e .hidden __fixdfsi
1a000194  w    F .text	00000002 LCD_IRQHandler
1a001d0c g     F .text	0000004c Chip_Clock_EnableCrystal
10000b0c g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a002570 g     F .text	00000276 .hidden __aeabi_dadd
1a000196 g     F .text	0000001e data_init
1a007e28 g     F .text	00000082 .hidden __ledf2
1a007210 g     F .text	000000a0 __pow5mult
1a002870 g     F .text	0000006a .hidden __aeabi_ul2d
1a0013a0 g     F .text	00000040 TIMER1_IRQHandler
1a00226c g     F .text	00000024 Chip_I2C_Init
1a000580 g     F .text	00000090 disconnect
1a00676c g     F .text	00000002 __retarget_lock_release_recursive
1a001248 g     F .text	0000000a UART2_IRQHandler
1a001ec8 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0081d4 g     O .text	00000136 gpioPinsInit
1a0023a8 g     F .text	00000012 Chip_SSP_SetClockRate
1a007f1c g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0008fc g     F .text	00000048 WWRITE_BUF
1a000ee0 g     F .text	0000000a GPIO2_IRQHandler
1a006154 g     F .text	0000000c __sfp_lock_acquire
1a006db0 g     F .text	00000000 memchr
1a00620c g     F .text	000001e8 _free_r
1a001fb0 g     F .text	00000026 Chip_Clock_GetBaseClock
1a007d6c g     F .text	0000001c __locale_mb_cur_max
1a007f08 g     F .text	00000012 .hidden __aeabi_dcmpge
10000a78 g       .bss	00000000 _bss
1a001abc g     F .text	00000032 Chip_ADC_SetSampleRate
1a00256c g     F .text	0000027a .hidden __aeabi_dsub
10000900 g     O .data	00000004 __malloc_sbrk_base
1a00133c g     F .text	00000020 delayInit
1a002870 g     F .text	0000006a .hidden __floatundidf
1a0072b0 g     F .text	000000ac __lshift
1a000194  w    F .text	00000002 I2S1_IRQHandler
1a002464 g     F .text	0000003e Chip_SSP_SetBitRate
1a002248 g     F .text	00000002 Chip_GPIO_Init
1a008380 g     O .text	00000004 OscRateIn
1a0070c4 g     F .text	0000014a __multiply
10000b20 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a007990 g     F .text	00000064 strncpy
10000ab0 g     O .bss	00000028 __malloc_current_mallinfo
1a007480 g     F .text	000000c2 __d2b
1a000194  w    F .text	00000002 SSP1_IRQHandler
1a0012d8 g     F .text	0000002c spiWrite
1a000178 g       .text	00000000 __bss_section_table_end
1a00173c g     F .text	0000000a _close_r
1a002808 g     F .text	00000022 .hidden __aeabi_i2d
1a000f20 g     F .text	00000194 gpioInit
1a000a00 g     F .text	0000005e Wsend_data
1a006764 g     F .text	00000002 __retarget_lock_close_recursive
1a004ee0 g     F .text	000000cc __swsetup_r
1a002bd8  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002e30 g     F .text	000001d0 .hidden __divdf3
100004f8 g     O .data	00000408 __malloc_av_
1a002bdc g     F .text	00000254 .hidden __muldf3
1a007908 g     F .text	00000022 __sread
1a000194  w    F .text	00000002 USB0_IRQHandler
1a000194  w    F .text	00000002 GPIO3_IRQHandler
1a006f18 g     F .text	0000000c __malloc_lock
1a0016d0 g     F .text	00000014 Board_UARTPutChar
1a000194  w    F .text	00000002 SCT_IRQHandler
1a006044 g     F .text	0000005a _fflush_r
1a007b30 g     F .text	00000068 _calloc_r
1a001d74 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a006768 g     F .text	00000002 __retarget_lock_acquire_recursive
1a00317c g     F .text	00000094 memset
1a000186  w    F .text	00000002 MemManage_Handler
1a000c24 g     F .text	00000234 main
10000adc g     O .bss	00000004 __malloc_max_total_mem
1a006760 g     F .text	00000002 __retarget_lock_init_recursive
1a000194  w    F .text	00000002 WDT_IRQHandler
1a00125c g     F .text	00000050 spiInit
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a00018c  w    F .text	00000002 SVC_Handler
10000008 g     O .data	00000004 DWT_CTRL
1a007988 g     F .text	00000008 __sclose
1a0050d0 g     F .text	00000e20 _dtoa_r
1a006860 g     F .text	00000548 _malloc_r
1a007e04 g     F .text	0000001a __ascii_wctomb
1a002880 g     F .text	0000005a .hidden __aeabi_l2d
1a000194  w    F .text	00000002 GPIO7_IRQHandler
1a001fe4 g     F .text	0000003c Chip_Clock_EnableOpts
1a00616c g     F .text	000000a0 _malloc_trim_r
1a001d90 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0021f4 g     F .text	00000054 fpuInit
1a001e48 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001800 g     F .text	0000001c SystemInit
1a000194  w    F .text	00000002 SPIFI_IRQHandler
1a001304 g     F .text	00000038 delay
1a000194  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a007e30 g     F .text	0000007a .hidden __nedf2
1a001a7c g     F .text	00000040 Chip_ADC_Init
1a00181c g     F .text	00000038 Board_SetupMuxing
1a00194c g     F .text	000000e8 Chip_UART_SetBaudFDR
1a0010b4 g     F .text	0000000c tickRead
1a0017d8 g     F .text	00000028 _write_r
10000af0 g     O .bss	00000008 tickRateMS
1a000194  w    F .text	00000002 ETH_IRQHandler
10000a88 g     O .bss	00000004 tickHookFunction
100000cc g     O .data	00000004 _impure_ptr
1a005ef0 g     F .text	00000154 __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a000194  w    F .text	00000002 CAN0_IRQHandler
1a007d88 g     F .text	0000002a __ascii_mbtowc
10000000 g       .data	00000000 _data
10000b20 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0024a4 g     F .text	00000038 Chip_SSP_Init
1a000194  w    F .text	00000002 GINT0_IRQHandler
1a006770 g     F .text	0000005c __swhatbuf_r
1a000194  w    F .text	00000002 DAC_IRQHandler
1a0016ac g     F .text	00000024 Board_Debug_Init
1a007ecc g     F .text	00000012 .hidden __aeabi_dcmpeq
10000a74 g       .data	00000000 _edata
1a00224c g     F .text	00000020 Chip_I2C_EventHandler
1a000194  w    F .text	00000002 M0SUB_IRQHandler
1a007c68 g     F .text	0000009e __fputwc
10000b10 g     O .bss	00000001 __lock___at_quick_exit_mutex
1a0020a0 g     F .text	00000154 Chip_SetupCoreClock
1a00792c g     F .text	0000003c __swrite
1a000194  w    F .text	00000002 GPIO0_IRQHandler
10000904 g     O .data	00000004 __malloc_trim_threshold
1a000000 g     O .text	00000114 g_pfnVectors
1a0024dc g     F .text	00000084 ResetISR
1a0066f0 g     F .text	00000052 _fwalk_reent
1a001afc g     F .text	00000014 SystemCoreClockUpdate
1a007394 g     F .text	000000ec __mdiff
1a007f5c g     F .text	0000004e .hidden __aeabi_d2iz
1a000194  w    F .text	00000002 DMA_IRQHandler
1a000194  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a006160 g     F .text	0000000c __sfp_lock_release
1a00867c g     O .text	00000101 _ctype_
1a002bd8  w    F .text	00000002 .hidden __aeabi_idiv0
1a007f30 g     F .text	0000002c .hidden __unorddf2
1a000188  w    F .text	00000002 BusFault_Handler
10000b14 g     O .bss	00000001 __lock___dd_hash_mutex
1a0067cc g     F .text	00000094 __smakebuf_r
10000b18 g     O .bss	00000001 __lock___tz_mutex
1a003300 g     F .text	000000dc strlen
1a002020 g     F .text	00000034 Chip_Clock_Enable
1a007ebc g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a007e20 g     F .text	0000008a .hidden __gedf2
1a001252 g     F .text	0000000a UART3_IRQHandler
1a000194  w    F .text	00000002 MCPWM_IRQHandler
1a007a6c g     F .text	00000014 __sprint_r
1a000194  w    F .text	00000002 M0APP_IRQHandler
1a000a5e g     F .text	0000005e Wrecv_data
1a00282c g     F .text	00000042 .hidden __aeabi_f2d
1a001468 g     F .text	000000f4 boardInit
1a00256c g     F .text	0000027a .hidden __subdf3
1a0033e0 g     F .text	00001a7c _vfprintf_r
1a000194  w    F .text	00000002 GINT1_IRQHandler
1a007050 g     F .text	0000005e __lo0bits
1a0010c0 g     F .text	00000018 tickPowerSet
1a0078a0 g     F .text	00000068 frexp
1a000300 g     F .text	00000070 close
10000908 g     O .data	0000016c __global_locale
1a001f58 g     F .text	00000058 Chip_Clock_SetBaseClock
1a000e58 g     F .text	0000001c cyclesCounterInit
1a000194  w    F .text	00000002 GPIO4_IRQHandler
10000b1c g     O .bss	00000001 __lock___sfp_recursive_mutex
1a0018c0 g     F .text	0000000c Board_SystemInit
1a006f90 g     F .text	00000080 __multadd
1a006f7c g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 dd 24 00 1a 83 01 00 1a 85 01 00 1a     .....$..........
1a000010:	87 01 00 1a 89 01 00 1a 8b 01 00 1a 80 53 ff 53     .............S.S
	...
1a00002c:	8d 01 00 1a 8f 01 00 1a 00 00 00 00 91 01 00 1a     ................
1a00003c:	55 11 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     U...............
1a00004c:	00 00 00 00 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00005c:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00006c:	95 01 00 1a 61 13 00 1a a1 13 00 1a e1 13 00 1a     ....a...........
1a00007c:	25 14 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     %...............
1a00008c:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a00009c:	95 01 00 1a 79 01 00 1a 95 01 00 1a 49 12 00 1a     ....y.......I...
1a0000ac:	53 12 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     S...............
1a0000bc:	95 01 00 1a 95 01 00 1a 95 01 00 1a e1 0e 00 1a     ................
1a0000cc:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a0000dc:	95 01 00 1a 95 01 00 1a 95 01 00 1a 95 01 00 1a     ................
1a0000ec:	95 01 00 1a 00 00 00 00 95 01 00 1a 95 01 00 1a     ................
1a0000fc:	95 01 00 1a 00 00 00 00 95 01 00 1a 95 01 00 1a     ................
1a00010c:	95 01 00 1a 95 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a008788 	.word	0x1a008788
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000a74 	.word	0x00000a74
1a000120:	1a008788 	.word	0x1a008788
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a008788 	.word	0x1a008788
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a008788 	.word	0x1a008788
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a008788 	.word	0x1a008788
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000a78 	.word	0x10000a78
1a000154:	000000a8 	.word	0x000000a8
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f001 f806 	bl	1a00118c <uartProcessIRQ>
}
1a000180:	bd08      	pop	{r3, pc}

1a000182 <NMI_Handler>:
//*****************************************************************************
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <NMI_Handler>

1a000184 <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <HardFault_Handler>

1a000186 <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <MemManage_Handler>

1a000188 <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <BusFault_Handler>

1a00018a <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a00018a:	e7fe      	b.n	1a00018a <UsageFault_Handler>

1a00018c <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a00018c:	e7fe      	b.n	1a00018c <SVC_Handler>

1a00018e <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a00018e:	e7fe      	b.n	1a00018e <DebugMon_Handler>

1a000190 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000190:	e7fe      	b.n	1a000190 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000192:	e7fe      	b.n	1a000192 <PendSV_Handler+0x2>

1a000194 <ADC0_IRQHandler>:
// Processor ends up here if an unexpected interrupt occurs or a specific
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a000194:	e7fe      	b.n	1a000194 <ADC0_IRQHandler>

1a000196 <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	2300      	movs	r3, #0
1a000198:	4293      	cmp	r3, r2
1a00019a:	d20a      	bcs.n	1a0001b2 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a00019c:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a00019e:	6804      	ldr	r4, [r0, #0]
1a0001a0:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a2:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001a4:	3004      	adds	r0, #4
1a0001a6:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	4293      	cmp	r3, r2
1a0001aa:	d3f8      	bcc.n	1a00019e <data_init+0x8>
}
1a0001ac:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001b0:	4770      	bx	lr
1a0001b2:	4770      	bx	lr

1a0001b4 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	2300      	movs	r3, #0
1a0001b6:	e003      	b.n	1a0001c0 <bss_init+0xc>
        *pulDest++ = 0;
1a0001b8:	2200      	movs	r2, #0
1a0001ba:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001be:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c0:	428b      	cmp	r3, r1
1a0001c2:	d3f9      	bcc.n	1a0001b8 <bss_init+0x4>
}
1a0001c4:	4770      	bx	lr
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <close>:
   return (int32_t)len;
}

int8_t close(uint8_t sn)
{
	CHECK_SOCKNUM();
1a000300:	2808      	cmp	r0, #8
1a000302:	d82b      	bhi.n	1a00035c <close+0x5c>
{
1a000304:	b570      	push	{r4, r5, r6, lr}
1a000306:	4606      	mov	r6, r0
//A20160426 : Applied the erratum 1 of W5300


	WsetSn_CR(sn,Sn_CR_CLOSE);
1a000308:	0084      	lsls	r4, r0, #2
1a00030a:	3401      	adds	r4, #1
1a00030c:	00e4      	lsls	r4, r4, #3
1a00030e:	f504 7580 	add.w	r5, r4, #256	; 0x100
1a000312:	2110      	movs	r1, #16
1a000314:	4628      	mov	r0, r5
1a000316:	f000 fab1 	bl	1a00087c <WWRITE>
   /* wait to process the command... */
	while( WgetSn_CR(sn) );
1a00031a:	4628      	mov	r0, r5
1a00031c:	f000 fa8c 	bl	1a000838 <WREAD>
1a000320:	2800      	cmp	r0, #0
1a000322:	d1fa      	bne.n	1a00031a <close+0x1a>
	/* clear all interrupt of the socket. */
	WsetSn_IR(sn, 0xFF);
1a000324:	211f      	movs	r1, #31
1a000326:	f504 7000 	add.w	r0, r4, #512	; 0x200
1a00032a:	f000 faa7 	bl	1a00087c <WWRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
1a00032e:	2301      	movs	r3, #1
1a000330:	40b3      	lsls	r3, r6
1a000332:	43db      	mvns	r3, r3
1a000334:	b21b      	sxth	r3, r3
1a000336:	490b      	ldr	r1, [pc, #44]	; (1a000364 <close+0x64>)
1a000338:	880a      	ldrh	r2, [r1, #0]
1a00033a:	401a      	ands	r2, r3
1a00033c:	800a      	strh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
1a00033e:	4a0a      	ldr	r2, [pc, #40]	; (1a000368 <close+0x68>)
1a000340:	8811      	ldrh	r1, [r2, #0]
1a000342:	400b      	ands	r3, r1
1a000344:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
	sock_pack_info[sn] = 0;
1a000346:	4b09      	ldr	r3, [pc, #36]	; (1a00036c <close+0x6c>)
1a000348:	2200      	movs	r2, #0
1a00034a:	559a      	strb	r2, [r3, r6]
	while(WgetSn_SR(sn) != SOCK_CLOSED);
1a00034c:	f504 7040 	add.w	r0, r4, #768	; 0x300
1a000350:	f000 fa72 	bl	1a000838 <WREAD>
1a000354:	2800      	cmp	r0, #0
1a000356:	d1f9      	bne.n	1a00034c <close+0x4c>
	return SOCK_OK;
1a000358:	2001      	movs	r0, #1
}
1a00035a:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
1a00035c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000360:	4770      	bx	lr
1a000362:	bf00      	nop
1a000364:	10000a78 	.word	0x10000a78
1a000368:	10000a7a 	.word	0x10000a7a
1a00036c:	10000a7c 	.word	0x10000a7c

1a000370 <recv>:
   CHECK_SOCKNUM();
1a000370:	2808      	cmp	r0, #8
1a000372:	d864      	bhi.n	1a00043e <recv+0xce>
{
1a000374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000378:	4614      	mov	r4, r2
1a00037a:	4689      	mov	r9, r1
1a00037c:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
1a00037e:	4607      	mov	r7, r0
1a000380:	0085      	lsls	r5, r0, #2
1a000382:	3501      	adds	r5, #1
1a000384:	00ed      	lsls	r5, r5, #3
1a000386:	4628      	mov	r0, r5
1a000388:	f000 fa56 	bl	1a000838 <WREAD>
1a00038c:	f000 000f 	and.w	r0, r0, #15
1a000390:	2801      	cmp	r0, #1
1a000392:	d157      	bne.n	1a000444 <recv+0xd4>
   CHECK_SOCKDATA();
1a000394:	2c00      	cmp	r4, #0
1a000396:	d058      	beq.n	1a00044a <recv+0xda>
   recvsize = WgetSn_RxMAX(sn);
1a000398:	f505 50f0 	add.w	r0, r5, #7680	; 0x1e00
1a00039c:	f000 fa4c 	bl	1a000838 <WREAD>
1a0003a0:	fa1f f880 	uxth.w	r8, r0
1a0003a4:	ea4f 2888 	mov.w	r8, r8, lsl #10
1a0003a8:	fa1f f888 	uxth.w	r8, r8
   if(recvsize < len) len = recvsize;
1a0003ac:	4544      	cmp	r4, r8
1a0003ae:	d80e      	bhi.n	1a0003ce <recv+0x5e>
1a0003b0:	46a0      	mov	r8, r4
1a0003b2:	e00c      	b.n	1a0003ce <recv+0x5e>
                  close(sn);
1a0003b4:	4630      	mov	r0, r6
1a0003b6:	f7ff ffa3 	bl	1a000300 <close>
                  return SOCKERR_SOCKSTATUS;
1a0003ba:	f06f 0006 	mvn.w	r0, #6
1a0003be:	e03c      	b.n	1a00043a <recv+0xca>
               close(sn);
1a0003c0:	4630      	mov	r0, r6
1a0003c2:	f7ff ff9d 	bl	1a000300 <close>
               return SOCKERR_SOCKSTATUS;
1a0003c6:	f06f 0006 	mvn.w	r0, #6
1a0003ca:	e036      	b.n	1a00043a <recv+0xca>
         if(recvsize != 0) break;
1a0003cc:	bb0c      	cbnz	r4, 1a000412 <recv+0xa2>
         recvsize = WgetSn_RX_RSR(sn);
1a0003ce:	4630      	mov	r0, r6
1a0003d0:	f000 fae7 	bl	1a0009a2 <WgetSn_RX_RSR>
1a0003d4:	4604      	mov	r4, r0
         tmp = WgetSn_SR(sn);
1a0003d6:	f505 7040 	add.w	r0, r5, #768	; 0x300
1a0003da:	f000 fa2d 	bl	1a000838 <WREAD>
         if (tmp != SOCK_ESTABLISHED)
1a0003de:	2817      	cmp	r0, #23
1a0003e0:	d00d      	beq.n	1a0003fe <recv+0x8e>
            if(tmp == SOCK_CLOSE_WAIT)
1a0003e2:	281c      	cmp	r0, #28
1a0003e4:	d1ec      	bne.n	1a0003c0 <recv+0x50>
               if(recvsize != 0) break;
1a0003e6:	b9a4      	cbnz	r4, 1a000412 <recv+0xa2>
               else if(WgetSn_TX_FSR(sn) == WgetSn_TxMAX(sn))
1a0003e8:	4630      	mov	r0, r6
1a0003ea:	f000 faab 	bl	1a000944 <WgetSn_TX_FSR>
1a0003ee:	4682      	mov	sl, r0
1a0003f0:	f505 50f8 	add.w	r0, r5, #7936	; 0x1f00
1a0003f4:	f000 fa20 	bl	1a000838 <WREAD>
1a0003f8:	ebba 2f80 	cmp.w	sl, r0, lsl #10
1a0003fc:	d0da      	beq.n	1a0003b4 <recv+0x44>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
1a0003fe:	4b14      	ldr	r3, [pc, #80]	; (1a000450 <recv+0xe0>)
1a000400:	881b      	ldrh	r3, [r3, #0]
1a000402:	413b      	asrs	r3, r7
1a000404:	f013 0f01 	tst.w	r3, #1
1a000408:	d0e0      	beq.n	1a0003cc <recv+0x5c>
1a00040a:	2c00      	cmp	r4, #0
1a00040c:	d1de      	bne.n	1a0003cc <recv+0x5c>
1a00040e:	2000      	movs	r0, #0
1a000410:	e013      	b.n	1a00043a <recv+0xca>
   if(recvsize < len) len = recvsize;
1a000412:	4544      	cmp	r4, r8
1a000414:	d300      	bcc.n	1a000418 <recv+0xa8>
1a000416:	4644      	mov	r4, r8
   Wrecv_data(sn, buf, len);
1a000418:	4622      	mov	r2, r4
1a00041a:	4649      	mov	r1, r9
1a00041c:	4630      	mov	r0, r6
1a00041e:	f000 fb1e 	bl	1a000a5e <Wrecv_data>
   WsetSn_CR(sn,Sn_CR_RECV);
1a000422:	f505 7580 	add.w	r5, r5, #256	; 0x100
1a000426:	2140      	movs	r1, #64	; 0x40
1a000428:	4628      	mov	r0, r5
1a00042a:	f000 fa27 	bl	1a00087c <WWRITE>
   while(WgetSn_CR(sn));
1a00042e:	4628      	mov	r0, r5
1a000430:	f000 fa02 	bl	1a000838 <WREAD>
1a000434:	2800      	cmp	r0, #0
1a000436:	d1fa      	bne.n	1a00042e <recv+0xbe>
   return (int32_t)len;
1a000438:	4620      	mov	r0, r4
}
1a00043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   CHECK_SOCKNUM();
1a00043e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000442:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
1a000444:	f06f 0004 	mvn.w	r0, #4
1a000448:	e7f7      	b.n	1a00043a <recv+0xca>
   CHECK_SOCKDATA();
1a00044a:	f06f 000d 	mvn.w	r0, #13
1a00044e:	e7f4      	b.n	1a00043a <recv+0xca>
1a000450:	10000a78 	.word	0x10000a78

1a000454 <send>:
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
   uint8_t tmp=0;
   uint16_t freesize=0;

   CHECK_SOCKNUM();
1a000454:	2808      	cmp	r0, #8
1a000456:	f200 8083 	bhi.w	1a000560 <send+0x10c>
{
1a00045a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00045e:	4615      	mov	r5, r2
1a000460:	468a      	mov	sl, r1
1a000462:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
1a000464:	4681      	mov	r9, r0
1a000466:	0087      	lsls	r7, r0, #2
1a000468:	3701      	adds	r7, #1
1a00046a:	00ff      	lsls	r7, r7, #3
1a00046c:	4638      	mov	r0, r7
1a00046e:	f000 f9e3 	bl	1a000838 <WREAD>
1a000472:	f000 000f 	and.w	r0, r0, #15
1a000476:	2801      	cmp	r0, #1
1a000478:	d175      	bne.n	1a000566 <send+0x112>
   CHECK_SOCKDATA();
1a00047a:	2d00      	cmp	r5, #0
1a00047c:	d076      	beq.n	1a00056c <send+0x118>
   tmp = WgetSn_SR(sn);
1a00047e:	f507 7840 	add.w	r8, r7, #768	; 0x300
1a000482:	4640      	mov	r0, r8
1a000484:	f000 f9d8 	bl	1a000838 <WREAD>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
1a000488:	2817      	cmp	r0, #23
1a00048a:	d001      	beq.n	1a000490 <send+0x3c>
1a00048c:	281c      	cmp	r0, #28
1a00048e:	d170      	bne.n	1a000572 <send+0x11e>
   if( sock_is_sending & (1<<sn) )
1a000490:	4b39      	ldr	r3, [pc, #228]	; (1a000578 <send+0x124>)
1a000492:	881b      	ldrh	r3, [r3, #0]
1a000494:	4133      	asrs	r3, r6
1a000496:	f013 0f01 	tst.w	r3, #1
1a00049a:	d019      	beq.n	1a0004d0 <send+0x7c>
   {
      tmp = WgetSn_IR(sn);
1a00049c:	f507 7400 	add.w	r4, r7, #512	; 0x200
1a0004a0:	4620      	mov	r0, r4
1a0004a2:	f000 f9c9 	bl	1a000838 <WREAD>
      if(tmp & Sn_IR_SENDOK)
1a0004a6:	f010 0f10 	tst.w	r0, #16
1a0004aa:	d105      	bne.n	1a0004b8 <send+0x64>
      {
         WsetSn_IR(sn, Sn_IR_SENDOK);

         sock_is_sending &= ~(1<<sn);
      }
      else if(tmp & Sn_IR_TIMEOUT)
1a0004ac:	f010 0f08 	tst.w	r0, #8
1a0004b0:	d119      	bne.n	1a0004e6 <send+0x92>
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
1a0004b2:	2000      	movs	r0, #0
   while(WgetSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
1a0004b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         WsetSn_IR(sn, Sn_IR_SENDOK);
1a0004b8:	2110      	movs	r1, #16
1a0004ba:	4620      	mov	r0, r4
1a0004bc:	f000 f9de 	bl	1a00087c <WWRITE>
         sock_is_sending &= ~(1<<sn);
1a0004c0:	2301      	movs	r3, #1
1a0004c2:	fa03 f206 	lsl.w	r2, r3, r6
1a0004c6:	492c      	ldr	r1, [pc, #176]	; (1a000578 <send+0x124>)
1a0004c8:	880b      	ldrh	r3, [r1, #0]
1a0004ca:	ea23 0302 	bic.w	r3, r3, r2
1a0004ce:	800b      	strh	r3, [r1, #0]
   freesize = WgetSn_TxMAX(sn);
1a0004d0:	f507 50f8 	add.w	r0, r7, #7936	; 0x1f00
1a0004d4:	f000 f9b0 	bl	1a000838 <WREAD>
1a0004d8:	b284      	uxth	r4, r0
1a0004da:	02a4      	lsls	r4, r4, #10
1a0004dc:	b2a4      	uxth	r4, r4
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
1a0004de:	42a5      	cmp	r5, r4
1a0004e0:	d80f      	bhi.n	1a000502 <send+0xae>
1a0004e2:	462c      	mov	r4, r5
1a0004e4:	e00d      	b.n	1a000502 <send+0xae>
         close(sn);
1a0004e6:	4630      	mov	r0, r6
1a0004e8:	f7ff ff0a 	bl	1a000300 <close>
         return SOCKERR_TIMEOUT;
1a0004ec:	f06f 000c 	mvn.w	r0, #12
1a0004f0:	e7e0      	b.n	1a0004b4 <send+0x60>
         close(sn);
1a0004f2:	4630      	mov	r0, r6
1a0004f4:	f7ff ff04 	bl	1a000300 <close>
         return SOCKERR_SOCKSTATUS;
1a0004f8:	f06f 0006 	mvn.w	r0, #6
1a0004fc:	e7da      	b.n	1a0004b4 <send+0x60>
      if(len <= freesize) break;
1a0004fe:	42a5      	cmp	r5, r4
1a000500:	d215      	bcs.n	1a00052e <send+0xda>
      freesize = WgetSn_TX_FSR(sn);
1a000502:	4630      	mov	r0, r6
1a000504:	f000 fa1e 	bl	1a000944 <WgetSn_TX_FSR>
1a000508:	4605      	mov	r5, r0
      tmp = WgetSn_SR(sn);
1a00050a:	4640      	mov	r0, r8
1a00050c:	f000 f994 	bl	1a000838 <WREAD>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
1a000510:	2817      	cmp	r0, #23
1a000512:	d001      	beq.n	1a000518 <send+0xc4>
1a000514:	281c      	cmp	r0, #28
1a000516:	d1ec      	bne.n	1a0004f2 <send+0x9e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
1a000518:	4b18      	ldr	r3, [pc, #96]	; (1a00057c <send+0x128>)
1a00051a:	881b      	ldrh	r3, [r3, #0]
1a00051c:	fa43 f309 	asr.w	r3, r3, r9
1a000520:	f013 0f01 	tst.w	r3, #1
1a000524:	d0eb      	beq.n	1a0004fe <send+0xaa>
1a000526:	42a5      	cmp	r5, r4
1a000528:	d2e9      	bcs.n	1a0004fe <send+0xaa>
1a00052a:	2000      	movs	r0, #0
1a00052c:	e7c2      	b.n	1a0004b4 <send+0x60>
   Wsend_data(sn, buf, len);
1a00052e:	4622      	mov	r2, r4
1a000530:	4651      	mov	r1, sl
1a000532:	4630      	mov	r0, r6
1a000534:	f000 fa64 	bl	1a000a00 <Wsend_data>
   WsetSn_CR(sn,Sn_CR_SEND);
1a000538:	f507 7780 	add.w	r7, r7, #256	; 0x100
1a00053c:	2120      	movs	r1, #32
1a00053e:	4638      	mov	r0, r7
1a000540:	f000 f99c 	bl	1a00087c <WWRITE>
   while(WgetSn_CR(sn));
1a000544:	4638      	mov	r0, r7
1a000546:	f000 f977 	bl	1a000838 <WREAD>
1a00054a:	2800      	cmp	r0, #0
1a00054c:	d1fa      	bne.n	1a000544 <send+0xf0>
   sock_is_sending |= (1 << sn);
1a00054e:	2301      	movs	r3, #1
1a000550:	fa03 f606 	lsl.w	r6, r3, r6
1a000554:	4b08      	ldr	r3, [pc, #32]	; (1a000578 <send+0x124>)
1a000556:	881a      	ldrh	r2, [r3, #0]
1a000558:	4316      	orrs	r6, r2
1a00055a:	801e      	strh	r6, [r3, #0]
   return (int32_t)len;
1a00055c:	4620      	mov	r0, r4
1a00055e:	e7a9      	b.n	1a0004b4 <send+0x60>
   CHECK_SOCKNUM();
1a000560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000564:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
1a000566:	f06f 0004 	mvn.w	r0, #4
1a00056a:	e7a3      	b.n	1a0004b4 <send+0x60>
   CHECK_SOCKDATA();
1a00056c:	f06f 000d 	mvn.w	r0, #13
1a000570:	e7a0      	b.n	1a0004b4 <send+0x60>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
1a000572:	f06f 0006 	mvn.w	r0, #6
1a000576:	e79d      	b.n	1a0004b4 <send+0x60>
1a000578:	10000a7a 	.word	0x10000a7a
1a00057c:	10000a78 	.word	0x10000a78

1a000580 <disconnect>:

int8_t disconnect(uint8_t sn)
{
   CHECK_SOCKNUM();
1a000580:	2808      	cmp	r0, #8
1a000582:	d838      	bhi.n	1a0005f6 <disconnect+0x76>
{
1a000584:	b570      	push	{r4, r5, r6, lr}
1a000586:	4606      	mov	r6, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
1a000588:	0084      	lsls	r4, r0, #2
1a00058a:	3401      	adds	r4, #1
1a00058c:	00e4      	lsls	r4, r4, #3
1a00058e:	4620      	mov	r0, r4
1a000590:	f000 f952 	bl	1a000838 <WREAD>
1a000594:	f000 000f 	and.w	r0, r0, #15
1a000598:	2801      	cmp	r0, #1
1a00059a:	d12f      	bne.n	1a0005fc <disconnect+0x7c>
	WsetSn_CR(sn,Sn_CR_DISCON);
1a00059c:	f504 7580 	add.w	r5, r4, #256	; 0x100
1a0005a0:	2108      	movs	r1, #8
1a0005a2:	4628      	mov	r0, r5
1a0005a4:	f000 f96a 	bl	1a00087c <WWRITE>
	/* wait to process the command... */
	while(WgetSn_CR(sn));
1a0005a8:	4628      	mov	r0, r5
1a0005aa:	f000 f945 	bl	1a000838 <WREAD>
1a0005ae:	2800      	cmp	r0, #0
1a0005b0:	d1fa      	bne.n	1a0005a8 <disconnect+0x28>
	sock_is_sending &= ~(1<<sn);
1a0005b2:	2301      	movs	r3, #1
1a0005b4:	fa03 f206 	lsl.w	r2, r3, r6
1a0005b8:	4913      	ldr	r1, [pc, #76]	; (1a000608 <disconnect+0x88>)
1a0005ba:	880b      	ldrh	r3, [r1, #0]
1a0005bc:	ea23 0302 	bic.w	r3, r3, r2
1a0005c0:	800b      	strh	r3, [r1, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
1a0005c2:	4b12      	ldr	r3, [pc, #72]	; (1a00060c <disconnect+0x8c>)
1a0005c4:	881b      	ldrh	r3, [r3, #0]
1a0005c6:	4133      	asrs	r3, r6
1a0005c8:	f013 0f01 	tst.w	r3, #1
1a0005cc:	d119      	bne.n	1a000602 <disconnect+0x82>
	while(WgetSn_SR(sn) != SOCK_CLOSED)
1a0005ce:	f504 7040 	add.w	r0, r4, #768	; 0x300
1a0005d2:	f000 f931 	bl	1a000838 <WREAD>
1a0005d6:	b160      	cbz	r0, 1a0005f2 <disconnect+0x72>
	{
	   if(WgetSn_IR(sn) & Sn_IR_TIMEOUT)
1a0005d8:	f504 7000 	add.w	r0, r4, #512	; 0x200
1a0005dc:	f000 f92c 	bl	1a000838 <WREAD>
1a0005e0:	f010 0f08 	tst.w	r0, #8
1a0005e4:	d0f3      	beq.n	1a0005ce <disconnect+0x4e>
	   {
	      close(sn);
1a0005e6:	4630      	mov	r0, r6
1a0005e8:	f7ff fe8a 	bl	1a000300 <close>
	      return SOCKERR_TIMEOUT;
1a0005ec:	f06f 000c 	mvn.w	r0, #12
1a0005f0:	e008      	b.n	1a000604 <disconnect+0x84>
	   }
	}
	return SOCK_OK;
1a0005f2:	2001      	movs	r0, #1
1a0005f4:	e006      	b.n	1a000604 <disconnect+0x84>
   CHECK_SOCKNUM();
1a0005f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0005fa:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
1a0005fc:	f06f 0004 	mvn.w	r0, #4
1a000600:	e000      	b.n	1a000604 <disconnect+0x84>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
1a000602:	2000      	movs	r0, #0
}
1a000604:	bd70      	pop	{r4, r5, r6, pc}
1a000606:	bf00      	nop
1a000608:	10000a7a 	.word	0x10000a7a
1a00060c:	10000a78 	.word	0x10000a78

1a000610 <connect>:



int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
   CHECK_SOCKNUM();
1a000610:	2808      	cmp	r0, #8
1a000612:	d857      	bhi.n	1a0006c4 <connect+0xb4>
{
1a000614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000618:	4615      	mov	r5, r2
1a00061a:	4688      	mov	r8, r1
1a00061c:	4607      	mov	r7, r0
   CHECK_SOCKMODE(Sn_MR_TCP);
1a00061e:	0084      	lsls	r4, r0, #2
1a000620:	3401      	adds	r4, #1
1a000622:	00e4      	lsls	r4, r4, #3
1a000624:	4620      	mov	r0, r4
1a000626:	f000 f907 	bl	1a000838 <WREAD>
1a00062a:	f000 000f 	and.w	r0, r0, #15
1a00062e:	2801      	cmp	r0, #1
1a000630:	d14b      	bne.n	1a0006ca <connect+0xba>
   CHECK_SOCKINIT();
1a000632:	f504 7640 	add.w	r6, r4, #768	; 0x300
1a000636:	4630      	mov	r0, r6
1a000638:	f000 f8fe 	bl	1a000838 <WREAD>
1a00063c:	2813      	cmp	r0, #19
1a00063e:	d147      	bne.n	1a0006d0 <connect+0xc0>
//     	taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
//    	if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
//   }
//

	if(port == 0) return SOCKERR_PORTZERO;
1a000640:	2d00      	cmp	r5, #0
1a000642:	d048      	beq.n	1a0006d6 <connect+0xc6>
	WsetSn_DIPR(sn,addr);
1a000644:	2204      	movs	r2, #4
1a000646:	4641      	mov	r1, r8
1a000648:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
1a00064c:	f000 f956 	bl	1a0008fc <WWRITE_BUF>
	WsetSn_DPORT(sn,port);
1a000650:	0a29      	lsrs	r1, r5, #8
1a000652:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
1a000656:	f000 f911 	bl	1a00087c <WWRITE>
1a00065a:	b2e9      	uxtb	r1, r5
1a00065c:	f504 5088 	add.w	r0, r4, #4352	; 0x1100
1a000660:	f000 f90c 	bl	1a00087c <WWRITE>
	WsetSn_CR(sn,Sn_CR_CONNECT);
1a000664:	f504 7580 	add.w	r5, r4, #256	; 0x100
1a000668:	2104      	movs	r1, #4
1a00066a:	4628      	mov	r0, r5
1a00066c:	f000 f906 	bl	1a00087c <WWRITE>
   while(WgetSn_CR(sn));
1a000670:	4628      	mov	r0, r5
1a000672:	f000 f8e1 	bl	1a000838 <WREAD>
1a000676:	2800      	cmp	r0, #0
1a000678:	d1fa      	bne.n	1a000670 <connect+0x60>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
1a00067a:	4b1a      	ldr	r3, [pc, #104]	; (1a0006e4 <connect+0xd4>)
1a00067c:	881b      	ldrh	r3, [r3, #0]
1a00067e:	fa43 f007 	asr.w	r0, r3, r7
1a000682:	f010 0f01 	tst.w	r0, #1
1a000686:	d129      	bne.n	1a0006dc <connect+0xcc>
   while(WgetSn_SR(sn) != SOCK_ESTABLISHED)
1a000688:	4630      	mov	r0, r6
1a00068a:	f000 f8d5 	bl	1a000838 <WREAD>
1a00068e:	2817      	cmp	r0, #23
1a000690:	d016      	beq.n	1a0006c0 <connect+0xb0>
   {
		if (WgetSn_IR(sn) & Sn_IR_TIMEOUT)
1a000692:	f504 7500 	add.w	r5, r4, #512	; 0x200
1a000696:	4628      	mov	r0, r5
1a000698:	f000 f8ce 	bl	1a000838 <WREAD>
1a00069c:	f010 0f08 	tst.w	r0, #8
1a0006a0:	d107      	bne.n	1a0006b2 <connect+0xa2>
		{
			WsetSn_IR(sn, Sn_IR_TIMEOUT);
            return SOCKERR_TIMEOUT;
		}

		if (WgetSn_SR(sn) == SOCK_CLOSED)
1a0006a2:	4630      	mov	r0, r6
1a0006a4:	f000 f8c8 	bl	1a000838 <WREAD>
1a0006a8:	2800      	cmp	r0, #0
1a0006aa:	d1ed      	bne.n	1a000688 <connect+0x78>
		{
			return SOCKERR_SOCKCLOSED;
1a0006ac:	f06f 0003 	mvn.w	r0, #3
1a0006b0:	e015      	b.n	1a0006de <connect+0xce>
			WsetSn_IR(sn, Sn_IR_TIMEOUT);
1a0006b2:	2108      	movs	r1, #8
1a0006b4:	4628      	mov	r0, r5
1a0006b6:	f000 f8e1 	bl	1a00087c <WWRITE>
            return SOCKERR_TIMEOUT;
1a0006ba:	f06f 000c 	mvn.w	r0, #12
1a0006be:	e00e      	b.n	1a0006de <connect+0xce>
		}
	}

   return SOCK_OK;
1a0006c0:	2001      	movs	r0, #1
1a0006c2:	e00c      	b.n	1a0006de <connect+0xce>
   CHECK_SOCKNUM();
1a0006c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0006c8:	4770      	bx	lr
   CHECK_SOCKMODE(Sn_MR_TCP);
1a0006ca:	f06f 0004 	mvn.w	r0, #4
1a0006ce:	e006      	b.n	1a0006de <connect+0xce>
   CHECK_SOCKINIT();
1a0006d0:	f06f 0002 	mvn.w	r0, #2
1a0006d4:	e003      	b.n	1a0006de <connect+0xce>
	if(port == 0) return SOCKERR_PORTZERO;
1a0006d6:	f06f 000a 	mvn.w	r0, #10
1a0006da:	e000      	b.n	1a0006de <connect+0xce>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
1a0006dc:	2000      	movs	r0, #0
}
1a0006de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0006e2:	bf00      	nop
1a0006e4:	10000a78 	.word	0x10000a78

1a0006e8 <socket>:



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
	CHECK_SOCKNUM();
1a0006e8:	2808      	cmp	r0, #8
1a0006ea:	f200 8090 	bhi.w	1a00080e <socket+0x126>
{
1a0006ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0006f2:	b082      	sub	sp, #8
1a0006f4:	4605      	mov	r5, r0
1a0006f6:	460f      	mov	r7, r1
1a0006f8:	4690      	mov	r8, r2
1a0006fa:	461e      	mov	r6, r3
	switch(protocol)
1a0006fc:	2901      	cmp	r1, #1
1a0006fe:	d05f      	beq.n	1a0007c0 <socket+0xd8>
1a000700:	2900      	cmp	r1, #0
1a000702:	f000 8087 	beq.w	1a000814 <socket+0x12c>
1a000706:	2904      	cmp	r1, #4
1a000708:	f200 8084 	bhi.w	1a000814 <socket+0x12c>
      default :
         return SOCKERR_SOCKMODE;
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
1a00070c:	f016 0f04 	tst.w	r6, #4
1a000710:	f040 8083 	bne.w	1a00081a <socket+0x132>

	if(flag != 0)
1a000714:	b11e      	cbz	r6, 1a00071e <socket+0x36>
	{
   	switch(protocol)
1a000716:	2f01      	cmp	r7, #1
1a000718:	d05f      	beq.n	1a0007da <socket+0xf2>
1a00071a:	2f02      	cmp	r7, #2
1a00071c:	d063      	beq.n	1a0007e6 <socket+0xfe>
   	      break;
   	   default:
   	      break;
   	}
   }
	close(sn);
1a00071e:	4628      	mov	r0, r5
1a000720:	f7ff fdee 	bl	1a000300 <close>
	//M20150601

   WsetSn_MR(sn, (protocol | (flag & 0xF0)));
1a000724:	00ac      	lsls	r4, r5, #2
1a000726:	3401      	adds	r4, #1
1a000728:	00e4      	lsls	r4, r4, #3
1a00072a:	f026 010f 	bic.w	r1, r6, #15
1a00072e:	b249      	sxtb	r1, r1
1a000730:	4339      	orrs	r1, r7
1a000732:	b2c9      	uxtb	r1, r1
1a000734:	4620      	mov	r0, r4
1a000736:	f000 f8a1 	bl	1a00087c <WWRITE>

	if(!port)
1a00073a:	f1b8 0f00 	cmp.w	r8, #0
1a00073e:	d10a      	bne.n	1a000756 <socket+0x6e>
	{
	   port = sock_any_port++;
1a000740:	4a39      	ldr	r2, [pc, #228]	; (1a000828 <socket+0x140>)
1a000742:	f8b2 8000 	ldrh.w	r8, [r2]
1a000746:	f108 0301 	add.w	r3, r8, #1
1a00074a:	b29b      	uxth	r3, r3
1a00074c:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
1a00074e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
1a000752:	4293      	cmp	r3, r2
1a000754:	d056      	beq.n	1a000804 <socket+0x11c>
	}
   WsetSn_PORT(sn,port);
1a000756:	ea4f 2118 	mov.w	r1, r8, lsr #8
1a00075a:	f504 6080 	add.w	r0, r4, #1024	; 0x400
1a00075e:	f000 f88d 	bl	1a00087c <WWRITE>
1a000762:	fa5f f188 	uxtb.w	r1, r8
1a000766:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
1a00076a:	f000 f887 	bl	1a00087c <WWRITE>
   WsetSn_CR(sn,Sn_CR_OPEN);
1a00076e:	f504 7780 	add.w	r7, r4, #256	; 0x100
1a000772:	2101      	movs	r1, #1
1a000774:	4638      	mov	r0, r7
1a000776:	f000 f881 	bl	1a00087c <WWRITE>
   while(WgetSn_CR(sn));
1a00077a:	4638      	mov	r0, r7
1a00077c:	f000 f85c 	bl	1a000838 <WREAD>
1a000780:	2800      	cmp	r0, #0
1a000782:	d1fa      	bne.n	1a00077a <socket+0x92>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
1a000784:	2201      	movs	r2, #1
1a000786:	40aa      	lsls	r2, r5
1a000788:	43d2      	mvns	r2, r2
1a00078a:	b212      	sxth	r2, r2
1a00078c:	4927      	ldr	r1, [pc, #156]	; (1a00082c <socket+0x144>)
1a00078e:	880b      	ldrh	r3, [r1, #0]
1a000790:	4013      	ands	r3, r2
1a000792:	b21b      	sxth	r3, r3
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);
1a000794:	f006 0601 	and.w	r6, r6, #1
1a000798:	40ae      	lsls	r6, r5
1a00079a:	431e      	orrs	r6, r3
1a00079c:	800e      	strh	r6, [r1, #0]
   sock_is_sending &= ~(1<<sn);
1a00079e:	4b24      	ldr	r3, [pc, #144]	; (1a000830 <socket+0x148>)
1a0007a0:	8819      	ldrh	r1, [r3, #0]
1a0007a2:	400a      	ands	r2, r1
1a0007a4:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
1a0007a6:	4b23      	ldr	r3, [pc, #140]	; (1a000834 <socket+0x14c>)
1a0007a8:	2200      	movs	r2, #0
1a0007aa:	555a      	strb	r2, [r3, r5]
   //
   while(WgetSn_SR(sn) == SOCK_CLOSED);
1a0007ac:	f504 7040 	add.w	r0, r4, #768	; 0x300
1a0007b0:	f000 f842 	bl	1a000838 <WREAD>
1a0007b4:	2800      	cmp	r0, #0
1a0007b6:	d0f9      	beq.n	1a0007ac <socket+0xc4>
   return (int8_t)sn;
1a0007b8:	b268      	sxtb	r0, r5
}
1a0007ba:	b002      	add	sp, #8
1a0007bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            WgetSIPR((uint8_t*)&taddr);
1a0007c0:	2204      	movs	r2, #4
1a0007c2:	eb0d 0102 	add.w	r1, sp, r2
1a0007c6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
1a0007ca:	f000 f875 	bl	1a0008b8 <WREAD_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
1a0007ce:	9b01      	ldr	r3, [sp, #4]
1a0007d0:	2b00      	cmp	r3, #0
1a0007d2:	d19b      	bne.n	1a00070c <socket+0x24>
1a0007d4:	f06f 0002 	mvn.w	r0, #2
1a0007d8:	e7ef      	b.n	1a0007ba <socket+0xd2>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
1a0007da:	f016 0f21 	tst.w	r6, #33	; 0x21
1a0007de:	d19e      	bne.n	1a00071e <socket+0x36>
1a0007e0:	f06f 0005 	mvn.w	r0, #5
1a0007e4:	e7e9      	b.n	1a0007ba <socket+0xd2>
   	      if(flag & SF_IGMP_VER2)
1a0007e6:	f016 0f20 	tst.w	r6, #32
1a0007ea:	d002      	beq.n	1a0007f2 <socket+0x10a>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
1a0007ec:	f016 0f80 	tst.w	r6, #128	; 0x80
1a0007f0:	d016      	beq.n	1a000820 <socket+0x138>
      	      if(flag & SF_UNI_BLOCK)
1a0007f2:	f016 0f10 	tst.w	r6, #16
1a0007f6:	d092      	beq.n	1a00071e <socket+0x36>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
1a0007f8:	f016 0f80 	tst.w	r6, #128	; 0x80
1a0007fc:	d18f      	bne.n	1a00071e <socket+0x36>
1a0007fe:	f06f 0005 	mvn.w	r0, #5
1a000802:	e7da      	b.n	1a0007ba <socket+0xd2>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
1a000804:	4b08      	ldr	r3, [pc, #32]	; (1a000828 <socket+0x140>)
1a000806:	f44f 4240 	mov.w	r2, #49152	; 0xc000
1a00080a:	801a      	strh	r2, [r3, #0]
1a00080c:	e7a3      	b.n	1a000756 <socket+0x6e>
	CHECK_SOCKNUM();
1a00080e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000812:	4770      	bx	lr
         return SOCKERR_SOCKMODE;
1a000814:	f06f 0004 	mvn.w	r0, #4
1a000818:	e7cf      	b.n	1a0007ba <socket+0xd2>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
1a00081a:	f06f 0005 	mvn.w	r0, #5
1a00081e:	e7cc      	b.n	1a0007ba <socket+0xd2>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
1a000820:	f06f 0005 	mvn.w	r0, #5
1a000824:	e7c9      	b.n	1a0007ba <socket+0xd2>
1a000826:	bf00      	nop
1a000828:	10000000 	.word	0x10000000
1a00082c:	10000a78 	.word	0x10000a78
1a000830:	10000a7a 	.word	0x10000a7a
1a000834:	10000a7c 	.word	0x10000a7c

1a000838 <WREAD>:
/*==================[external functions definition]==========================*/

/*==================[internal functions definition]==========================*/


uint8_t WREAD (uint32_t addr){
1a000838:	b530      	push	{r4, r5, lr}
1a00083a:	b083      	sub	sp, #12

	 	  uint8_t ret;
	  	  uint8_t spi_data[3];
	  	  spi_data[0] = (addr & 0x00FF0000) >> 16;
1a00083c:	0c03      	lsrs	r3, r0, #16
1a00083e:	f88d 3004 	strb.w	r3, [sp, #4]
	  	  spi_data[1] = (addr & 0x0000FF00) >> 8;
1a000842:	0a03      	lsrs	r3, r0, #8
1a000844:	f88d 3005 	strb.w	r3, [sp, #5]
	  	  spi_data[2] = (addr & 0x000000FF) >> 0;
1a000848:	f88d 0006 	strb.w	r0, [sp, #6]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a00084c:	4d0a      	ldr	r5, [pc, #40]	; (1a000878 <WREAD+0x40>)
1a00084e:	2400      	movs	r4, #0
1a000850:	f885 4060 	strb.w	r4, [r5, #96]	; 0x60

	  	  Chip_GPIO_SetPinState( LPC_GPIO_PORT, 3, 0, 0); ///GPIO0 Comienza
	  	  spiWrite( MAPSPI, spi_data, 3);
1a000854:	2203      	movs	r2, #3
1a000856:	a901      	add	r1, sp, #4
1a000858:	4620      	mov	r0, r4
1a00085a:	f000 fd3d 	bl	1a0012d8 <spiWrite>
	  	  spiRead( MAPSPI, &ret, 1);
1a00085e:	2201      	movs	r2, #1
1a000860:	f10d 0107 	add.w	r1, sp, #7
1a000864:	4620      	mov	r0, r4
1a000866:	f000 fd21 	bl	1a0012ac <spiRead>
1a00086a:	2301      	movs	r3, #1
1a00086c:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	  	  Chip_GPIO_SetPinState( LPC_GPIO_PORT, 3, 0, 1); ///GPIO0 Termina

	  	  return ret;


}
1a000870:	f89d 0007 	ldrb.w	r0, [sp, #7]
1a000874:	b003      	add	sp, #12
1a000876:	bd30      	pop	{r4, r5, pc}
1a000878:	400f4000 	.word	0x400f4000

1a00087c <WWRITE>:

void WWRITE (uint32_t addr, uint8_t wb){
1a00087c:	b510      	push	{r4, lr}
1a00087e:	b082      	sub	sp, #8

		  addr=addr|(0x0001 << 2);  //0000 0100  WRITE
1a000880:	f040 0004 	orr.w	r0, r0, #4
	 	  uint8_t ret;
	  	  uint8_t spi_data[3];
	  	  spi_data[0] = (addr & 0x00FF0000) >> 16;
1a000884:	0c03      	lsrs	r3, r0, #16
1a000886:	f88d 3004 	strb.w	r3, [sp, #4]
	  	  spi_data[1] = (addr & 0x0000FF00) >> 8;
1a00088a:	0a03      	lsrs	r3, r0, #8
1a00088c:	f88d 3005 	strb.w	r3, [sp, #5]
	  	  spi_data[2] = (addr & 0x000000FF) >> 0;
1a000890:	f88d 0006 	strb.w	r0, [sp, #6]
	  	  spi_data[3] = wb;
1a000894:	f88d 1007 	strb.w	r1, [sp, #7]
1a000898:	4c06      	ldr	r4, [pc, #24]	; (1a0008b4 <WWRITE+0x38>)
1a00089a:	2000      	movs	r0, #0
1a00089c:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
	  	  Chip_GPIO_SetPinState( LPC_GPIO_PORT, 3, 0, 0); ///GPIO0 Comienza
	  	  spiWrite( MAPSPI, spi_data, 4);
1a0008a0:	2204      	movs	r2, #4
1a0008a2:	eb0d 0102 	add.w	r1, sp, r2
1a0008a6:	f000 fd17 	bl	1a0012d8 <spiWrite>
1a0008aa:	2301      	movs	r3, #1
1a0008ac:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60


	  	  return;


}
1a0008b0:	b002      	add	sp, #8
1a0008b2:	bd10      	pop	{r4, pc}
1a0008b4:	400f4000 	.word	0x400f4000

1a0008b8 <WREAD_BUF>:
void     WREAD_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
1a0008b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0008ba:	b083      	sub	sp, #12
1a0008bc:	460e      	mov	r6, r1
1a0008be:	4617      	mov	r7, r2
   uint8_t spi_data[3];
   uint16_t i;



		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
1a0008c0:	0c03      	lsrs	r3, r0, #16
1a0008c2:	f88d 3004 	strb.w	r3, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
1a0008c6:	0a03      	lsrs	r3, r0, #8
1a0008c8:	f88d 3005 	strb.w	r3, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
1a0008cc:	f88d 0006 	strb.w	r0, [sp, #6]
1a0008d0:	4d09      	ldr	r5, [pc, #36]	; (1a0008f8 <WREAD_BUF+0x40>)
1a0008d2:	2400      	movs	r4, #0
1a0008d4:	f885 4060 	strb.w	r4, [r5, #96]	; 0x60

		Chip_GPIO_SetPinState( LPC_GPIO_PORT, 3, 0, 0); ///GPIO0 Comienza
		spiWrite( MAPSPI, spi_data, 3);
1a0008d8:	2203      	movs	r2, #3
1a0008da:	a901      	add	r1, sp, #4
1a0008dc:	4620      	mov	r0, r4
1a0008de:	f000 fcfb 	bl	1a0012d8 <spiWrite>
		spiRead( MAPSPI, pBuf, len);
1a0008e2:	463a      	mov	r2, r7
1a0008e4:	4631      	mov	r1, r6
1a0008e6:	4620      	mov	r0, r4
1a0008e8:	f000 fce0 	bl	1a0012ac <spiRead>
1a0008ec:	2301      	movs	r3, #1
1a0008ee:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
		Chip_GPIO_SetPinState( LPC_GPIO_PORT, 3, 0, 1); ///GPIO0 Termina
		return;
}
1a0008f2:	b003      	add	sp, #12
1a0008f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a0008f6:	bf00      	nop
1a0008f8:	400f4000 	.word	0x400f4000

1a0008fc <WWRITE_BUF>:
void     WWRITE_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
1a0008fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0008fe:	b083      	sub	sp, #12
1a000900:	460e      	mov	r6, r1
1a000902:	4617      	mov	r7, r2
   uint8_t spi_data[3];
   uint16_t i;

   	   AddrSel=AddrSel|(0x0001 << 2);  //0000 0100  WRITE
1a000904:	f040 0004 	orr.w	r0, r0, #4


		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
1a000908:	0c03      	lsrs	r3, r0, #16
1a00090a:	f88d 3004 	strb.w	r3, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
1a00090e:	0a03      	lsrs	r3, r0, #8
1a000910:	f88d 3005 	strb.w	r3, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
1a000914:	f88d 0006 	strb.w	r0, [sp, #6]
1a000918:	4d09      	ldr	r5, [pc, #36]	; (1a000940 <WWRITE_BUF+0x44>)
1a00091a:	2400      	movs	r4, #0
1a00091c:	f885 4060 	strb.w	r4, [r5, #96]	; 0x60

		Chip_GPIO_SetPinState( LPC_GPIO_PORT, 3, 0, 0); ///GPIO0 Comienza
		spiWrite( MAPSPI, spi_data, 3);
1a000920:	2203      	movs	r2, #3
1a000922:	a901      	add	r1, sp, #4
1a000924:	4620      	mov	r0, r4
1a000926:	f000 fcd7 	bl	1a0012d8 <spiWrite>
		spiWrite( MAPSPI, pBuf, len);
1a00092a:	463a      	mov	r2, r7
1a00092c:	4631      	mov	r1, r6
1a00092e:	4620      	mov	r0, r4
1a000930:	f000 fcd2 	bl	1a0012d8 <spiWrite>
1a000934:	2301      	movs	r3, #1
1a000936:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
		Chip_GPIO_SetPinState( LPC_GPIO_PORT, 3, 0, 1); ///GPIO0 Termina
		return;
}
1a00093a:	b003      	add	sp, #12
1a00093c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00093e:	bf00      	nop
1a000940:	400f4000 	.word	0x400f4000

1a000944 <WgetSn_TX_FSR>:




uint16_t WgetSn_TX_FSR(uint8_t sn)
{
1a000944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000948:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
1a00094a:	2500      	movs	r5, #0
1a00094c:	e001      	b.n	1a000952 <WgetSn_TX_FSR+0xe>
      if (val1 != 0)
      {
        val = WREAD(Sn_TX_FSR(sn));
        val = (val << 8) + WREAD(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
      }
   }while (val != val1);
1a00094e:	42a5      	cmp	r5, r4
1a000950:	d024      	beq.n	1a00099c <WgetSn_TX_FSR+0x58>
      val1 = WREAD(Sn_TX_FSR(sn));
1a000952:	ea4f 0887 	mov.w	r8, r7, lsl #2
1a000956:	f108 0801 	add.w	r8, r8, #1
1a00095a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
1a00095e:	f508 5600 	add.w	r6, r8, #8192	; 0x2000
1a000962:	4630      	mov	r0, r6
1a000964:	f7ff ff68 	bl	1a000838 <WREAD>
1a000968:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WREAD(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
1a00096a:	0224      	lsls	r4, r4, #8
1a00096c:	b2a4      	uxth	r4, r4
1a00096e:	f508 5804 	add.w	r8, r8, #8448	; 0x2100
1a000972:	4640      	mov	r0, r8
1a000974:	f7ff ff60 	bl	1a000838 <WREAD>
1a000978:	fa14 f480 	uxtah	r4, r4, r0
1a00097c:	b2a4      	uxth	r4, r4
      if (val1 != 0)
1a00097e:	2c00      	cmp	r4, #0
1a000980:	d0e5      	beq.n	1a00094e <WgetSn_TX_FSR+0xa>
        val = WREAD(Sn_TX_FSR(sn));
1a000982:	4630      	mov	r0, r6
1a000984:	f7ff ff58 	bl	1a000838 <WREAD>
1a000988:	b285      	uxth	r5, r0
        val = (val << 8) + WREAD(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
1a00098a:	022d      	lsls	r5, r5, #8
1a00098c:	b2ad      	uxth	r5, r5
1a00098e:	4640      	mov	r0, r8
1a000990:	f7ff ff52 	bl	1a000838 <WREAD>
1a000994:	fa15 f580 	uxtah	r5, r5, r0
1a000998:	b2ad      	uxth	r5, r5
1a00099a:	e7d8      	b.n	1a00094e <WgetSn_TX_FSR+0xa>
   return val;
}
1a00099c:	4628      	mov	r0, r5
1a00099e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a0009a2 <WgetSn_RX_RSR>:


uint16_t WgetSn_RX_RSR(uint8_t sn)
{
1a0009a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0009a6:	4607      	mov	r7, r0
   uint16_t val=0,val1=0;
1a0009a8:	2500      	movs	r5, #0
1a0009aa:	e001      	b.n	1a0009b0 <WgetSn_RX_RSR+0xe>
      if (val1 != 0)
      {
        val = WREAD(Sn_RX_RSR(sn));
        val = (val << 8) + WREAD(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
      }
   }while (val != val1);
1a0009ac:	42a5      	cmp	r5, r4
1a0009ae:	d024      	beq.n	1a0009fa <WgetSn_RX_RSR+0x58>
      val1 = WREAD(Sn_RX_RSR(sn));
1a0009b0:	ea4f 0887 	mov.w	r8, r7, lsl #2
1a0009b4:	f108 0801 	add.w	r8, r8, #1
1a0009b8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
1a0009bc:	f508 5618 	add.w	r6, r8, #9728	; 0x2600
1a0009c0:	4630      	mov	r0, r6
1a0009c2:	f7ff ff39 	bl	1a000838 <WREAD>
1a0009c6:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WREAD(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
1a0009c8:	0224      	lsls	r4, r4, #8
1a0009ca:	b2a4      	uxth	r4, r4
1a0009cc:	f508 581c 	add.w	r8, r8, #9984	; 0x2700
1a0009d0:	4640      	mov	r0, r8
1a0009d2:	f7ff ff31 	bl	1a000838 <WREAD>
1a0009d6:	fa14 f480 	uxtah	r4, r4, r0
1a0009da:	b2a4      	uxth	r4, r4
      if (val1 != 0)
1a0009dc:	2c00      	cmp	r4, #0
1a0009de:	d0e5      	beq.n	1a0009ac <WgetSn_RX_RSR+0xa>
        val = WREAD(Sn_RX_RSR(sn));
1a0009e0:	4630      	mov	r0, r6
1a0009e2:	f7ff ff29 	bl	1a000838 <WREAD>
1a0009e6:	b285      	uxth	r5, r0
        val = (val << 8) + WREAD(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
1a0009e8:	022d      	lsls	r5, r5, #8
1a0009ea:	b2ad      	uxth	r5, r5
1a0009ec:	4640      	mov	r0, r8
1a0009ee:	f7ff ff23 	bl	1a000838 <WREAD>
1a0009f2:	fa15 f580 	uxtah	r5, r5, r0
1a0009f6:	b2ad      	uxth	r5, r5
1a0009f8:	e7d8      	b.n	1a0009ac <WgetSn_RX_RSR+0xa>
   return val;
}
1a0009fa:	4628      	mov	r0, r5
1a0009fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a000a00 <Wsend_data>:
void Wsend_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
1a000a00:	b902      	cbnz	r2, 1a000a04 <Wsend_data+0x4>
1a000a02:	4770      	bx	lr
{
1a000a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000a08:	4615      	mov	r5, r2
1a000a0a:	460f      	mov	r7, r1
   ptr = WgetSn_TX_WR(sn);
1a000a0c:	0084      	lsls	r4, r0, #2
1a000a0e:	f104 0901 	add.w	r9, r4, #1
1a000a12:	ea4f 09c9 	mov.w	r9, r9, lsl #3
1a000a16:	f509 5810 	add.w	r8, r9, #9216	; 0x2400
1a000a1a:	4640      	mov	r0, r8
1a000a1c:	f7ff ff0c 	bl	1a000838 <WREAD>
1a000a20:	b286      	uxth	r6, r0
1a000a22:	0236      	lsls	r6, r6, #8
1a000a24:	b2b6      	uxth	r6, r6
1a000a26:	f509 5914 	add.w	r9, r9, #9472	; 0x2500
1a000a2a:	4648      	mov	r0, r9
1a000a2c:	f7ff ff04 	bl	1a000838 <WREAD>
1a000a30:	fa16 f680 	uxtah	r6, r6, r0
1a000a34:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
1a000a36:	1ca0      	adds	r0, r4, #2
1a000a38:	00c0      	lsls	r0, r0, #3
   //
   WWRITE_BUF(addrsel,wizdata, len);
1a000a3a:	462a      	mov	r2, r5
1a000a3c:	4639      	mov	r1, r7
1a000a3e:	eb00 2006 	add.w	r0, r0, r6, lsl #8
1a000a42:	f7ff ff5b 	bl	1a0008fc <WWRITE_BUF>

   ptr += len;
1a000a46:	4435      	add	r5, r6
1a000a48:	b2ad      	uxth	r5, r5
   WsetSn_TX_WR(sn,ptr);
1a000a4a:	0a29      	lsrs	r1, r5, #8
1a000a4c:	4640      	mov	r0, r8
1a000a4e:	f7ff ff15 	bl	1a00087c <WWRITE>
1a000a52:	b2e9      	uxtb	r1, r5
1a000a54:	4648      	mov	r0, r9
1a000a56:	f7ff ff11 	bl	1a00087c <WWRITE>
}
1a000a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a000a5e <Wrecv_data>:
void Wrecv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0) return;
1a000a5e:	b902      	cbnz	r2, 1a000a62 <Wrecv_data+0x4>
1a000a60:	4770      	bx	lr
{
1a000a62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000a66:	4615      	mov	r5, r2
1a000a68:	460f      	mov	r7, r1
   ptr = WgetSn_RX_RD(sn);
1a000a6a:	0084      	lsls	r4, r0, #2
1a000a6c:	f104 0901 	add.w	r9, r4, #1
1a000a70:	ea4f 09c9 	mov.w	r9, r9, lsl #3
1a000a74:	f509 5820 	add.w	r8, r9, #10240	; 0x2800
1a000a78:	4640      	mov	r0, r8
1a000a7a:	f7ff fedd 	bl	1a000838 <WREAD>
1a000a7e:	b286      	uxth	r6, r0
1a000a80:	0236      	lsls	r6, r6, #8
1a000a82:	b2b6      	uxth	r6, r6
1a000a84:	f509 5924 	add.w	r9, r9, #10496	; 0x2900
1a000a88:	4648      	mov	r0, r9
1a000a8a:	f7ff fed5 	bl	1a000838 <WREAD>
1a000a8e:	fa16 f680 	uxtah	r6, r6, r0
1a000a92:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
1a000a94:	1ce0      	adds	r0, r4, #3
1a000a96:	00c0      	lsls	r0, r0, #3
   //
   WREAD_BUF(addrsel, wizdata, len);
1a000a98:	462a      	mov	r2, r5
1a000a9a:	4639      	mov	r1, r7
1a000a9c:	eb00 2006 	add.w	r0, r0, r6, lsl #8
1a000aa0:	f7ff ff0a 	bl	1a0008b8 <WREAD_BUF>
   ptr += len;
1a000aa4:	4435      	add	r5, r6
1a000aa6:	b2ad      	uxth	r5, r5

   WsetSn_RX_RD(sn,ptr);
1a000aa8:	0a29      	lsrs	r1, r5, #8
1a000aaa:	4640      	mov	r0, r8
1a000aac:	f7ff fee6 	bl	1a00087c <WWRITE>
1a000ab0:	b2e9      	uxtb	r1, r5
1a000ab2:	4648      	mov	r0, r9
1a000ab4:	f7ff fee2 	bl	1a00087c <WWRITE>
}
1a000ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a000abc <loopback_tcpc>:

////////CLIENT APP////////////
   //////////////////////////////////////////////////////////////////////////

   int32_t loopback_tcpc(uint8_t sn, uint8_t* buf, uint8_t* destip, uint16_t destport)
   {
1a000abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000ac0:	b084      	sub	sp, #16
1a000ac2:	4605      	mov	r5, r0
1a000ac4:	460f      	mov	r7, r1
1a000ac6:	4616      	mov	r6, r2
1a000ac8:	4698      	mov	r8, r3
      // Port number for TCP client (will be increased)
      static uint16_t any_port = 	49152;

      // Socket Status Transitions
      // Check the W5500 Socket n status register (Sn_SR, The 'Sn_SR' controlled by Sn_CR command or Packet send/recv status)
      switch(WgetSn_SR(sn))
1a000aca:	0084      	lsls	r4, r0, #2
1a000acc:	3401      	adds	r4, #1
1a000ace:	00e4      	lsls	r4, r4, #3
1a000ad0:	f504 7040 	add.w	r0, r4, #768	; 0x300
1a000ad4:	f7ff feb0 	bl	1a000838 <WREAD>
1a000ad8:	281c      	cmp	r0, #28
1a000ada:	f200 808c 	bhi.w	1a000bf6 <loopback_tcpc+0x13a>
1a000ade:	e8df f000 	tbb	[pc, r0]
1a000ae2:	8a6d      	.short	0x8a6d
1a000ae4:	8a8a8a8a 	.word	0x8a8a8a8a
1a000ae8:	8a8a8a8a 	.word	0x8a8a8a8a
1a000aec:	8a8a8a8a 	.word	0x8a8a8a8a
1a000af0:	8a8a8a8a 	.word	0x8a8a8a8a
1a000af4:	8a8a638a 	.word	0x8a8a638a
1a000af8:	8a8a0f8a 	.word	0x8a8a0f8a
1a000afc:	8a8a      	.short	0x8a8a
1a000afe:	58          	.byte	0x58
1a000aff:	00          	.byte	0x00
      {
         case SOCK_ESTABLISHED :
        	 printf( "SOCK_ESTABLISHED\r\n");
1a000b00:	4841      	ldr	r0, [pc, #260]	; (1a000c08 <loopback_tcpc+0x14c>)
1a000b02:	f002 fbe7 	bl	1a0032d4 <puts>
        	 printf("%d:Connected to - %d.%d.%d.%d : %d\r\n",sn, destip[0], destip[1], destip[2], destip[3], destport);
1a000b06:	7832      	ldrb	r2, [r6, #0]
1a000b08:	7873      	ldrb	r3, [r6, #1]
1a000b0a:	78b1      	ldrb	r1, [r6, #2]
1a000b0c:	78f0      	ldrb	r0, [r6, #3]
1a000b0e:	f8cd 8008 	str.w	r8, [sp, #8]
1a000b12:	9001      	str	r0, [sp, #4]
1a000b14:	9100      	str	r1, [sp, #0]
1a000b16:	4629      	mov	r1, r5
1a000b18:	483c      	ldr	r0, [pc, #240]	; (1a000c0c <loopback_tcpc+0x150>)
1a000b1a:	f002 fb79 	bl	1a003210 <printf>
        	 if(Fstenv){
        		 send( sn, buf, size);
1a000b1e:	2204      	movs	r2, #4
1a000b20:	4639      	mov	r1, r7
1a000b22:	4628      	mov	r0, r5
1a000b24:	f7ff fc96 	bl	1a000454 <send>
        		 Fstenv=0;
        	 }////

            if(WgetSn_IR(sn) & Sn_IR_CON)	// Socket n interrupt register mask; TCP CON interrupt = connection with peer is successful
1a000b28:	f504 7400 	add.w	r4, r4, #512	; 0x200
1a000b2c:	4620      	mov	r0, r4
1a000b2e:	f7ff fe83 	bl	1a000838 <WREAD>
1a000b32:	f010 0f01 	tst.w	r0, #1
1a000b36:	d121      	bne.n	1a000b7c <loopback_tcpc+0xc0>
            }

            //////////////////////////////////////////////////////////////////////////////////////////////
            // Data Transaction Parts; Handle the [data receive and send] process
            //////////////////////////////////////////////////////////////////////////////////////////////
   		 if((size = WgetSn_RX_RSR(sn)) > 0) // Sn_RX_RSR: Socket n Received Size Register, Receiving data length
1a000b38:	4628      	mov	r0, r5
1a000b3a:	f7ff ff32 	bl	1a0009a2 <WgetSn_RX_RSR>
1a000b3e:	4602      	mov	r2, r0
1a000b40:	2800      	cmp	r0, #0
1a000b42:	d05d      	beq.n	1a000c00 <loopback_tcpc+0x144>
            {
   			if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE; // DATA_BUF_SIZE means user defined buffer size (array)
1a000b44:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
1a000b48:	d901      	bls.n	1a000b4e <loopback_tcpc+0x92>
1a000b4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   			ret = recv(sn, buf, size); // Data Receive process (H/W Rx socket buffer -> User's buffer)
1a000b4e:	4639      	mov	r1, r7
1a000b50:	4628      	mov	r0, r5
1a000b52:	f7ff fc0d 	bl	1a000370 <recv>

   			if(ret <= 0) return ret; // If the received data length <= 0, receive failed and process end
1a000b56:	1e06      	subs	r6, r0, #0
1a000b58:	dd22      	ble.n	1a000ba0 <loopback_tcpc+0xe4>
   			size = (uint16_t) ret;
1a000b5a:	fa1f f886 	uxth.w	r8, r6
   			sentsize = 0;
1a000b5e:	2400      	movs	r4, #0

   			// Data sentsize control
   			while(size != sentsize)
1a000b60:	4544      	cmp	r4, r8
1a000b62:	d014      	beq.n	1a000b8e <loopback_tcpc+0xd2>
   			{
   				ret = send(sn, buf+sentsize, size-sentsize); // Data send process (User's buffer -> Destination through H/W Tx socket buffer)
1a000b64:	eba8 0204 	sub.w	r2, r8, r4
1a000b68:	b292      	uxth	r2, r2
1a000b6a:	1939      	adds	r1, r7, r4
1a000b6c:	4628      	mov	r0, r5
1a000b6e:	f7ff fc71 	bl	1a000454 <send>
   				if(ret < 0) // Send Error occurred (sent data length < 0)
1a000b72:	1e06      	subs	r6, r0, #0
1a000b74:	db07      	blt.n	1a000b86 <loopback_tcpc+0xca>
   				{
   					close(sn); // socket close
   					return ret;
   				}
   				sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
1a000b76:	4434      	add	r4, r6
1a000b78:	b2a4      	uxth	r4, r4
1a000b7a:	e7f1      	b.n	1a000b60 <loopback_tcpc+0xa4>
   			WsetSn_IR(sn, Sn_IR_CON);  // this interrupt should be write the bit cleared to '1'
1a000b7c:	2101      	movs	r1, #1
1a000b7e:	4620      	mov	r0, r4
1a000b80:	f7ff fe7c 	bl	1a00087c <WWRITE>
1a000b84:	e7d8      	b.n	1a000b38 <loopback_tcpc+0x7c>
   					close(sn); // socket close
1a000b86:	4628      	mov	r0, r5
1a000b88:	f7ff fbba 	bl	1a000300 <close>
   					return ret;
1a000b8c:	e008      	b.n	1a000ba0 <loopback_tcpc+0xe4>

            break;
         default:printf( "DEFAULT\r\n");
            break;
      }
      return 1;
1a000b8e:	2601      	movs	r6, #1
1a000b90:	e006      	b.n	1a000ba0 <loopback_tcpc+0xe4>
        	 printf( "SOCK_CLOSE_WAIT\r\n");
1a000b92:	481f      	ldr	r0, [pc, #124]	; (1a000c10 <loopback_tcpc+0x154>)
1a000b94:	f002 fb9e 	bl	1a0032d4 <puts>
            if((ret=disconnect(sn)) != SOCK_OK) return ret;
1a000b98:	4628      	mov	r0, r5
1a000b9a:	f7ff fcf1 	bl	1a000580 <disconnect>
1a000b9e:	4606      	mov	r6, r0
   }
1a000ba0:	4630      	mov	r0, r6
1a000ba2:	b004      	add	sp, #16
1a000ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        	 printf( "SOCK_INIT\r\n");
1a000ba8:	481a      	ldr	r0, [pc, #104]	; (1a000c14 <loopback_tcpc+0x158>)
1a000baa:	f002 fb93 	bl	1a0032d4 <puts>
       	 if( (ret = connect(sn, destip, destport)) != SOCK_OK) return ret;	//	Try to TCP connect to the TCP server (destination)
1a000bae:	4642      	mov	r2, r8
1a000bb0:	4631      	mov	r1, r6
1a000bb2:	4628      	mov	r0, r5
1a000bb4:	f7ff fd2c 	bl	1a000610 <connect>
1a000bb8:	4606      	mov	r6, r0
1a000bba:	e7f1      	b.n	1a000ba0 <loopback_tcpc+0xe4>
        	 printf( "SOCK_CLOSED\r\n");
1a000bbc:	4816      	ldr	r0, [pc, #88]	; (1a000c18 <loopback_tcpc+0x15c>)
1a000bbe:	f002 fb89 	bl	1a0032d4 <puts>
       	  close(sn);
1a000bc2:	4628      	mov	r0, r5
1a000bc4:	f7ff fb9c 	bl	1a000300 <close>
      	  if((ret=socket(sn, Sn_MR_TCP, any_port++, 0x00)) != sn){
1a000bc8:	4b14      	ldr	r3, [pc, #80]	; (1a000c1c <loopback_tcpc+0x160>)
1a000bca:	881a      	ldrh	r2, [r3, #0]
1a000bcc:	1c51      	adds	r1, r2, #1
1a000bce:	8019      	strh	r1, [r3, #0]
1a000bd0:	2300      	movs	r3, #0
1a000bd2:	2101      	movs	r1, #1
1a000bd4:	4628      	mov	r0, r5
1a000bd6:	f7ff fd87 	bl	1a0006e8 <socket>
1a000bda:	4606      	mov	r6, r0
1a000bdc:	4285      	cmp	r5, r0
1a000bde:	d011      	beq.n	1a000c04 <loopback_tcpc+0x148>
            if(any_port == 0xffff) any_port = 50000;
1a000be0:	4b0e      	ldr	r3, [pc, #56]	; (1a000c1c <loopback_tcpc+0x160>)
1a000be2:	881a      	ldrh	r2, [r3, #0]
1a000be4:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a000be8:	429a      	cmp	r2, r3
1a000bea:	d1d9      	bne.n	1a000ba0 <loopback_tcpc+0xe4>
1a000bec:	4b0b      	ldr	r3, [pc, #44]	; (1a000c1c <loopback_tcpc+0x160>)
1a000bee:	f24c 3250 	movw	r2, #50000	; 0xc350
1a000bf2:	801a      	strh	r2, [r3, #0]
1a000bf4:	e7d4      	b.n	1a000ba0 <loopback_tcpc+0xe4>
         default:printf( "DEFAULT\r\n");
1a000bf6:	480a      	ldr	r0, [pc, #40]	; (1a000c20 <loopback_tcpc+0x164>)
1a000bf8:	f002 fb6c 	bl	1a0032d4 <puts>
      return 1;
1a000bfc:	2601      	movs	r6, #1
            break;
1a000bfe:	e7cf      	b.n	1a000ba0 <loopback_tcpc+0xe4>
      return 1;
1a000c00:	2601      	movs	r6, #1
1a000c02:	e7cd      	b.n	1a000ba0 <loopback_tcpc+0xe4>
1a000c04:	2601      	movs	r6, #1
1a000c06:	e7cb      	b.n	1a000ba0 <loopback_tcpc+0xe4>
1a000c08:	1a007fd0 	.word	0x1a007fd0
1a000c0c:	1a007fe4 	.word	0x1a007fe4
1a000c10:	1a00800c 	.word	0x1a00800c
1a000c14:	1a008020 	.word	0x1a008020
1a000c18:	1a00802c 	.word	0x1a00802c
1a000c1c:	10000002 	.word	0x10000002
1a000c20:	1a00803c 	.word	0x1a00803c

1a000c24 <main>:
int main(void){
1a000c24:	b530      	push	{r4, r5, lr}
1a000c26:	b099      	sub	sp, #100	; 0x64
	boardConfig();
1a000c28:	f000 fc1e 	bl	1a001468 <boardInit>
	spiConfig( sPI );//inicia el spi
1a000c2c:	2000      	movs	r0, #0
1a000c2e:	f000 fb15 	bl	1a00125c <spiInit>
	tickConfig( 1 );
1a000c32:	2001      	movs	r0, #1
1a000c34:	2100      	movs	r1, #0
1a000c36:	f000 fa4f 	bl	1a0010d8 <tickInit>
	 delayInit( &showman, 200);
1a000c3a:	22c8      	movs	r2, #200	; 0xc8
1a000c3c:	2300      	movs	r3, #0
1a000c3e:	a812      	add	r0, sp, #72	; 0x48
1a000c40:	f000 fb7c 	bl	1a00133c <delayInit>
   printf("Inicializando...\r\n" );
1a000c44:	4875      	ldr	r0, [pc, #468]	; (1a000e1c <main+0x1f8>)
1a000c46:	f002 fb45 	bl	1a0032d4 <puts>
   printf("Comm inicializada correctamente.\r\n\r\n" );
1a000c4a:	4875      	ldr	r0, [pc, #468]	; (1a000e20 <main+0x1fc>)
1a000c4c:	f002 fb42 	bl	1a0032d4 <puts>
1a000c50:	4b74      	ldr	r3, [pc, #464]	; (1a000e24 <main+0x200>)
1a000c52:	2201      	movs	r2, #1
1a000c54:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
1a000c58:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
   uint8_t leMAC[6]={0x78,0xD6,0xB2,0x73,0x55,0x01}; 	//78:D6:B2	Toshiba
1a000c5c:	4c72      	ldr	r4, [pc, #456]	; (1a000e28 <main+0x204>)
1a000c5e:	e894 0003 	ldmia.w	r4, {r0, r1}
1a000c62:	9010      	str	r0, [sp, #64]	; 0x40
1a000c64:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
   WsetSHAR(leMAC);
1a000c68:	2206      	movs	r2, #6
1a000c6a:	a910      	add	r1, sp, #64	; 0x40
1a000c6c:	f44f 6010 	mov.w	r0, #2304	; 0x900
1a000c70:	f7ff fe44 	bl	1a0008fc <WWRITE_BUF>
   uint8_t leIP[4]={192, 168, 1, 207};
1a000c74:	68a3      	ldr	r3, [r4, #8]
1a000c76:	a918      	add	r1, sp, #96	; 0x60
1a000c78:	f841 3d24 	str.w	r3, [r1, #-36]!
   WsetSIPR(leIP);
1a000c7c:	2204      	movs	r2, #4
1a000c7e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
1a000c82:	f7ff fe3b 	bl	1a0008fc <WWRITE_BUF>
   uint8_t leSUB[4]={255,255,255,0};
1a000c86:	68e3      	ldr	r3, [r4, #12]
1a000c88:	a918      	add	r1, sp, #96	; 0x60
1a000c8a:	f841 3d28 	str.w	r3, [r1, #-40]!
   WsetSUBR(leSUB);
1a000c8e:	2204      	movs	r2, #4
1a000c90:	f44f 60a0 	mov.w	r0, #1280	; 0x500
1a000c94:	f7ff fe32 	bl	1a0008fc <WWRITE_BUF>
   uint8_t leGETA[4]={192,168,1,1};
1a000c98:	6923      	ldr	r3, [r4, #16]
1a000c9a:	a918      	add	r1, sp, #96	; 0x60
1a000c9c:	f841 3d2c 	str.w	r3, [r1, #-44]!
   WsetGAR(leGETA);
1a000ca0:	2204      	movs	r2, #4
1a000ca2:	f44f 7080 	mov.w	r0, #256	; 0x100
1a000ca6:	f7ff fe29 	bl	1a0008fc <WWRITE_BUF>
   	   	 uint8_t ipdestino[4] = 	{192, 168, 1, 15};
1a000caa:	6963      	ldr	r3, [r4, #20]
1a000cac:	930c      	str	r3, [sp, #48]	; 0x30
   	   	 uint8_t buffer[11]={'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'};
1a000cae:	ab09      	add	r3, sp, #36	; 0x24
1a000cb0:	3418      	adds	r4, #24
1a000cb2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
1a000cb6:	c303      	stmia	r3!, {r0, r1}
1a000cb8:	f823 2b02 	strh.w	r2, [r3], #2
1a000cbc:	0c12      	lsrs	r2, r2, #16
1a000cbe:	701a      	strb	r2, [r3, #0]
		   	   WsetSn_MSSR(socketnumber, leMTU);
1a000cc0:	2105      	movs	r1, #5
1a000cc2:	f241 2068 	movw	r0, #4712	; 0x1268
1a000cc6:	f7ff fdd9 	bl	1a00087c <WWRITE>
1a000cca:	21a4      	movs	r1, #164	; 0xa4
1a000ccc:	f241 3068 	movw	r0, #4968	; 0x1368
1a000cd0:	f7ff fdd4 	bl	1a00087c <WWRITE>
		   	   	   	   WgetSHAR(laMAC);
1a000cd4:	2206      	movs	r2, #6
1a000cd6:	a907      	add	r1, sp, #28
1a000cd8:	f44f 6010 	mov.w	r0, #2304	; 0x900
1a000cdc:	f7ff fdec 	bl	1a0008b8 <WREAD_BUF>
		 	   	   	   WgetSIPR(laIP);
1a000ce0:	2204      	movs	r2, #4
1a000ce2:	a906      	add	r1, sp, #24
1a000ce4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
1a000ce8:	f7ff fde6 	bl	1a0008b8 <WREAD_BUF>
		 	   	   	   WgetSUBR(laSUB);
1a000cec:	2204      	movs	r2, #4
1a000cee:	a905      	add	r1, sp, #20
1a000cf0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
1a000cf4:	f7ff fde0 	bl	1a0008b8 <WREAD_BUF>
		 	   	   	   WgetGAR(laGETA);
1a000cf8:	2204      	movs	r2, #4
1a000cfa:	a904      	add	r1, sp, #16
1a000cfc:	f44f 7080 	mov.w	r0, #256	; 0x100
1a000d00:	f7ff fdda 	bl	1a0008b8 <WREAD_BUF>
		 	   		   printf( "Modereg de socket N:\r\n %x\r\n",moderegister);
1a000d04:	212c      	movs	r1, #44	; 0x2c
1a000d06:	4849      	ldr	r0, [pc, #292]	; (1a000e2c <main+0x208>)
1a000d08:	f002 fa82 	bl	1a003210 <printf>
		 	   		   printf( "MAC de la BOARD:\r\n %x:%x:%x:%x:%x:%x   \r\n",laMAC[0],laMAC[1],laMAC[2],laMAC[3],laMAC[4],laMAC[5]);
1a000d0c:	f89d 101c 	ldrb.w	r1, [sp, #28]
1a000d10:	f89d 201d 	ldrb.w	r2, [sp, #29]
1a000d14:	f89d 301e 	ldrb.w	r3, [sp, #30]
1a000d18:	f89d 001f 	ldrb.w	r0, [sp, #31]
1a000d1c:	f89d 4020 	ldrb.w	r4, [sp, #32]
1a000d20:	f89d 5021 	ldrb.w	r5, [sp, #33]	; 0x21
1a000d24:	9502      	str	r5, [sp, #8]
1a000d26:	9401      	str	r4, [sp, #4]
1a000d28:	9000      	str	r0, [sp, #0]
1a000d2a:	4841      	ldr	r0, [pc, #260]	; (1a000e30 <main+0x20c>)
1a000d2c:	f002 fa70 	bl	1a003210 <printf>
		 	   		   printf( "IP de la BOARD: %d.%d.%d.%d   \r\n",laIP[0],laIP[1],laIP[2],laIP[3]);
1a000d30:	f89d 1018 	ldrb.w	r1, [sp, #24]
1a000d34:	f89d 2019 	ldrb.w	r2, [sp, #25]
1a000d38:	f89d 301a 	ldrb.w	r3, [sp, #26]
1a000d3c:	f89d 001b 	ldrb.w	r0, [sp, #27]
1a000d40:	9000      	str	r0, [sp, #0]
1a000d42:	483c      	ldr	r0, [pc, #240]	; (1a000e34 <main+0x210>)
1a000d44:	f002 fa64 	bl	1a003210 <printf>
		 	   		   printf( "SUBRED          %d.%d.%d.%d   \r\n",laSUB[0],laSUB[1],laSUB[2],laSUB[3]);
1a000d48:	f89d 1014 	ldrb.w	r1, [sp, #20]
1a000d4c:	f89d 2015 	ldrb.w	r2, [sp, #21]
1a000d50:	f89d 3016 	ldrb.w	r3, [sp, #22]
1a000d54:	f89d 0017 	ldrb.w	r0, [sp, #23]
1a000d58:	9000      	str	r0, [sp, #0]
1a000d5a:	4837      	ldr	r0, [pc, #220]	; (1a000e38 <main+0x214>)
1a000d5c:	f002 fa58 	bl	1a003210 <printf>
		 	   		   printf( "GETAWAY         %d.%d.%d.%d   \r\n",laGETA[0],laGETA[1],laGETA[2],laGETA[3]);
1a000d60:	f89d 1010 	ldrb.w	r1, [sp, #16]
1a000d64:	f89d 2011 	ldrb.w	r2, [sp, #17]
1a000d68:	f89d 3012 	ldrb.w	r3, [sp, #18]
1a000d6c:	f89d 0013 	ldrb.w	r0, [sp, #19]
1a000d70:	9000      	str	r0, [sp, #0]
1a000d72:	4832      	ldr	r0, [pc, #200]	; (1a000e3c <main+0x218>)
1a000d74:	f002 fa4c 	bl	1a003210 <printf>
1a000d78:	e002      	b.n	1a000d80 <main+0x15c>
		   printf( "LINK_OFF/UNKNOWN \r\n");
1a000d7a:	4831      	ldr	r0, [pc, #196]	; (1a000e40 <main+0x21c>)
1a000d7c:	f002 faaa 	bl	1a0032d4 <puts>
1a000d80:	4b28      	ldr	r3, [pc, #160]	; (1a000e24 <main+0x200>)
1a000d82:	2201      	movs	r2, #1
1a000d84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	   delay(1000);
1a000d88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000d8c:	2100      	movs	r1, #0
1a000d8e:	f000 fab9 	bl	1a001304 <delay>
	   lectura[0]= WgetPHYCFGR();
1a000d92:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
1a000d96:	f7ff fd4f 	bl	1a000838 <WREAD>
1a000d9a:	b285      	uxth	r5, r0
	   moderegister=WgetSn_PORT(socketnumber);
1a000d9c:	f44f 608d 	mov.w	r0, #1128	; 0x468
1a000da0:	f7ff fd4a 	bl	1a000838 <WREAD>
1a000da4:	b284      	uxth	r4, r0
1a000da6:	0224      	lsls	r4, r4, #8
1a000da8:	b2a4      	uxth	r4, r4
1a000daa:	f44f 60ad 	mov.w	r0, #1384	; 0x568
1a000dae:	f7ff fd43 	bl	1a000838 <WREAD>
1a000db2:	fa14 f080 	uxtah	r0, r4, r0
	   printf( "Puerto Origen:     %d\r\n",moderegister);
1a000db6:	b281      	uxth	r1, r0
1a000db8:	4822      	ldr	r0, [pc, #136]	; (1a000e44 <main+0x220>)
1a000dba:	f002 fa29 	bl	1a003210 <printf>
	   moderegister=WgetSn_DPORT(socketnumber);
1a000dbe:	f241 0068 	movw	r0, #4200	; 0x1068
1a000dc2:	f7ff fd39 	bl	1a000838 <WREAD>
1a000dc6:	b284      	uxth	r4, r0
1a000dc8:	0224      	lsls	r4, r4, #8
1a000dca:	b2a4      	uxth	r4, r4
1a000dcc:	f241 1068 	movw	r0, #4456	; 0x1168
1a000dd0:	f7ff fd32 	bl	1a000838 <WREAD>
1a000dd4:	fa14 f080 	uxtah	r0, r4, r0
	   printf( "Puerto Destino:     %d\r\n",moderegister);
1a000dd8:	b281      	uxth	r1, r0
1a000dda:	481b      	ldr	r0, [pc, #108]	; (1a000e48 <main+0x224>)
1a000ddc:	f002 fa18 	bl	1a003210 <printf>
	   if(lectura[0]&0x01){
1a000de0:	f015 0f01 	tst.w	r5, #1
1a000de4:	d0c9      	beq.n	1a000d7a <main+0x156>
		   printf( "LINK_ON\r\n");
1a000de6:	4819      	ldr	r0, [pc, #100]	; (1a000e4c <main+0x228>)
1a000de8:	f002 fa74 	bl	1a0032d4 <puts>
		   RESPUESTA=loopback_tcpc(socketnumber, buffer, ipdestino, portdestino);
1a000dec:	f241 63c7 	movw	r3, #5831	; 0x16c7
1a000df0:	aa0c      	add	r2, sp, #48	; 0x30
1a000df2:	a909      	add	r1, sp, #36	; 0x24
1a000df4:	2003      	movs	r0, #3
1a000df6:	f7ff fe61 	bl	1a000abc <loopback_tcpc>
		   printf( "Bandera de ERRROR : %d  \r\n",RESPUESTA);
1a000dfa:	4601      	mov	r1, r0
1a000dfc:	4814      	ldr	r0, [pc, #80]	; (1a000e50 <main+0x22c>)
1a000dfe:	f002 fa07 	bl	1a003210 <printf>
		   printf( "Buffer :   %c,  %c,  %c,  %c    \r\n \r\n \r\n", buffer[0], buffer[1],buffer[2],buffer[3]);
1a000e02:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
1a000e06:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
1a000e0a:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
1a000e0e:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
1a000e12:	9000      	str	r0, [sp, #0]
1a000e14:	480f      	ldr	r0, [pc, #60]	; (1a000e54 <main+0x230>)
1a000e16:	f002 f9fb 	bl	1a003210 <printf>
1a000e1a:	e7b1      	b.n	1a000d80 <main+0x15c>
1a000e1c:	1a008048 	.word	0x1a008048
1a000e20:	1a00805c 	.word	0x1a00805c
1a000e24:	400f4000 	.word	0x400f4000
1a000e28:	1a007fac 	.word	0x1a007fac
1a000e2c:	1a008080 	.word	0x1a008080
1a000e30:	1a00809c 	.word	0x1a00809c
1a000e34:	1a0080c8 	.word	0x1a0080c8
1a000e38:	1a0080ec 	.word	0x1a0080ec
1a000e3c:	1a008110 	.word	0x1a008110
1a000e40:	1a0081bc 	.word	0x1a0081bc
1a000e44:	1a008134 	.word	0x1a008134
1a000e48:	1a00814c 	.word	0x1a00814c
1a000e4c:	1a008168 	.word	0x1a008168
1a000e50:	1a008174 	.word	0x1a008174
1a000e54:	1a008190 	.word	0x1a008190

1a000e58 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a000e58:	4b04      	ldr	r3, [pc, #16]	; (1a000e6c <cyclesCounterInit+0x14>)
1a000e5a:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a000e5c:	4b04      	ldr	r3, [pc, #16]	; (1a000e70 <cyclesCounterInit+0x18>)
1a000e5e:	681a      	ldr	r2, [r3, #0]
1a000e60:	6813      	ldr	r3, [r2, #0]
1a000e62:	f043 0301 	orr.w	r3, r3, #1
1a000e66:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a000e68:	2001      	movs	r0, #1
1a000e6a:	4770      	bx	lr
1a000e6c:	10000004 	.word	0x10000004
1a000e70:	10000008 	.word	0x10000008

1a000e74 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a000e74:	2301      	movs	r3, #1
1a000e76:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a000e7a:	4b01      	ldr	r3, [pc, #4]	; (1a000e80 <clearInterrupt+0xc>)
1a000e7c:	6258      	str	r0, [r3, #36]	; 0x24
}
1a000e7e:	4770      	bx	lr
1a000e80:	40087000 	.word	0x40087000

1a000e84 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a000e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a000e86:	4b12      	ldr	r3, [pc, #72]	; (1a000ed0 <serveInterrupt+0x4c>)
1a000e88:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a000e8a:	4b12      	ldr	r3, [pc, #72]	; (1a000ed4 <serveInterrupt+0x50>)
1a000e8c:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a000e8e:	2301      	movs	r3, #1
1a000e90:	4083      	lsls	r3, r0
1a000e92:	420b      	tst	r3, r1
1a000e94:	d111      	bne.n	1a000eba <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a000e96:	4910      	ldr	r1, [pc, #64]	; (1a000ed8 <serveInterrupt+0x54>)
1a000e98:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a000e9a:	4d10      	ldr	r5, [pc, #64]	; (1a000edc <serveInterrupt+0x58>)
1a000e9c:	0051      	lsls	r1, r2, #1
1a000e9e:	188f      	adds	r7, r1, r2
1a000ea0:	00fc      	lsls	r4, r7, #3
1a000ea2:	4627      	mov	r7, r4
1a000ea4:	442c      	add	r4, r5
1a000ea6:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a000ea8:	6864      	ldr	r4, [r4, #4]
1a000eaa:	1b36      	subs	r6, r6, r4
1a000eac:	443d      	add	r5, r7
1a000eae:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a000eb0:	4a08      	ldr	r2, [pc, #32]	; (1a000ed4 <serveInterrupt+0x50>)
1a000eb2:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a000eb4:	f7ff ffde 	bl	1a000e74 <clearInterrupt>
}
1a000eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000eba:	4907      	ldr	r1, [pc, #28]	; (1a000ed8 <serveInterrupt+0x54>)
1a000ebc:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a000ebe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a000ec2:	00d1      	lsls	r1, r2, #3
1a000ec4:	4a05      	ldr	r2, [pc, #20]	; (1a000edc <serveInterrupt+0x58>)
1a000ec6:	440a      	add	r2, r1
1a000ec8:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a000eca:	4a02      	ldr	r2, [pc, #8]	; (1a000ed4 <serveInterrupt+0x50>)
1a000ecc:	61d3      	str	r3, [r2, #28]
1a000ece:	e7f1      	b.n	1a000eb4 <serveInterrupt+0x30>
1a000ed0:	1a0081d0 	.word	0x1a0081d0
1a000ed4:	40087000 	.word	0x40087000
1a000ed8:	40084000 	.word	0x40084000
1a000edc:	1000000c 	.word	0x1000000c

1a000ee0 <GPIO2_IRQHandler>:
//   serveInterrupt(1);
//}
// comentado para proyecto de materia Freertos

void GPIO2_IRQHandler(void)
{
1a000ee0:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a000ee2:	2002      	movs	r0, #2
1a000ee4:	f7ff ffce 	bl	1a000e84 <serveInterrupt>
}
1a000ee8:	bd08      	pop	{r3, pc}
1a000eea:	Address 0x000000001a000eea is out of bounds.


1a000eec <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a000eec:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a000eee:	4d0b      	ldr	r5, [pc, #44]	; (1a000f1c <gpioObtainPinInit+0x30>)
1a000ef0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a000ef4:	182c      	adds	r4, r5, r0
1a000ef6:	5628      	ldrsb	r0, [r5, r0]
1a000ef8:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a000efa:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a000efe:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a000f00:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a000f04:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a000f06:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a000f0a:	9b02      	ldr	r3, [sp, #8]
1a000f0c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a000f0e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a000f12:	9b03      	ldr	r3, [sp, #12]
1a000f14:	701a      	strb	r2, [r3, #0]
}
1a000f16:	bc30      	pop	{r4, r5}
1a000f18:	4770      	bx	lr
1a000f1a:	bf00      	nop
1a000f1c:	1a0081d4 	.word	0x1a0081d4

1a000f20 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a000f20:	b570      	push	{r4, r5, r6, lr}
1a000f22:	b084      	sub	sp, #16
1a000f24:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a000f26:	2300      	movs	r3, #0
1a000f28:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a000f2c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a000f30:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a000f34:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000f38:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a000f3c:	f10d 030b 	add.w	r3, sp, #11
1a000f40:	9301      	str	r3, [sp, #4]
1a000f42:	ab03      	add	r3, sp, #12
1a000f44:	9300      	str	r3, [sp, #0]
1a000f46:	f10d 030d 	add.w	r3, sp, #13
1a000f4a:	f10d 020e 	add.w	r2, sp, #14
1a000f4e:	f10d 010f 	add.w	r1, sp, #15
1a000f52:	f7ff ffcb 	bl	1a000eec <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a000f56:	2c05      	cmp	r4, #5
1a000f58:	f200 80a5 	bhi.w	1a0010a6 <gpioInit+0x186>
1a000f5c:	e8df f004 	tbb	[pc, r4]
1a000f60:	45278109 	.word	0x45278109
1a000f64:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a000f66:	4851      	ldr	r0, [pc, #324]	; (1a0010ac <gpioInit+0x18c>)
1a000f68:	f001 f96e 	bl	1a002248 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a000f6c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a000f6e:	b004      	add	sp, #16
1a000f70:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a000f72:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000f76:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000f7a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000f7e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a000f82:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000f86:	494a      	ldr	r1, [pc, #296]	; (1a0010b0 <gpioInit+0x190>)
1a000f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000f8c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000f90:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000f94:	2001      	movs	r0, #1
1a000f96:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a000f9a:	4c44      	ldr	r4, [pc, #272]	; (1a0010ac <gpioInit+0x18c>)
1a000f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000fa0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a000fa4:	ea22 0201 	bic.w	r2, r2, r1
1a000fa8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a000fac:	e7df      	b.n	1a000f6e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a000fae:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000fb2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000fb6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a000fba:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a000fbe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000fc2:	493b      	ldr	r1, [pc, #236]	; (1a0010b0 <gpioInit+0x190>)
1a000fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a000fc8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000fcc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000fd0:	2001      	movs	r0, #1
1a000fd2:	fa00 f102 	lsl.w	r1, r0, r2
1a000fd6:	4c35      	ldr	r4, [pc, #212]	; (1a0010ac <gpioInit+0x18c>)
1a000fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000fdc:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a000fe0:	ea22 0201 	bic.w	r2, r2, r1
1a000fe4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a000fe8:	e7c1      	b.n	1a000f6e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a000fea:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000fee:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000ff2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a000ff6:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a000ffa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000ffe:	492c      	ldr	r1, [pc, #176]	; (1a0010b0 <gpioInit+0x190>)
1a001000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001004:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001008:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00100c:	2001      	movs	r0, #1
1a00100e:	fa00 f102 	lsl.w	r1, r0, r2
1a001012:	4c26      	ldr	r4, [pc, #152]	; (1a0010ac <gpioInit+0x18c>)
1a001014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001018:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00101c:	ea22 0201 	bic.w	r2, r2, r1
1a001020:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001024:	e7a3      	b.n	1a000f6e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001026:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00102a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00102e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001032:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001036:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00103a:	491d      	ldr	r1, [pc, #116]	; (1a0010b0 <gpioInit+0x190>)
1a00103c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001040:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001044:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001048:	2001      	movs	r0, #1
1a00104a:	fa00 f102 	lsl.w	r1, r0, r2
1a00104e:	4c17      	ldr	r4, [pc, #92]	; (1a0010ac <gpioInit+0x18c>)
1a001050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001054:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001058:	ea22 0201 	bic.w	r2, r2, r1
1a00105c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001060:	e785      	b.n	1a000f6e <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001062:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001066:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00106a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00106e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001072:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001076:	490e      	ldr	r1, [pc, #56]	; (1a0010b0 <gpioInit+0x190>)
1a001078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a00107c:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001080:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001084:	2001      	movs	r0, #1
1a001086:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a00108a:	4b08      	ldr	r3, [pc, #32]	; (1a0010ac <gpioInit+0x18c>)
1a00108c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001090:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001094:	4331      	orrs	r1, r6
1a001096:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00109a:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a00109c:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0010a0:	2100      	movs	r1, #0
1a0010a2:	5499      	strb	r1, [r3, r2]
1a0010a4:	e763      	b.n	1a000f6e <gpioInit+0x4e>
      ret_val = 0;
1a0010a6:	2000      	movs	r0, #0
1a0010a8:	e761      	b.n	1a000f6e <gpioInit+0x4e>
1a0010aa:	bf00      	nop
1a0010ac:	400f4000 	.word	0x400f4000
1a0010b0:	40086000 	.word	0x40086000

1a0010b4 <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a0010b4:	4b01      	ldr	r3, [pc, #4]	; (1a0010bc <tickRead+0x8>)
1a0010b6:	e9d3 0100 	ldrd	r0, r1, [r3]
1a0010ba:	4770      	bx	lr
1a0010bc:	10000ae8 	.word	0x10000ae8

1a0010c0 <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a0010c0:	b918      	cbnz	r0, 1a0010ca <tickPowerSet+0xa>
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a0010c2:	4b04      	ldr	r3, [pc, #16]	; (1a0010d4 <tickPowerSet+0x14>)
1a0010c4:	2200      	movs	r2, #0
1a0010c6:	601a      	str	r2, [r3, #0]
   }
}
1a0010c8:	4770      	bx	lr
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0010ca:	4b02      	ldr	r3, [pc, #8]	; (1a0010d4 <tickPowerSet+0x14>)
1a0010cc:	2207      	movs	r2, #7
1a0010ce:	601a      	str	r2, [r3, #0]
1a0010d0:	4770      	bx	lr
1a0010d2:	bf00      	nop
1a0010d4:	e000e010 	.word	0xe000e010

1a0010d8 <tickInit>:
{
1a0010d8:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a0010da:	ea50 0301 	orrs.w	r3, r0, r1
1a0010de:	d02a      	beq.n	1a001136 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0010e0:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a0010e4:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a0010e8:	2b00      	cmp	r3, #0
1a0010ea:	bf08      	it	eq
1a0010ec:	2a32      	cmpeq	r2, #50	; 0x32
1a0010ee:	d227      	bcs.n	1a001140 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a0010f0:	4b14      	ldr	r3, [pc, #80]	; (1a001144 <tickInit+0x6c>)
1a0010f2:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a0010f6:	4b14      	ldr	r3, [pc, #80]	; (1a001148 <tickInit+0x70>)
1a0010f8:	681b      	ldr	r3, [r3, #0]
1a0010fa:	fba3 4500 	umull	r4, r5, r3, r0
1a0010fe:	fb03 5501 	mla	r5, r3, r1, r5
1a001102:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001106:	2300      	movs	r3, #0
1a001108:	4620      	mov	r0, r4
1a00110a:	4629      	mov	r1, r5
1a00110c:	f001 fbe6 	bl	1a0028dc <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a001110:	3801      	subs	r0, #1
1a001112:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001116:	d209      	bcs.n	1a00112c <tickInit+0x54>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a001118:	4b0c      	ldr	r3, [pc, #48]	; (1a00114c <tickInit+0x74>)
1a00111a:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a00111c:	4a0c      	ldr	r2, [pc, #48]	; (1a001150 <tickInit+0x78>)
1a00111e:	21e0      	movs	r1, #224	; 0xe0
1a001120:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a001124:	2200      	movs	r2, #0
1a001126:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001128:	2207      	movs	r2, #7
1a00112a:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a00112c:	2001      	movs	r0, #1
1a00112e:	f7ff ffc7 	bl	1a0010c0 <tickPowerSet>
      bool_t ret_val = 1;
1a001132:	2001      	movs	r0, #1
}
1a001134:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a001136:	2000      	movs	r0, #0
1a001138:	f7ff ffc2 	bl	1a0010c0 <tickPowerSet>
         ret_val = 0;
1a00113c:	2000      	movs	r0, #0
1a00113e:	e7f9      	b.n	1a001134 <tickInit+0x5c>
            ret_val = 0;
1a001140:	2000      	movs	r0, #0
1a001142:	e7f7      	b.n	1a001134 <tickInit+0x5c>
1a001144:	10000af0 	.word	0x10000af0
1a001148:	10000af8 	.word	0x10000af8
1a00114c:	e000e010 	.word	0xe000e010
1a001150:	e000ed00 	.word	0xe000ed00

1a001154 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001154:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a001158:	4909      	ldr	r1, [pc, #36]	; (1a001180 <SysTick_Handler+0x2c>)
1a00115a:	e9d1 bc00 	ldrd	fp, ip, [r1]
1a00115e:	f11b 0201 	adds.w	r2, fp, #1
1a001162:	f14c 0300 	adc.w	r3, ip, #0
1a001166:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a00116a:	4b06      	ldr	r3, [pc, #24]	; (1a001184 <SysTick_Handler+0x30>)
1a00116c:	681b      	ldr	r3, [r3, #0]
1a00116e:	b123      	cbz	r3, 1a00117a <SysTick_Handler+0x26>
      (* tickHookFunction )( callBackFuncParams );
1a001170:	4b04      	ldr	r3, [pc, #16]	; (1a001184 <SysTick_Handler+0x30>)
1a001172:	681b      	ldr	r3, [r3, #0]
1a001174:	4a04      	ldr	r2, [pc, #16]	; (1a001188 <SysTick_Handler+0x34>)
1a001176:	6810      	ldr	r0, [r2, #0]
1a001178:	4798      	blx	r3
   }
}
1a00117a:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a00117e:	bf00      	nop
1a001180:	10000ae8 	.word	0x10000ae8
1a001184:	10000a88 	.word	0x10000a88
1a001188:	10000a84 	.word	0x10000a84

1a00118c <uartProcessIRQ>:
{
1a00118c:	b570      	push	{r4, r5, r6, lr}
1a00118e:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a001190:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a001194:	0093      	lsls	r3, r2, #2
1a001196:	4a25      	ldr	r2, [pc, #148]	; (1a00122c <uartProcessIRQ+0xa0>)
1a001198:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00119a:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a00119c:	b2ed      	uxtb	r5, r5
1a00119e:	f015 0f01 	tst.w	r5, #1
1a0011a2:	d00b      	beq.n	1a0011bc <uartProcessIRQ+0x30>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a0011a4:	b930      	cbnz	r0, 1a0011b4 <uartProcessIRQ+0x28>
1a0011a6:	4b22      	ldr	r3, [pc, #136]	; (1a001230 <uartProcessIRQ+0xa4>)
1a0011a8:	681b      	ldr	r3, [r3, #0]
1a0011aa:	b11b      	cbz	r3, 1a0011b4 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a0011ac:	4b20      	ldr	r3, [pc, #128]	; (1a001230 <uartProcessIRQ+0xa4>)
1a0011ae:	681b      	ldr	r3, [r3, #0]
1a0011b0:	2000      	movs	r0, #0
1a0011b2:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0011b4:	2c03      	cmp	r4, #3
1a0011b6:	d015      	beq.n	1a0011e4 <uartProcessIRQ+0x58>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0011b8:	2c05      	cmp	r4, #5
1a0011ba:	d01c      	beq.n	1a0011f6 <uartProcessIRQ+0x6a>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a0011bc:	f015 0f20 	tst.w	r5, #32
1a0011c0:	d00f      	beq.n	1a0011e2 <uartProcessIRQ+0x56>
	return pUART->IER;
1a0011c2:	6873      	ldr	r3, [r6, #4]
1a0011c4:	f013 0f02 	tst.w	r3, #2
1a0011c8:	d00b      	beq.n	1a0011e2 <uartProcessIRQ+0x56>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a0011ca:	b934      	cbnz	r4, 1a0011da <uartProcessIRQ+0x4e>
1a0011cc:	4b19      	ldr	r3, [pc, #100]	; (1a001234 <uartProcessIRQ+0xa8>)
1a0011ce:	681b      	ldr	r3, [r3, #0]
1a0011d0:	b11b      	cbz	r3, 1a0011da <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART0)(0);
1a0011d2:	4b18      	ldr	r3, [pc, #96]	; (1a001234 <uartProcessIRQ+0xa8>)
1a0011d4:	681b      	ldr	r3, [r3, #0]
1a0011d6:	2000      	movs	r0, #0
1a0011d8:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0011da:	2c03      	cmp	r4, #3
1a0011dc:	d014      	beq.n	1a001208 <uartProcessIRQ+0x7c>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0011de:	2c05      	cmp	r4, #5
1a0011e0:	d01b      	beq.n	1a00121a <uartProcessIRQ+0x8e>
}
1a0011e2:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0011e4:	4b14      	ldr	r3, [pc, #80]	; (1a001238 <uartProcessIRQ+0xac>)
1a0011e6:	681b      	ldr	r3, [r3, #0]
1a0011e8:	2b00      	cmp	r3, #0
1a0011ea:	d0e5      	beq.n	1a0011b8 <uartProcessIRQ+0x2c>
         (*rxIsrCallbackUART2)(0);
1a0011ec:	4b12      	ldr	r3, [pc, #72]	; (1a001238 <uartProcessIRQ+0xac>)
1a0011ee:	681b      	ldr	r3, [r3, #0]
1a0011f0:	2000      	movs	r0, #0
1a0011f2:	4798      	blx	r3
1a0011f4:	e7e0      	b.n	1a0011b8 <uartProcessIRQ+0x2c>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0011f6:	4b11      	ldr	r3, [pc, #68]	; (1a00123c <uartProcessIRQ+0xb0>)
1a0011f8:	681b      	ldr	r3, [r3, #0]
1a0011fa:	2b00      	cmp	r3, #0
1a0011fc:	d0de      	beq.n	1a0011bc <uartProcessIRQ+0x30>
         (*rxIsrCallbackUART3)(0);
1a0011fe:	4b0f      	ldr	r3, [pc, #60]	; (1a00123c <uartProcessIRQ+0xb0>)
1a001200:	681b      	ldr	r3, [r3, #0]
1a001202:	2000      	movs	r0, #0
1a001204:	4798      	blx	r3
1a001206:	e7d9      	b.n	1a0011bc <uartProcessIRQ+0x30>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a001208:	4b0d      	ldr	r3, [pc, #52]	; (1a001240 <uartProcessIRQ+0xb4>)
1a00120a:	681b      	ldr	r3, [r3, #0]
1a00120c:	2b00      	cmp	r3, #0
1a00120e:	d0e6      	beq.n	1a0011de <uartProcessIRQ+0x52>
         (*txIsrCallbackUART2)(0);
1a001210:	4b0b      	ldr	r3, [pc, #44]	; (1a001240 <uartProcessIRQ+0xb4>)
1a001212:	681b      	ldr	r3, [r3, #0]
1a001214:	2000      	movs	r0, #0
1a001216:	4798      	blx	r3
1a001218:	e7e1      	b.n	1a0011de <uartProcessIRQ+0x52>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a00121a:	4b0a      	ldr	r3, [pc, #40]	; (1a001244 <uartProcessIRQ+0xb8>)
1a00121c:	681b      	ldr	r3, [r3, #0]
1a00121e:	2b00      	cmp	r3, #0
1a001220:	d0df      	beq.n	1a0011e2 <uartProcessIRQ+0x56>
         (*txIsrCallbackUART3)(0);
1a001222:	4b08      	ldr	r3, [pc, #32]	; (1a001244 <uartProcessIRQ+0xb8>)
1a001224:	681b      	ldr	r3, [r3, #0]
1a001226:	2000      	movs	r0, #0
1a001228:	4798      	blx	r3
}
1a00122a:	e7da      	b.n	1a0011e2 <uartProcessIRQ+0x56>
1a00122c:	1a00830c 	.word	0x1a00830c
1a001230:	10000a8c 	.word	0x10000a8c
1a001234:	10000a98 	.word	0x10000a98
1a001238:	10000a90 	.word	0x10000a90
1a00123c:	10000a94 	.word	0x10000a94
1a001240:	10000a9c 	.word	0x10000a9c
1a001244:	10000aa0 	.word	0x10000aa0

1a001248 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a001248:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a00124a:	2003      	movs	r0, #3
1a00124c:	f7ff ff9e 	bl	1a00118c <uartProcessIRQ>
}
1a001250:	bd08      	pop	{r3, pc}

1a001252 <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a001252:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a001254:	2005      	movs	r0, #5
1a001256:	f7ff ff99 	bl	1a00118c <uartProcessIRQ>
}
1a00125a:	bd08      	pop	{r3, pc}

1a00125c <spiInit>:
bool_t spiInit( spiMap_t spi )
{

   bool_t retVal = TRUE;

   if( spi == SPI0 ) {
1a00125c:	b108      	cbz	r0, 1a001262 <spiInit+0x6>
      // Initialize SSP Peripheral
      Chip_SSP_Init( LPC_SSP1 );
      Chip_SSP_Enable( LPC_SSP1 );

   } else {
      retVal = FALSE;
1a00125e:	2000      	movs	r0, #0
   }

   return retVal;
}
1a001260:	4770      	bx	lr
{
1a001262:	b510      	push	{r4, lr}
1a001264:	4b0e      	ldr	r3, [pc, #56]	; (1a0012a0 <spiInit+0x44>)
1a001266:	2200      	movs	r2, #0
1a001268:	f8c3 2790 	str.w	r2, [r3, #1936]	; 0x790
1a00126c:	21c5      	movs	r1, #197	; 0xc5
1a00126e:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
1a001272:	2105      	movs	r1, #5
1a001274:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
1a001278:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	pGPIO->DIR[port] |= 1UL << pin;
1a00127c:	4909      	ldr	r1, [pc, #36]	; (1a0012a4 <spiInit+0x48>)
1a00127e:	f242 020c 	movw	r2, #8204	; 0x200c
1a001282:	588b      	ldr	r3, [r1, r2]
1a001284:	f043 0301 	orr.w	r3, r3, #1
1a001288:	508b      	str	r3, [r1, r2]
      Chip_SSP_Init( LPC_SSP1 );
1a00128a:	4c07      	ldr	r4, [pc, #28]	; (1a0012a8 <spiInit+0x4c>)
1a00128c:	4620      	mov	r0, r4
1a00128e:	f001 f909 	bl	1a0024a4 <Chip_SSP_Init>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a001292:	6863      	ldr	r3, [r4, #4]
1a001294:	f043 0302 	orr.w	r3, r3, #2
1a001298:	6063      	str	r3, [r4, #4]
   bool_t retVal = TRUE;
1a00129a:	2001      	movs	r0, #1
}
1a00129c:	bd10      	pop	{r4, pc}
1a00129e:	bf00      	nop
1a0012a0:	40086000 	.word	0x40086000
1a0012a4:	400f4000 	.word	0x400f4000
1a0012a8:	400c5000 	.word	0x400c5000

1a0012ac <spiRead>:


bool_t spiRead( spiMap_t spi, uint8_t* buffer, uint32_t bufferSize )
{
1a0012ac:	b500      	push	{lr}
1a0012ae:	b087      	sub	sp, #28

   bool_t retVal = TRUE;

   Chip_SSP_DATA_SETUP_T xferConfig;

   xferConfig.tx_data = NULL;
1a0012b0:	2300      	movs	r3, #0
1a0012b2:	9301      	str	r3, [sp, #4]
   xferConfig.tx_cnt  = 0;
1a0012b4:	9302      	str	r3, [sp, #8]
   xferConfig.rx_data = buffer;
1a0012b6:	9103      	str	r1, [sp, #12]
   xferConfig.rx_cnt  = 0;
1a0012b8:	9304      	str	r3, [sp, #16]
   xferConfig.length  = bufferSize;
1a0012ba:	9205      	str	r2, [sp, #20]

   if( spi == SPI0 ) {
1a0012bc:	b118      	cbz	r0, 1a0012c6 <spiRead+0x1a>
      Chip_SSP_RWFrames_Blocking( LPC_SSP1, &xferConfig );
   } else {
      retVal = FALSE;
1a0012be:	2000      	movs	r0, #0
   }

   return retVal;
}
1a0012c0:	b007      	add	sp, #28
1a0012c2:	f85d fb04 	ldr.w	pc, [sp], #4
      Chip_SSP_RWFrames_Blocking( LPC_SSP1, &xferConfig );
1a0012c6:	a901      	add	r1, sp, #4
1a0012c8:	4802      	ldr	r0, [pc, #8]	; (1a0012d4 <spiRead+0x28>)
1a0012ca:	f001 f876 	bl	1a0023ba <Chip_SSP_RWFrames_Blocking>
   bool_t retVal = TRUE;
1a0012ce:	2001      	movs	r0, #1
1a0012d0:	e7f6      	b.n	1a0012c0 <spiRead+0x14>
1a0012d2:	bf00      	nop
1a0012d4:	400c5000 	.word	0x400c5000

1a0012d8 <spiWrite>:


bool_t spiWrite( spiMap_t spi, uint8_t* buffer, uint32_t bufferSize)
{
1a0012d8:	b500      	push	{lr}
1a0012da:	b087      	sub	sp, #28

   bool_t retVal = TRUE;

   Chip_SSP_DATA_SETUP_T xferConfig;

   xferConfig.tx_data = buffer;
1a0012dc:	9101      	str	r1, [sp, #4]
   xferConfig.tx_cnt  = 0;
1a0012de:	2300      	movs	r3, #0
1a0012e0:	9302      	str	r3, [sp, #8]
   xferConfig.rx_data = NULL;
1a0012e2:	9303      	str	r3, [sp, #12]
   xferConfig.rx_cnt  = 0;
1a0012e4:	9304      	str	r3, [sp, #16]
   xferConfig.length  = bufferSize;
1a0012e6:	9205      	str	r2, [sp, #20]

   if( spi == SPI0 ) {
1a0012e8:	b118      	cbz	r0, 1a0012f2 <spiWrite+0x1a>
      Chip_SSP_RWFrames_Blocking( LPC_SSP1, &xferConfig );
   } else {
      retVal = FALSE;
1a0012ea:	2000      	movs	r0, #0
   }

   return retVal;
}
1a0012ec:	b007      	add	sp, #28
1a0012ee:	f85d fb04 	ldr.w	pc, [sp], #4
      Chip_SSP_RWFrames_Blocking( LPC_SSP1, &xferConfig );
1a0012f2:	a901      	add	r1, sp, #4
1a0012f4:	4802      	ldr	r0, [pc, #8]	; (1a001300 <spiWrite+0x28>)
1a0012f6:	f001 f860 	bl	1a0023ba <Chip_SSP_RWFrames_Blocking>
   bool_t retVal = TRUE;
1a0012fa:	2001      	movs	r0, #1
1a0012fc:	e7f6      	b.n	1a0012ec <spiWrite+0x14>
1a0012fe:	bf00      	nop
1a001300:	400c5000 	.word	0x400c5000

1a001304 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a001304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001308:	4680      	mov	r8, r0
1a00130a:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a00130c:	f7ff fed2 	bl	1a0010b4 <tickRead>
1a001310:	4606      	mov	r6, r0
1a001312:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a001314:	f7ff fece 	bl	1a0010b4 <tickRead>
1a001318:	1b84      	subs	r4, r0, r6
1a00131a:	eb61 0507 	sbc.w	r5, r1, r7
1a00131e:	4b06      	ldr	r3, [pc, #24]	; (1a001338 <delay+0x34>)
1a001320:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001324:	4640      	mov	r0, r8
1a001326:	4649      	mov	r1, r9
1a001328:	f001 fad8 	bl	1a0028dc <__aeabi_uldivmod>
1a00132c:	428d      	cmp	r5, r1
1a00132e:	bf08      	it	eq
1a001330:	4284      	cmpeq	r4, r0
1a001332:	d3ef      	bcc.n	1a001314 <delay+0x10>
}
1a001334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001338:	10000af0 	.word	0x10000af0

1a00133c <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a00133c:	b510      	push	{r4, lr}
1a00133e:	4604      	mov	r4, r0
1a001340:	4610      	mov	r0, r2
1a001342:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a001344:	4b04      	ldr	r3, [pc, #16]	; (1a001358 <delayInit+0x1c>)
1a001346:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00134a:	f001 fac7 	bl	1a0028dc <__aeabi_uldivmod>
1a00134e:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a001352:	2300      	movs	r3, #0
1a001354:	7423      	strb	r3, [r4, #16]
}
1a001356:	bd10      	pop	{r4, pc}
1a001358:	10000af0 	.word	0x10000af0

1a00135c <errorOcurred>:

/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
1a00135c:	e7fe      	b.n	1a00135c <errorOcurred>

1a00135e <doNothing>:
   while(1);
}

static void doNothing( void* ptr )
{
}
1a00135e:	4770      	bx	lr

1a001360 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a001360:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001362:	2400      	movs	r4, #0
1a001364:	e001      	b.n	1a00136a <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001366:	3401      	adds	r4, #1
1a001368:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00136a:	2c03      	cmp	r4, #3
1a00136c:	d812      	bhi.n	1a001394 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a00136e:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001370:	4b09      	ldr	r3, [pc, #36]	; (1a001398 <TIMER0_IRQHandler+0x38>)
1a001372:	681a      	ldr	r2, [r3, #0]
1a001374:	f004 010f 	and.w	r1, r4, #15
1a001378:	2301      	movs	r3, #1
1a00137a:	408b      	lsls	r3, r1
1a00137c:	421a      	tst	r2, r3
1a00137e:	d0f2      	beq.n	1a001366 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001380:	4b06      	ldr	r3, [pc, #24]	; (1a00139c <TIMER0_IRQHandler+0x3c>)
1a001382:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a001386:	2000      	movs	r0, #0
1a001388:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00138a:	2301      	movs	r3, #1
1a00138c:	40ab      	lsls	r3, r5
1a00138e:	4a02      	ldr	r2, [pc, #8]	; (1a001398 <TIMER0_IRQHandler+0x38>)
1a001390:	6013      	str	r3, [r2, #0]
1a001392:	e7e8      	b.n	1a001366 <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a001394:	bd38      	pop	{r3, r4, r5, pc}
1a001396:	bf00      	nop
1a001398:	40084000 	.word	0x40084000
1a00139c:	10000054 	.word	0x10000054

1a0013a0 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a0013a0:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0013a2:	2400      	movs	r4, #0
1a0013a4:	e001      	b.n	1a0013aa <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0013a6:	3401      	adds	r4, #1
1a0013a8:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0013aa:	2c03      	cmp	r4, #3
1a0013ac:	d813      	bhi.n	1a0013d6 <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a0013ae:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0013b0:	4b09      	ldr	r3, [pc, #36]	; (1a0013d8 <TIMER1_IRQHandler+0x38>)
1a0013b2:	681a      	ldr	r2, [r3, #0]
1a0013b4:	f004 010f 	and.w	r1, r4, #15
1a0013b8:	2301      	movs	r3, #1
1a0013ba:	408b      	lsls	r3, r1
1a0013bc:	421a      	tst	r2, r3
1a0013be:	d0f2      	beq.n	1a0013a6 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0013c0:	1d23      	adds	r3, r4, #4
1a0013c2:	4a06      	ldr	r2, [pc, #24]	; (1a0013dc <TIMER1_IRQHandler+0x3c>)
1a0013c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0013c8:	2000      	movs	r0, #0
1a0013ca:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0013cc:	2301      	movs	r3, #1
1a0013ce:	40ab      	lsls	r3, r5
1a0013d0:	4a01      	ldr	r2, [pc, #4]	; (1a0013d8 <TIMER1_IRQHandler+0x38>)
1a0013d2:	6013      	str	r3, [r2, #0]
1a0013d4:	e7e7      	b.n	1a0013a6 <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a0013d6:	bd38      	pop	{r3, r4, r5, pc}
1a0013d8:	40085000 	.word	0x40085000
1a0013dc:	10000054 	.word	0x10000054

1a0013e0 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a0013e0:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0013e2:	2400      	movs	r4, #0
1a0013e4:	e001      	b.n	1a0013ea <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0013e6:	3401      	adds	r4, #1
1a0013e8:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0013ea:	2c03      	cmp	r4, #3
1a0013ec:	d814      	bhi.n	1a001418 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a0013ee:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0013f0:	4b0a      	ldr	r3, [pc, #40]	; (1a00141c <TIMER2_IRQHandler+0x3c>)
1a0013f2:	681a      	ldr	r2, [r3, #0]
1a0013f4:	f004 010f 	and.w	r1, r4, #15
1a0013f8:	2301      	movs	r3, #1
1a0013fa:	408b      	lsls	r3, r1
1a0013fc:	421a      	tst	r2, r3
1a0013fe:	d0f2      	beq.n	1a0013e6 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001400:	f104 0308 	add.w	r3, r4, #8
1a001404:	4a06      	ldr	r2, [pc, #24]	; (1a001420 <TIMER2_IRQHandler+0x40>)
1a001406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00140a:	2000      	movs	r0, #0
1a00140c:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00140e:	2301      	movs	r3, #1
1a001410:	40ab      	lsls	r3, r5
1a001412:	4a02      	ldr	r2, [pc, #8]	; (1a00141c <TIMER2_IRQHandler+0x3c>)
1a001414:	6013      	str	r3, [r2, #0]
1a001416:	e7e6      	b.n	1a0013e6 <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a001418:	bd38      	pop	{r3, r4, r5, pc}
1a00141a:	bf00      	nop
1a00141c:	400c3000 	.word	0x400c3000
1a001420:	10000054 	.word	0x10000054

1a001424 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a001424:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001426:	2400      	movs	r4, #0
1a001428:	e001      	b.n	1a00142e <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00142a:	3401      	adds	r4, #1
1a00142c:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00142e:	2c03      	cmp	r4, #3
1a001430:	d814      	bhi.n	1a00145c <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a001432:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001434:	4b0a      	ldr	r3, [pc, #40]	; (1a001460 <TIMER3_IRQHandler+0x3c>)
1a001436:	681a      	ldr	r2, [r3, #0]
1a001438:	f004 010f 	and.w	r1, r4, #15
1a00143c:	2301      	movs	r3, #1
1a00143e:	408b      	lsls	r3, r1
1a001440:	421a      	tst	r2, r3
1a001442:	d0f2      	beq.n	1a00142a <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001444:	f104 030c 	add.w	r3, r4, #12
1a001448:	4a06      	ldr	r2, [pc, #24]	; (1a001464 <TIMER3_IRQHandler+0x40>)
1a00144a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00144e:	2000      	movs	r0, #0
1a001450:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001452:	2301      	movs	r3, #1
1a001454:	40ab      	lsls	r3, r5
1a001456:	4a02      	ldr	r2, [pc, #8]	; (1a001460 <TIMER3_IRQHandler+0x3c>)
1a001458:	6013      	str	r3, [r2, #0]
1a00145a:	e7e6      	b.n	1a00142a <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a00145c:	bd38      	pop	{r3, r4, r5, pc}
1a00145e:	bf00      	nop
1a001460:	400c4000 	.word	0x400c4000
1a001464:	10000054 	.word	0x10000054

1a001468 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001468:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00146a:	f000 fb47 	bl	1a001afc <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00146e:	4b3a      	ldr	r3, [pc, #232]	; (1a001558 <boardInit+0xf0>)
1a001470:	6818      	ldr	r0, [r3, #0]
1a001472:	f7ff fcf1 	bl	1a000e58 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a001476:	2001      	movs	r0, #1
1a001478:	2100      	movs	r1, #0
1a00147a:	f7ff fe2d 	bl	1a0010d8 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a00147e:	2105      	movs	r1, #5
1a001480:	2000      	movs	r0, #0
1a001482:	f7ff fd4d 	bl	1a000f20 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a001486:	2100      	movs	r1, #0
1a001488:	2024      	movs	r0, #36	; 0x24
1a00148a:	f7ff fd49 	bl	1a000f20 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a00148e:	2100      	movs	r1, #0
1a001490:	2025      	movs	r0, #37	; 0x25
1a001492:	f7ff fd45 	bl	1a000f20 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a001496:	2100      	movs	r1, #0
1a001498:	2026      	movs	r0, #38	; 0x26
1a00149a:	f7ff fd41 	bl	1a000f20 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a00149e:	2100      	movs	r1, #0
1a0014a0:	2027      	movs	r0, #39	; 0x27
1a0014a2:	f7ff fd3d 	bl	1a000f20 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a0014a6:	2101      	movs	r1, #1
1a0014a8:	2028      	movs	r0, #40	; 0x28
1a0014aa:	f7ff fd39 	bl	1a000f20 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a0014ae:	2101      	movs	r1, #1
1a0014b0:	2029      	movs	r0, #41	; 0x29
1a0014b2:	f7ff fd35 	bl	1a000f20 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a0014b6:	2101      	movs	r1, #1
1a0014b8:	202a      	movs	r0, #42	; 0x2a
1a0014ba:	f7ff fd31 	bl	1a000f20 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a0014be:	2101      	movs	r1, #1
1a0014c0:	202b      	movs	r0, #43	; 0x2b
1a0014c2:	f7ff fd2d 	bl	1a000f20 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a0014c6:	2101      	movs	r1, #1
1a0014c8:	202c      	movs	r0, #44	; 0x2c
1a0014ca:	f7ff fd29 	bl	1a000f20 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a0014ce:	2101      	movs	r1, #1
1a0014d0:	202d      	movs	r0, #45	; 0x2d
1a0014d2:	f7ff fd25 	bl	1a000f20 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a0014d6:	2100      	movs	r1, #0
1a0014d8:	202e      	movs	r0, #46	; 0x2e
1a0014da:	f7ff fd21 	bl	1a000f20 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a0014de:	2100      	movs	r1, #0
1a0014e0:	202f      	movs	r0, #47	; 0x2f
1a0014e2:	f7ff fd1d 	bl	1a000f20 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a0014e6:	2100      	movs	r1, #0
1a0014e8:	2030      	movs	r0, #48	; 0x30
1a0014ea:	f7ff fd19 	bl	1a000f20 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a0014ee:	2100      	movs	r1, #0
1a0014f0:	2031      	movs	r0, #49	; 0x31
1a0014f2:	f7ff fd15 	bl	1a000f20 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a0014f6:	2100      	movs	r1, #0
1a0014f8:	2032      	movs	r0, #50	; 0x32
1a0014fa:	f7ff fd11 	bl	1a000f20 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a0014fe:	2100      	movs	r1, #0
1a001500:	2033      	movs	r0, #51	; 0x33
1a001502:	f7ff fd0d 	bl	1a000f20 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a001506:	2100      	movs	r1, #0
1a001508:	2034      	movs	r0, #52	; 0x34
1a00150a:	f7ff fd09 	bl	1a000f20 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a00150e:	2100      	movs	r1, #0
1a001510:	2035      	movs	r0, #53	; 0x35
1a001512:	f7ff fd05 	bl	1a000f20 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a001516:	2101      	movs	r1, #1
1a001518:	2036      	movs	r0, #54	; 0x36
1a00151a:	f7ff fd01 	bl	1a000f20 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a00151e:	2101      	movs	r1, #1
1a001520:	2037      	movs	r0, #55	; 0x37
1a001522:	f7ff fcfd 	bl	1a000f20 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a001526:	2101      	movs	r1, #1
1a001528:	2038      	movs	r0, #56	; 0x38
1a00152a:	f7ff fcf9 	bl	1a000f20 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a00152e:	2101      	movs	r1, #1
1a001530:	2039      	movs	r0, #57	; 0x39
1a001532:	f7ff fcf5 	bl	1a000f20 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a001536:	2101      	movs	r1, #1
1a001538:	203a      	movs	r0, #58	; 0x3a
1a00153a:	f7ff fcf1 	bl	1a000f20 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a00153e:	2101      	movs	r1, #1
1a001540:	203b      	movs	r0, #59	; 0x3b
1a001542:	f7ff fced 	bl	1a000f20 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a001546:	2101      	movs	r1, #1
1a001548:	203c      	movs	r0, #60	; 0x3c
1a00154a:	f7ff fce9 	bl	1a000f20 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a00154e:	2101      	movs	r1, #1
1a001550:	203d      	movs	r0, #61	; 0x3d
1a001552:	f7ff fce5 	bl	1a000f20 <gpioInit>

}
1a001556:	bd08      	pop	{r3, pc}
1a001558:	10000af8 	.word	0x10000af8

1a00155c <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00155c:	2200      	movs	r2, #0
1a00155e:	2a05      	cmp	r2, #5
1a001560:	d819      	bhi.n	1a001596 <Board_LED_Init+0x3a>
{
1a001562:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a001564:	490c      	ldr	r1, [pc, #48]	; (1a001598 <Board_LED_Init+0x3c>)
1a001566:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00156a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00156e:	784c      	ldrb	r4, [r1, #1]
1a001570:	4b0a      	ldr	r3, [pc, #40]	; (1a00159c <Board_LED_Init+0x40>)
1a001572:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a001576:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00157a:	2001      	movs	r0, #1
1a00157c:	40a0      	lsls	r0, r4
1a00157e:	4301      	orrs	r1, r0
1a001580:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a001584:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a001588:	2100      	movs	r1, #0
1a00158a:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00158c:	3201      	adds	r2, #1
1a00158e:	2a05      	cmp	r2, #5
1a001590:	d9e8      	bls.n	1a001564 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a001592:	bc70      	pop	{r4, r5, r6}
1a001594:	4770      	bx	lr
1a001596:	4770      	bx	lr
1a001598:	1a008360 	.word	0x1a008360
1a00159c:	400f4000 	.word	0x400f4000

1a0015a0 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0015a0:	2300      	movs	r3, #0
1a0015a2:	2b03      	cmp	r3, #3
1a0015a4:	d816      	bhi.n	1a0015d4 <Board_TEC_Init+0x34>
{
1a0015a6:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0015a8:	490b      	ldr	r1, [pc, #44]	; (1a0015d8 <Board_TEC_Init+0x38>)
1a0015aa:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0015ae:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0015b2:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0015b4:	4c09      	ldr	r4, [pc, #36]	; (1a0015dc <Board_TEC_Init+0x3c>)
1a0015b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0015ba:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0015be:	2001      	movs	r0, #1
1a0015c0:	40a8      	lsls	r0, r5
1a0015c2:	ea21 0100 	bic.w	r1, r1, r0
1a0015c6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0015ca:	3301      	adds	r3, #1
1a0015cc:	2b03      	cmp	r3, #3
1a0015ce:	d9eb      	bls.n	1a0015a8 <Board_TEC_Init+0x8>
    }
}
1a0015d0:	bc30      	pop	{r4, r5}
1a0015d2:	4770      	bx	lr
1a0015d4:	4770      	bx	lr
1a0015d6:	bf00      	nop
1a0015d8:	1a008358 	.word	0x1a008358
1a0015dc:	400f4000 	.word	0x400f4000

1a0015e0 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0015e0:	2300      	movs	r3, #0
1a0015e2:	2b08      	cmp	r3, #8
1a0015e4:	d816      	bhi.n	1a001614 <Board_GPIO_Init+0x34>
{
1a0015e6:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0015e8:	490b      	ldr	r1, [pc, #44]	; (1a001618 <Board_GPIO_Init+0x38>)
1a0015ea:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0015ee:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0015f2:	784d      	ldrb	r5, [r1, #1]
1a0015f4:	4c09      	ldr	r4, [pc, #36]	; (1a00161c <Board_GPIO_Init+0x3c>)
1a0015f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0015fa:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0015fe:	2001      	movs	r0, #1
1a001600:	40a8      	lsls	r0, r5
1a001602:	ea21 0100 	bic.w	r1, r1, r0
1a001606:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00160a:	3301      	adds	r3, #1
1a00160c:	2b08      	cmp	r3, #8
1a00160e:	d9eb      	bls.n	1a0015e8 <Board_GPIO_Init+0x8>
    }
}
1a001610:	bc30      	pop	{r4, r5}
1a001612:	4770      	bx	lr
1a001614:	4770      	bx	lr
1a001616:	bf00      	nop
1a001618:	1a00836c 	.word	0x1a00836c
1a00161c:	400f4000 	.word	0x400f4000

1a001620 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a001620:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a001622:	4c0b      	ldr	r4, [pc, #44]	; (1a001650 <Board_SPI_Init+0x30>)
1a001624:	4620      	mov	r0, r4
1a001626:	f000 ff3d 	bl	1a0024a4 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00162a:	6863      	ldr	r3, [r4, #4]
1a00162c:	f023 0304 	bic.w	r3, r3, #4
1a001630:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001632:	6823      	ldr	r3, [r4, #0]
1a001634:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001638:	f043 0307 	orr.w	r3, r3, #7
1a00163c:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00163e:	4905      	ldr	r1, [pc, #20]	; (1a001654 <Board_SPI_Init+0x34>)
1a001640:	4620      	mov	r0, r4
1a001642:	f000 ff0f 	bl	1a002464 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a001646:	6863      	ldr	r3, [r4, #4]
1a001648:	f043 0302 	orr.w	r3, r3, #2
1a00164c:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable(LPC_SSP1);
}
1a00164e:	bd10      	pop	{r4, pc}
1a001650:	400c5000 	.word	0x400c5000
1a001654:	000186a0 	.word	0x000186a0

1a001658 <Board_I2C_Init>:
{
1a001658:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a00165a:	2000      	movs	r0, #0
1a00165c:	f000 fe06 	bl	1a00226c <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a001660:	4b04      	ldr	r3, [pc, #16]	; (1a001674 <Board_I2C_Init+0x1c>)
1a001662:	f640 0208 	movw	r2, #2056	; 0x808
1a001666:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a00166a:	4903      	ldr	r1, [pc, #12]	; (1a001678 <Board_I2C_Init+0x20>)
1a00166c:	2000      	movs	r0, #0
1a00166e:	f000 fe0f 	bl	1a002290 <Chip_I2C_SetClockRate>
}
1a001672:	bd08      	pop	{r3, pc}
1a001674:	40086000 	.word	0x40086000
1a001678:	000f4240 	.word	0x000f4240

1a00167c <Board_ADC_Init>:


static void Board_ADC_Init()
{
1a00167c:	b510      	push	{r4, lr}
1a00167e:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a001680:	4c08      	ldr	r4, [pc, #32]	; (1a0016a4 <Board_ADC_Init+0x28>)
1a001682:	4669      	mov	r1, sp
1a001684:	4620      	mov	r0, r4
1a001686:	f000 f9f9 	bl	1a001a7c <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00168a:	4a07      	ldr	r2, [pc, #28]	; (1a0016a8 <Board_ADC_Init+0x2c>)
1a00168c:	4669      	mov	r1, sp
1a00168e:	4620      	mov	r0, r4
1a001690:	f000 fa14 	bl	1a001abc <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a001694:	2200      	movs	r2, #0
1a001696:	4669      	mov	r1, sp
1a001698:	4620      	mov	r0, r4
1a00169a:	f000 fa28 	bl	1a001aee <Chip_ADC_SetResolution>
}
1a00169e:	b002      	add	sp, #8
1a0016a0:	bd10      	pop	{r4, pc}
1a0016a2:	bf00      	nop
1a0016a4:	400e3000 	.word	0x400e3000
1a0016a8:	00061a80 	.word	0x00061a80

1a0016ac <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0016ac:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a0016ae:	4c07      	ldr	r4, [pc, #28]	; (1a0016cc <Board_Debug_Init+0x20>)
1a0016b0:	4620      	mov	r0, r4
1a0016b2:	f000 f921 	bl	1a0018f8 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0016b6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0016ba:	4620      	mov	r0, r4
1a0016bc:	f000 f946 	bl	1a00194c <Chip_UART_SetBaudFDR>
	pUART->LCR = config;
1a0016c0:	2303      	movs	r3, #3
1a0016c2:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0016c4:	2301      	movs	r3, #1
1a0016c6:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a0016c8:	bd10      	pop	{r4, pc}
1a0016ca:	bf00      	nop
1a0016cc:	400c1000 	.word	0x400c1000

1a0016d0 <Board_UARTPutChar>:
	return pUART->LSR;
1a0016d0:	4b03      	ldr	r3, [pc, #12]	; (1a0016e0 <Board_UARTPutChar+0x10>)
1a0016d2:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0016d4:	f013 0f20 	tst.w	r3, #32
1a0016d8:	d0fa      	beq.n	1a0016d0 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0016da:	4b01      	ldr	r3, [pc, #4]	; (1a0016e0 <Board_UARTPutChar+0x10>)
1a0016dc:	6018      	str	r0, [r3, #0]
    Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0016de:	4770      	bx	lr
1a0016e0:	400c1000 	.word	0x400c1000

1a0016e4 <Board_UARTGetChar>:
	return pUART->LSR;
1a0016e4:	4b05      	ldr	r3, [pc, #20]	; (1a0016fc <Board_UARTGetChar+0x18>)
1a0016e6:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
    if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0016e8:	f013 0f01 	tst.w	r3, #1
1a0016ec:	d003      	beq.n	1a0016f6 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0016ee:	4b03      	ldr	r3, [pc, #12]	; (1a0016fc <Board_UARTGetChar+0x18>)
1a0016f0:	6818      	ldr	r0, [r3, #0]
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a0016f2:	b2c0      	uxtb	r0, r0
1a0016f4:	4770      	bx	lr
    }
    return EOF;
1a0016f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0016fa:	4770      	bx	lr
1a0016fc:	400c1000 	.word	0x400c1000

1a001700 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a001700:	b508      	push	{r3, lr}
   DEBUGINIT();
1a001702:	f7ff ffd3 	bl	1a0016ac <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a001706:	480b      	ldr	r0, [pc, #44]	; (1a001734 <Board_Init+0x34>)
1a001708:	f000 fd9e 	bl	1a002248 <Chip_GPIO_Init>

   Board_LED_Init();
1a00170c:	f7ff ff26 	bl	1a00155c <Board_LED_Init>
   Board_TEC_Init();
1a001710:	f7ff ff46 	bl	1a0015a0 <Board_TEC_Init>
   Board_SPI_Init();
1a001714:	f7ff ff84 	bl	1a001620 <Board_SPI_Init>
   Board_GPIO_Init();
1a001718:	f7ff ff62 	bl	1a0015e0 <Board_GPIO_Init>
   Board_I2C_Init();
1a00171c:	f7ff ff9c 	bl	1a001658 <Board_I2C_Init>
   Board_ADC_Init();
1a001720:	f7ff ffac 	bl	1a00167c <Board_ADC_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a001724:	4a04      	ldr	r2, [pc, #16]	; (1a001738 <Board_Init+0x38>)
1a001726:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a00172a:	f043 0304 	orr.w	r3, r3, #4
1a00172e:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

   Chip_ENET_RMIIEnable(LPC_ETHERNET);
}
1a001732:	bd08      	pop	{r3, pc}
1a001734:	400f4000 	.word	0x400f4000
1a001738:	40043000 	.word	0x40043000

1a00173c <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a00173c:	2309      	movs	r3, #9
1a00173e:	6003      	str	r3, [r0, #0]
   return -1;
}
1a001740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001744:	4770      	bx	lr

1a001746 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a001746:	2358      	movs	r3, #88	; 0x58
1a001748:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00174a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00174e:	4770      	bx	lr

1a001750 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a001750:	2902      	cmp	r1, #2
1a001752:	d801      	bhi.n	1a001758 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a001754:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a001756:	4770      	bx	lr
       SET_ERR(EBADF);
1a001758:	2309      	movs	r3, #9
1a00175a:	6003      	str	r3, [r0, #0]
       return -1;
1a00175c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001760:	4770      	bx	lr

1a001762 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a001762:	2358      	movs	r3, #88	; 0x58
1a001764:	6003      	str	r3, [r0, #0]
   return -1;
}
1a001766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00176a:	4770      	bx	lr

1a00176c <_read_r>:
       SET_ERR(ENODEV);
       return -1;
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a00176c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t i = 0;
  char c = 0;
  switch (fd) {
1a00176e:	2902      	cmp	r1, #2
1a001770:	d81c      	bhi.n	1a0017ac <_read_r+0x40>
1a001772:	461d      	mov	r5, r3
1a001774:	4617      	mov	r7, r2
1a001776:	4606      	mov	r6, r0
  size_t i = 0;
1a001778:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a00177a:	42ac      	cmp	r4, r5
1a00177c:	d211      	bcs.n	1a0017a2 <_read_r+0x36>
         c = (char)Board_UARTGetChar();
1a00177e:	f7ff ffb1 	bl	1a0016e4 <Board_UARTGetChar>
1a001782:	b2c0      	uxtb	r0, r0
         if( c != 255 ){
1a001784:	28ff      	cmp	r0, #255	; 0xff
1a001786:	d0f8      	beq.n	1a00177a <_read_r+0xe>
            if( c != '\r' && c != '\n' ){
1a001788:	280d      	cmp	r0, #13
1a00178a:	d004      	beq.n	1a001796 <_read_r+0x2a>
1a00178c:	280a      	cmp	r0, #10
1a00178e:	d002      	beq.n	1a001796 <_read_r+0x2a>
               ((char*) b)[i] = c;
1a001790:	5538      	strb	r0, [r7, r4]
               i++;
1a001792:	3401      	adds	r4, #1
1a001794:	e7f1      	b.n	1a00177a <_read_r+0xe>
            }else{
               ((char*) b)[i] = c;
1a001796:	5538      	strb	r0, [r7, r4]
               i++;
1a001798:	3401      	adds	r4, #1
               c = (char)Board_UARTGetChar(); // read anotherone to prevent \r\n
1a00179a:	f7ff ffa3 	bl	1a0016e4 <Board_UARTGetChar>
               return i;
1a00179e:	4620      	mov	r0, r4
1a0017a0:	e003      	b.n	1a0017aa <_read_r+0x3e>
            }
         }
      }
      SET_ERR(ENODEV);
1a0017a2:	2313      	movs	r3, #19
1a0017a4:	6033      	str	r3, [r6, #0]
      return -1;
1a0017a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a0017aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_ERR(ENODEV);
1a0017ac:	2313      	movs	r3, #19
1a0017ae:	6003      	str	r3, [r0, #0]
      return -1;
1a0017b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0017b4:	e7f9      	b.n	1a0017aa <_read_r+0x3e>
1a0017b6:	Address 0x000000001a0017b6 is out of bounds.


1a0017b8 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a0017b8:	4b05      	ldr	r3, [pc, #20]	; (1a0017d0 <_sbrk_r+0x18>)
1a0017ba:	681b      	ldr	r3, [r3, #0]
1a0017bc:	b123      	cbz	r3, 1a0017c8 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0017be:	4b04      	ldr	r3, [pc, #16]	; (1a0017d0 <_sbrk_r+0x18>)
1a0017c0:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0017c2:	4401      	add	r1, r0
1a0017c4:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0017c6:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0017c8:	4b01      	ldr	r3, [pc, #4]	; (1a0017d0 <_sbrk_r+0x18>)
1a0017ca:	4a02      	ldr	r2, [pc, #8]	; (1a0017d4 <_sbrk_r+0x1c>)
1a0017cc:	601a      	str	r2, [r3, #0]
1a0017ce:	e7f6      	b.n	1a0017be <_sbrk_r+0x6>
1a0017d0:	10000aa4 	.word	0x10000aa4
1a0017d4:	10000b20 	.word	0x10000b20

1a0017d8 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a0017d8:	2902      	cmp	r1, #2
1a0017da:	d80c      	bhi.n	1a0017f6 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a0017dc:	b570      	push	{r4, r5, r6, lr}
1a0017de:	461d      	mov	r5, r3
1a0017e0:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a0017e2:	2400      	movs	r4, #0
1a0017e4:	e003      	b.n	1a0017ee <_write_r+0x16>
           Board_UARTPutChar(((char*) b)[i]);
1a0017e6:	5d30      	ldrb	r0, [r6, r4]
1a0017e8:	f7ff ff72 	bl	1a0016d0 <Board_UARTPutChar>
       for (i = 0; i < n; i++)
1a0017ec:	3401      	adds	r4, #1
1a0017ee:	42ac      	cmp	r4, r5
1a0017f0:	d3f9      	bcc.n	1a0017e6 <_write_r+0xe>
       return n;
1a0017f2:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0017f4:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0017f6:	2313      	movs	r3, #19
1a0017f8:	6003      	str	r3, [r0, #0]
       return -1;
1a0017fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a0017fe:	4770      	bx	lr

1a001800 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a001800:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a001802:	4a04      	ldr	r2, [pc, #16]	; (1a001814 <SystemInit+0x14>)
1a001804:	4b04      	ldr	r3, [pc, #16]	; (1a001818 <SystemInit+0x18>)
1a001806:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a001808:	f000 fcf4 	bl	1a0021f4 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a00180c:	f000 f858 	bl	1a0018c0 <Board_SystemInit>
}
1a001810:	bd08      	pop	{r3, pc}
1a001812:	bf00      	nop
1a001814:	1a000000 	.word	0x1a000000
1a001818:	e000ed08 	.word	0xe000ed08

1a00181c <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00181c:	2300      	movs	r3, #0
1a00181e:	2b25      	cmp	r3, #37	; 0x25
1a001820:	d812      	bhi.n	1a001848 <Board_SetupMuxing+0x2c>
    {0,  1, (SCU_MODE_HIGHSPEEDSLEW_EN | SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC6)}, /* TXEN */
};


void Board_SetupMuxing(void)
{
1a001822:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a001824:	4a09      	ldr	r2, [pc, #36]	; (1a00184c <Board_SetupMuxing+0x30>)
1a001826:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00182a:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a00182e:	784a      	ldrb	r2, [r1, #1]
1a001830:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001832:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a001836:	4906      	ldr	r1, [pc, #24]	; (1a001850 <Board_SetupMuxing+0x34>)
1a001838:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00183c:	3301      	adds	r3, #1
1a00183e:	2b25      	cmp	r3, #37	; 0x25
1a001840:	d9f0      	bls.n	1a001824 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a001842:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001846:	4770      	bx	lr
1a001848:	4770      	bx	lr
1a00184a:	bf00      	nop
1a00184c:	1a008390 	.word	0x1a008390
1a001850:	40086000 	.word	0x40086000

1a001854 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a001854:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a001856:	4a17      	ldr	r2, [pc, #92]	; (1a0018b4 <Board_SetupClocking+0x60>)
1a001858:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a00185c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001860:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001864:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a001868:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a00186c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001870:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001874:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a001878:	2201      	movs	r2, #1
1a00187a:	490f      	ldr	r1, [pc, #60]	; (1a0018b8 <Board_SetupClocking+0x64>)
1a00187c:	2006      	movs	r0, #6
1a00187e:	f000 fc0f 	bl	1a0020a0 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001882:	2400      	movs	r4, #0
1a001884:	e00a      	b.n	1a00189c <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a001886:	480d      	ldr	r0, [pc, #52]	; (1a0018bc <Board_SetupClocking+0x68>)
1a001888:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00188c:	78cb      	ldrb	r3, [r1, #3]
1a00188e:	788a      	ldrb	r2, [r1, #2]
1a001890:	7849      	ldrb	r1, [r1, #1]
1a001892:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001896:	f000 fb5f 	bl	1a001f58 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00189a:	3401      	adds	r4, #1
1a00189c:	2c02      	cmp	r4, #2
1a00189e:	d9f2      	bls.n	1a001886 <Board_SetupClocking+0x32>
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0018a0:	4b04      	ldr	r3, [pc, #16]	; (1a0018b4 <Board_SetupClocking+0x60>)
1a0018a2:	685a      	ldr	r2, [r3, #4]
1a0018a4:	f022 020c 	bic.w	r2, r2, #12
1a0018a8:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0018aa:	685a      	ldr	r2, [r3, #4]
1a0018ac:	f042 0203 	orr.w	r2, r2, #3
1a0018b0:	605a      	str	r2, [r3, #4]
}
1a0018b2:	bd10      	pop	{r4, pc}
1a0018b4:	40043000 	.word	0x40043000
1a0018b8:	0c28cb00 	.word	0x0c28cb00
1a0018bc:	1a008384 	.word	0x1a008384

1a0018c0 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0018c0:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0018c2:	f7ff ffab 	bl	1a00181c <Board_SetupMuxing>
    Board_SetupClocking();
1a0018c6:	f7ff ffc5 	bl	1a001854 <Board_SetupClocking>
}
1a0018ca:	bd08      	pop	{r3, pc}

1a0018cc <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0018cc:	4b09      	ldr	r3, [pc, #36]	; (1a0018f4 <Chip_UART_GetIndex+0x28>)
1a0018ce:	4298      	cmp	r0, r3
1a0018d0:	d009      	beq.n	1a0018e6 <Chip_UART_GetIndex+0x1a>
1a0018d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0018d6:	4298      	cmp	r0, r3
1a0018d8:	d007      	beq.n	1a0018ea <Chip_UART_GetIndex+0x1e>
1a0018da:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0018de:	4298      	cmp	r0, r3
1a0018e0:	d005      	beq.n	1a0018ee <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a0018e2:	2000      	movs	r0, #0
1a0018e4:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a0018e6:	2002      	movs	r0, #2
1a0018e8:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a0018ea:	2003      	movs	r0, #3
1a0018ec:	4770      	bx	lr
			return 1;
1a0018ee:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0018f0:	4770      	bx	lr
1a0018f2:	bf00      	nop
1a0018f4:	400c1000 	.word	0x400c1000

1a0018f8 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0018f8:	b530      	push	{r4, r5, lr}
1a0018fa:	b083      	sub	sp, #12
1a0018fc:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0018fe:	f7ff ffe5 	bl	1a0018cc <Chip_UART_GetIndex>
1a001902:	2301      	movs	r3, #1
1a001904:	461a      	mov	r2, r3
1a001906:	4619      	mov	r1, r3
1a001908:	4d0e      	ldr	r5, [pc, #56]	; (1a001944 <Chip_UART_Init+0x4c>)
1a00190a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a00190e:	f000 fb69 	bl	1a001fe4 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a001912:	2307      	movs	r3, #7
1a001914:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a001916:	2300      	movs	r3, #0
1a001918:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00191a:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a00191c:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00191e:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a001920:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a001922:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001924:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001926:	4b08      	ldr	r3, [pc, #32]	; (1a001948 <Chip_UART_Init+0x50>)
1a001928:	429c      	cmp	r4, r3
1a00192a:	d006      	beq.n	1a00193a <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a00192c:	2303      	movs	r3, #3
1a00192e:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001930:	2310      	movs	r3, #16
1a001932:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001934:	9b01      	ldr	r3, [sp, #4]
}
1a001936:	b003      	add	sp, #12
1a001938:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00193a:	2300      	movs	r3, #0
1a00193c:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a00193e:	69a3      	ldr	r3, [r4, #24]
1a001940:	9301      	str	r3, [sp, #4]
1a001942:	e7f3      	b.n	1a00192c <Chip_UART_Init+0x34>
1a001944:	1a008430 	.word	0x1a008430
1a001948:	40082000 	.word	0x40082000

1a00194c <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a00194c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001950:	b083      	sub	sp, #12
1a001952:	4683      	mov	fp, r0
1a001954:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001956:	f7ff ffb9 	bl	1a0018cc <Chip_UART_GetIndex>
1a00195a:	4b35      	ldr	r3, [pc, #212]	; (1a001a30 <Chip_UART_SetBaudFDR+0xe4>)
1a00195c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001960:	f000 fb78 	bl	1a002054 <Chip_Clock_GetRate>
1a001964:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a001966:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00196a:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a00196c:	2300      	movs	r3, #0
1a00196e:	9301      	str	r3, [sp, #4]
1a001970:	46a2      	mov	sl, r4
1a001972:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a001974:	e02a      	b.n	1a0019cc <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a001976:	4242      	negs	r2, r0
				div ++;
1a001978:	1c4b      	adds	r3, r1, #1
1a00197a:	e017      	b.n	1a0019ac <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a00197c:	b30a      	cbz	r2, 1a0019c2 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a00197e:	4617      	mov	r7, r2
			sd = d;
1a001980:	9501      	str	r5, [sp, #4]
			sm = m;
1a001982:	46a2      	mov	sl, r4
			sdiv = div;
1a001984:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a001986:	3501      	adds	r5, #1
1a001988:	42ac      	cmp	r4, r5
1a00198a:	d91e      	bls.n	1a0019ca <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a00198c:	0933      	lsrs	r3, r6, #4
1a00198e:	0730      	lsls	r0, r6, #28
1a001990:	fba4 0100 	umull	r0, r1, r4, r0
1a001994:	fb04 1103 	mla	r1, r4, r3, r1
1a001998:	1962      	adds	r2, r4, r5
1a00199a:	fb08 f202 	mul.w	r2, r8, r2
1a00199e:	2300      	movs	r3, #0
1a0019a0:	f000 ff9c 	bl	1a0028dc <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0019a4:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0019a6:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0019a8:	2800      	cmp	r0, #0
1a0019aa:	dbe4      	blt.n	1a001976 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0019ac:	4297      	cmp	r7, r2
1a0019ae:	d3ea      	bcc.n	1a001986 <Chip_UART_SetBaudFDR+0x3a>
1a0019b0:	2b00      	cmp	r3, #0
1a0019b2:	d0e8      	beq.n	1a001986 <Chip_UART_SetBaudFDR+0x3a>
1a0019b4:	0c19      	lsrs	r1, r3, #16
1a0019b6:	d1e6      	bne.n	1a001986 <Chip_UART_SetBaudFDR+0x3a>
1a0019b8:	2b02      	cmp	r3, #2
1a0019ba:	d8df      	bhi.n	1a00197c <Chip_UART_SetBaudFDR+0x30>
1a0019bc:	2d00      	cmp	r5, #0
1a0019be:	d0dd      	beq.n	1a00197c <Chip_UART_SetBaudFDR+0x30>
1a0019c0:	e7e1      	b.n	1a001986 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0019c2:	4617      	mov	r7, r2
			sd = d;
1a0019c4:	9501      	str	r5, [sp, #4]
			sm = m;
1a0019c6:	46a2      	mov	sl, r4
			sdiv = div;
1a0019c8:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0019ca:	3401      	adds	r4, #1
1a0019cc:	b11f      	cbz	r7, 1a0019d6 <Chip_UART_SetBaudFDR+0x8a>
1a0019ce:	2c0f      	cmp	r4, #15
1a0019d0:	d801      	bhi.n	1a0019d6 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0019d2:	2500      	movs	r5, #0
1a0019d4:	e7d8      	b.n	1a001988 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0019d6:	f1b9 0f00 	cmp.w	r9, #0
1a0019da:	d024      	beq.n	1a001a26 <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0019dc:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0019e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0019e4:	f8cb 300c 	str.w	r3, [fp, #12]
1a0019e8:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a0019ec:	f8cb 3000 	str.w	r3, [fp]
1a0019f0:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0019f4:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0019f8:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0019fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001a00:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001a04:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a001a08:	b2db      	uxtb	r3, r3
1a001a0a:	9901      	ldr	r1, [sp, #4]
1a001a0c:	f001 020f 	and.w	r2, r1, #15
1a001a10:	4313      	orrs	r3, r2
1a001a12:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a001a16:	0933      	lsrs	r3, r6, #4
1a001a18:	fb0a f303 	mul.w	r3, sl, r3
1a001a1c:	448a      	add	sl, r1
1a001a1e:	fb09 f90a 	mul.w	r9, r9, sl
1a001a22:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a001a26:	4648      	mov	r0, r9
1a001a28:	b003      	add	sp, #12
1a001a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001a2e:	bf00      	nop
1a001a30:	1a008428 	.word	0x1a008428

1a001a34 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a001a34:	4b03      	ldr	r3, [pc, #12]	; (1a001a44 <Chip_ADC_GetClockIndex+0x10>)
1a001a36:	4298      	cmp	r0, r3
1a001a38:	d001      	beq.n	1a001a3e <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a001a3a:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a001a3c:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a001a3e:	2004      	movs	r0, #4
1a001a40:	4770      	bx	lr
1a001a42:	bf00      	nop
1a001a44:	400e4000 	.word	0x400e4000

1a001a48 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a001a48:	b570      	push	{r4, r5, r6, lr}
1a001a4a:	460d      	mov	r5, r1
1a001a4c:	4614      	mov	r4, r2
1a001a4e:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001a50:	f7ff fff0 	bl	1a001a34 <Chip_ADC_GetClockIndex>
1a001a54:	f000 fafe 	bl	1a002054 <Chip_Clock_GetRate>
	if (burstMode) {
1a001a58:	b965      	cbnz	r5, 1a001a74 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a001a5a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001a5e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a001a62:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a001a66:	0064      	lsls	r4, r4, #1
1a001a68:	fbb0 f0f4 	udiv	r0, r0, r4
1a001a6c:	b2c0      	uxtb	r0, r0
1a001a6e:	3801      	subs	r0, #1
	return div;
}
1a001a70:	b2c0      	uxtb	r0, r0
1a001a72:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a001a74:	fb04 f406 	mul.w	r4, r4, r6
1a001a78:	e7f3      	b.n	1a001a62 <getClkDiv+0x1a>
1a001a7a:	Address 0x000000001a001a7a is out of bounds.


1a001a7c <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001a7c:	b538      	push	{r3, r4, r5, lr}
1a001a7e:	4605      	mov	r5, r0
1a001a80:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001a82:	f7ff ffd7 	bl	1a001a34 <Chip_ADC_GetClockIndex>
1a001a86:	2301      	movs	r3, #1
1a001a88:	461a      	mov	r2, r3
1a001a8a:	4619      	mov	r1, r3
1a001a8c:	f000 faaa 	bl	1a001fe4 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001a90:	2100      	movs	r1, #0
1a001a92:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001a94:	4a08      	ldr	r2, [pc, #32]	; (1a001ab8 <Chip_ADC_Init+0x3c>)
1a001a96:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a001a98:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a001a9a:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a001a9c:	230b      	movs	r3, #11
1a001a9e:	4628      	mov	r0, r5
1a001aa0:	f7ff ffd2 	bl	1a001a48 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001aa4:	0200      	lsls	r0, r0, #8
1a001aa6:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001aaa:	7920      	ldrb	r0, [r4, #4]
1a001aac:	0440      	lsls	r0, r0, #17
1a001aae:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a001ab2:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a001ab4:	6028      	str	r0, [r5, #0]
}
1a001ab6:	bd38      	pop	{r3, r4, r5, pc}
1a001ab8:	00061a80 	.word	0x00061a80

1a001abc <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a001abc:	b570      	push	{r4, r5, r6, lr}
1a001abe:	4605      	mov	r5, r0
1a001ac0:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a001ac2:	6804      	ldr	r4, [r0, #0]
1a001ac4:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a001ac8:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a001acc:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a001ace:	790b      	ldrb	r3, [r1, #4]
1a001ad0:	f1c3 030b 	rsb	r3, r3, #11
1a001ad4:	b2db      	uxtb	r3, r3
1a001ad6:	7949      	ldrb	r1, [r1, #5]
1a001ad8:	f7ff ffb6 	bl	1a001a48 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001adc:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001ae0:	7930      	ldrb	r0, [r6, #4]
1a001ae2:	0440      	lsls	r0, r0, #17
1a001ae4:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a001ae8:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a001aea:	6028      	str	r0, [r5, #0]
}
1a001aec:	bd70      	pop	{r4, r5, r6, pc}

1a001aee <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a001aee:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a001af0:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a001af2:	680a      	ldr	r2, [r1, #0]
1a001af4:	f7ff ffe2 	bl	1a001abc <Chip_ADC_SetSampleRate>
}
1a001af8:	bd08      	pop	{r3, pc}
1a001afa:	Address 0x000000001a001afa is out of bounds.


1a001afc <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001afc:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001afe:	2069      	movs	r0, #105	; 0x69
1a001b00:	f000 faa8 	bl	1a002054 <Chip_Clock_GetRate>
1a001b04:	4b01      	ldr	r3, [pc, #4]	; (1a001b0c <SystemCoreClockUpdate+0x10>)
1a001b06:	6018      	str	r0, [r3, #0]
}
1a001b08:	bd08      	pop	{r3, pc}
1a001b0a:	bf00      	nop
1a001b0c:	10000af8 	.word	0x10000af8

1a001b10 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001b10:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a001b12:	680b      	ldr	r3, [r1, #0]
1a001b14:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001b18:	d002      	beq.n	1a001b20 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a001b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001b1e:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a001b20:	4607      	mov	r7, r0
1a001b22:	2501      	movs	r5, #1
1a001b24:	e03b      	b.n	1a001b9e <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a001b26:	694b      	ldr	r3, [r1, #20]
1a001b28:	fb03 f302 	mul.w	r3, r3, r2
1a001b2c:	fbb3 f3f5 	udiv	r3, r3, r5
1a001b30:	e014      	b.n	1a001b5c <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a001b32:	461c      	mov	r4, r3
1a001b34:	e020      	b.n	1a001b78 <pll_calc_divs+0x68>
		return -val;
1a001b36:	f1cc 0c00 	rsb	ip, ip, #0
1a001b3a:	e020      	b.n	1a001b7e <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a001b3c:	3201      	adds	r2, #1
1a001b3e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a001b42:	dc26      	bgt.n	1a001b92 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a001b44:	680c      	ldr	r4, [r1, #0]
1a001b46:	f014 0f40 	tst.w	r4, #64	; 0x40
1a001b4a:	d0ec      	beq.n	1a001b26 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a001b4c:	1c73      	adds	r3, r6, #1
1a001b4e:	fa02 fc03 	lsl.w	ip, r2, r3
1a001b52:	694b      	ldr	r3, [r1, #20]
1a001b54:	fb03 f30c 	mul.w	r3, r3, ip
1a001b58:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a001b5c:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a001bac <pll_calc_divs+0x9c>
1a001b60:	4563      	cmp	r3, ip
1a001b62:	d9eb      	bls.n	1a001b3c <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001b64:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a001bb0 <pll_calc_divs+0xa0>
1a001b68:	4563      	cmp	r3, ip
1a001b6a:	d812      	bhi.n	1a001b92 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a001b6c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001b70:	d1df      	bne.n	1a001b32 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a001b72:	1c74      	adds	r4, r6, #1
1a001b74:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a001b78:	ebb0 0c04 	subs.w	ip, r0, r4
1a001b7c:	d4db      	bmi.n	1a001b36 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a001b7e:	4567      	cmp	r7, ip
1a001b80:	d9dc      	bls.n	1a001b3c <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a001b82:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a001b84:	1c77      	adds	r7, r6, #1
1a001b86:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a001b88:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a001b8a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a001b8c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a001b8e:	4667      	mov	r7, ip
1a001b90:	e7d4      	b.n	1a001b3c <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a001b92:	3601      	adds	r6, #1
1a001b94:	2e03      	cmp	r6, #3
1a001b96:	dc01      	bgt.n	1a001b9c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a001b98:	2201      	movs	r2, #1
1a001b9a:	e7d0      	b.n	1a001b3e <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a001b9c:	3501      	adds	r5, #1
1a001b9e:	2d04      	cmp	r5, #4
1a001ba0:	dc01      	bgt.n	1a001ba6 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a001ba2:	2600      	movs	r6, #0
1a001ba4:	e7f6      	b.n	1a001b94 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a001ba6:	bcf0      	pop	{r4, r5, r6, r7}
1a001ba8:	4770      	bx	lr
1a001baa:	bf00      	nop
1a001bac:	094c5eff 	.word	0x094c5eff
1a001bb0:	1312d000 	.word	0x1312d000

1a001bb4 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001bb6:	b099      	sub	sp, #100	; 0x64
1a001bb8:	4605      	mov	r5, r0
1a001bba:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001bbc:	225c      	movs	r2, #92	; 0x5c
1a001bbe:	2100      	movs	r1, #0
1a001bc0:	a801      	add	r0, sp, #4
1a001bc2:	f001 fadb 	bl	1a00317c <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a001bc6:	2380      	movs	r3, #128	; 0x80
1a001bc8:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a001bca:	6963      	ldr	r3, [r4, #20]
1a001bcc:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a001bce:	7923      	ldrb	r3, [r4, #4]
1a001bd0:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001bd4:	4669      	mov	r1, sp
1a001bd6:	4628      	mov	r0, r5
1a001bd8:	f7ff ff9a 	bl	1a001b10 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001bdc:	9b06      	ldr	r3, [sp, #24]
1a001bde:	42ab      	cmp	r3, r5
1a001be0:	d027      	beq.n	1a001c32 <pll_get_frac+0x7e>
	if (val < 0)
1a001be2:	1aeb      	subs	r3, r5, r3
1a001be4:	d42e      	bmi.n	1a001c44 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a001be6:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001be8:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a001bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001bee:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a001bf0:	6963      	ldr	r3, [r4, #20]
1a001bf2:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a001bf4:	7923      	ldrb	r3, [r4, #4]
1a001bf6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a001bfa:	a910      	add	r1, sp, #64	; 0x40
1a001bfc:	4628      	mov	r0, r5
1a001bfe:	f7ff ff87 	bl	1a001b10 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a001c02:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a001c04:	42ab      	cmp	r3, r5
1a001c06:	d01f      	beq.n	1a001c48 <pll_get_frac+0x94>
	if (val < 0)
1a001c08:	1aeb      	subs	r3, r5, r3
1a001c0a:	d425      	bmi.n	1a001c58 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a001c0c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a001c0e:	4b2b      	ldr	r3, [pc, #172]	; (1a001cbc <pll_get_frac+0x108>)
1a001c10:	429d      	cmp	r5, r3
1a001c12:	d923      	bls.n	1a001c5c <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a001c14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a001c16:	1aed      	subs	r5, r5, r3
1a001c18:	d433      	bmi.n	1a001c82 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a001c1a:	42ae      	cmp	r6, r5
1a001c1c:	dc3b      	bgt.n	1a001c96 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a001c1e:	42be      	cmp	r6, r7
1a001c20:	dc31      	bgt.n	1a001c86 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a001c22:	466d      	mov	r5, sp
1a001c24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001c28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001c2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001c30:	e006      	b.n	1a001c40 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a001c32:	466d      	mov	r5, sp
1a001c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001c38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001c3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a001c40:	b019      	add	sp, #100	; 0x64
1a001c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a001c44:	425b      	negs	r3, r3
1a001c46:	e7ce      	b.n	1a001be6 <pll_get_frac+0x32>
		*ppll = pll[2];
1a001c48:	ad10      	add	r5, sp, #64	; 0x40
1a001c4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001c4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001c4e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001c52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001c56:	e7f3      	b.n	1a001c40 <pll_get_frac+0x8c>
		return -val;
1a001c58:	425b      	negs	r3, r3
1a001c5a:	e7d7      	b.n	1a001c0c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a001c5c:	2340      	movs	r3, #64	; 0x40
1a001c5e:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a001c60:	6963      	ldr	r3, [r4, #20]
1a001c62:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a001c64:	a908      	add	r1, sp, #32
1a001c66:	4628      	mov	r0, r5
1a001c68:	f7ff ff52 	bl	1a001b10 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a001c6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a001c6e:	42ab      	cmp	r3, r5
1a001c70:	d1d0      	bne.n	1a001c14 <pll_get_frac+0x60>
			*ppll = pll[1];
1a001c72:	ad08      	add	r5, sp, #32
1a001c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001c78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001c80:	e7de      	b.n	1a001c40 <pll_get_frac+0x8c>
		return -val;
1a001c82:	426d      	negs	r5, r5
1a001c84:	e7c9      	b.n	1a001c1a <pll_get_frac+0x66>
			*ppll = pll[2];
1a001c86:	ad10      	add	r5, sp, #64	; 0x40
1a001c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001c8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001c90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001c94:	e7d4      	b.n	1a001c40 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a001c96:	42af      	cmp	r7, r5
1a001c98:	db07      	blt.n	1a001caa <pll_get_frac+0xf6>
			*ppll = pll[1];
1a001c9a:	ad08      	add	r5, sp, #32
1a001c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001ca0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001ca8:	e7ca      	b.n	1a001c40 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a001caa:	ad10      	add	r5, sp, #64	; 0x40
1a001cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001cb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001cb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001cb8:	e7c2      	b.n	1a001c40 <pll_get_frac+0x8c>
1a001cba:	bf00      	nop
1a001cbc:	068e7780 	.word	0x068e7780

1a001cc0 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001cc0:	b430      	push	{r4, r5}
1a001cc2:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001cc4:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001cc6:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001cc8:	e000      	b.n	1a001ccc <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a001cca:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001ccc:	281c      	cmp	r0, #28
1a001cce:	d118      	bne.n	1a001d02 <Chip_Clock_FindBaseClock+0x42>
1a001cd0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001cd4:	0051      	lsls	r1, r2, #1
1a001cd6:	4a0c      	ldr	r2, [pc, #48]	; (1a001d08 <Chip_Clock_FindBaseClock+0x48>)
1a001cd8:	440a      	add	r2, r1
1a001cda:	7914      	ldrb	r4, [r2, #4]
1a001cdc:	4284      	cmp	r4, r0
1a001cde:	d010      	beq.n	1a001d02 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001ce0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a001ce4:	004a      	lsls	r2, r1, #1
1a001ce6:	4908      	ldr	r1, [pc, #32]	; (1a001d08 <Chip_Clock_FindBaseClock+0x48>)
1a001ce8:	5a8a      	ldrh	r2, [r1, r2]
1a001cea:	42aa      	cmp	r2, r5
1a001cec:	d8ed      	bhi.n	1a001cca <Chip_Clock_FindBaseClock+0xa>
1a001cee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001cf2:	0051      	lsls	r1, r2, #1
1a001cf4:	4a04      	ldr	r2, [pc, #16]	; (1a001d08 <Chip_Clock_FindBaseClock+0x48>)
1a001cf6:	440a      	add	r2, r1
1a001cf8:	8852      	ldrh	r2, [r2, #2]
1a001cfa:	42aa      	cmp	r2, r5
1a001cfc:	d3e5      	bcc.n	1a001cca <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a001cfe:	4620      	mov	r0, r4
1a001d00:	e7e4      	b.n	1a001ccc <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a001d02:	bc30      	pop	{r4, r5}
1a001d04:	4770      	bx	lr
1a001d06:	bf00      	nop
1a001d08:	1a008444 	.word	0x1a008444

1a001d0c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001d0c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a001d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a001d12:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001d14:	4a0d      	ldr	r2, [pc, #52]	; (1a001d4c <Chip_Clock_EnableCrystal+0x40>)
1a001d16:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a001d18:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001d1c:	6992      	ldr	r2, [r2, #24]
1a001d1e:	428a      	cmp	r2, r1
1a001d20:	d001      	beq.n	1a001d26 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001d22:	4a0a      	ldr	r2, [pc, #40]	; (1a001d4c <Chip_Clock_EnableCrystal+0x40>)
1a001d24:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a001d26:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a001d2a:	4a09      	ldr	r2, [pc, #36]	; (1a001d50 <Chip_Clock_EnableCrystal+0x44>)
1a001d2c:	6811      	ldr	r1, [r2, #0]
1a001d2e:	4a09      	ldr	r2, [pc, #36]	; (1a001d54 <Chip_Clock_EnableCrystal+0x48>)
1a001d30:	4291      	cmp	r1, r2
1a001d32:	d901      	bls.n	1a001d38 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001d34:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001d38:	4a04      	ldr	r2, [pc, #16]	; (1a001d4c <Chip_Clock_EnableCrystal+0x40>)
1a001d3a:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001d3c:	9b01      	ldr	r3, [sp, #4]
1a001d3e:	1e5a      	subs	r2, r3, #1
1a001d40:	9201      	str	r2, [sp, #4]
1a001d42:	2b00      	cmp	r3, #0
1a001d44:	d1fa      	bne.n	1a001d3c <Chip_Clock_EnableCrystal+0x30>
}
1a001d46:	b002      	add	sp, #8
1a001d48:	4770      	bx	lr
1a001d4a:	bf00      	nop
1a001d4c:	40050000 	.word	0x40050000
1a001d50:	1a008380 	.word	0x1a008380
1a001d54:	01312cff 	.word	0x01312cff

1a001d58 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001d58:	3012      	adds	r0, #18
1a001d5a:	4b05      	ldr	r3, [pc, #20]	; (1a001d70 <Chip_Clock_GetDividerSource+0x18>)
1a001d5c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001d60:	f010 0f01 	tst.w	r0, #1
1a001d64:	d102      	bne.n	1a001d6c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001d66:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001d6a:	4770      	bx	lr
		return CLKINPUT_PD;
1a001d6c:	2011      	movs	r0, #17
}
1a001d6e:	4770      	bx	lr
1a001d70:	40050000 	.word	0x40050000

1a001d74 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001d74:	f100 0212 	add.w	r2, r0, #18
1a001d78:	4b03      	ldr	r3, [pc, #12]	; (1a001d88 <Chip_Clock_GetDividerDivisor+0x14>)
1a001d7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001d7e:	4b03      	ldr	r3, [pc, #12]	; (1a001d8c <Chip_Clock_GetDividerDivisor+0x18>)
1a001d80:	5c18      	ldrb	r0, [r3, r0]
}
1a001d82:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001d86:	4770      	bx	lr
1a001d88:	40050000 	.word	0x40050000
1a001d8c:	1a00843c 	.word	0x1a00843c

1a001d90 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001d90:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001d92:	2810      	cmp	r0, #16
1a001d94:	d80a      	bhi.n	1a001dac <Chip_Clock_GetClockInputHz+0x1c>
1a001d96:	e8df f000 	tbb	[pc, r0]
1a001d9a:	0b42      	.short	0x0b42
1a001d9c:	091f160d 	.word	0x091f160d
1a001da0:	2b282522 	.word	0x2b282522
1a001da4:	322e0909 	.word	0x322e0909
1a001da8:	3a36      	.short	0x3a36
1a001daa:	3e          	.byte	0x3e
1a001dab:	00          	.byte	0x00
	uint32_t rate = 0;
1a001dac:	2000      	movs	r0, #0
1a001dae:	e038      	b.n	1a001e22 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001db0:	481e      	ldr	r0, [pc, #120]	; (1a001e2c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001db2:	e036      	b.n	1a001e22 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001db4:	4b1e      	ldr	r3, [pc, #120]	; (1a001e30 <Chip_Clock_GetClockInputHz+0xa0>)
1a001db6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001dba:	f003 0307 	and.w	r3, r3, #7
1a001dbe:	2b04      	cmp	r3, #4
1a001dc0:	d130      	bne.n	1a001e24 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a001dc2:	2000      	movs	r0, #0
1a001dc4:	e02d      	b.n	1a001e22 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001dc6:	4b1a      	ldr	r3, [pc, #104]	; (1a001e30 <Chip_Clock_GetClockInputHz+0xa0>)
1a001dc8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001dcc:	f003 0307 	and.w	r3, r3, #7
1a001dd0:	2b04      	cmp	r3, #4
1a001dd2:	d029      	beq.n	1a001e28 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001dd4:	4817      	ldr	r0, [pc, #92]	; (1a001e34 <Chip_Clock_GetClockInputHz+0xa4>)
1a001dd6:	e024      	b.n	1a001e22 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001dd8:	4b17      	ldr	r3, [pc, #92]	; (1a001e38 <Chip_Clock_GetClockInputHz+0xa8>)
1a001dda:	6818      	ldr	r0, [r3, #0]
		break;
1a001ddc:	e021      	b.n	1a001e22 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a001dde:	4b17      	ldr	r3, [pc, #92]	; (1a001e3c <Chip_Clock_GetClockInputHz+0xac>)
1a001de0:	6818      	ldr	r0, [r3, #0]
		break;
1a001de2:	e01e      	b.n	1a001e22 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001de4:	4b16      	ldr	r3, [pc, #88]	; (1a001e40 <Chip_Clock_GetClockInputHz+0xb0>)
1a001de6:	6818      	ldr	r0, [r3, #0]
		break;
1a001de8:	e01b      	b.n	1a001e22 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001dea:	4b15      	ldr	r3, [pc, #84]	; (1a001e40 <Chip_Clock_GetClockInputHz+0xb0>)
1a001dec:	6858      	ldr	r0, [r3, #4]
		break;
1a001dee:	e018      	b.n	1a001e22 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001df0:	f000 f86a 	bl	1a001ec8 <Chip_Clock_GetMainPLLHz>
		break;
1a001df4:	e015      	b.n	1a001e22 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001df6:	2100      	movs	r1, #0
1a001df8:	f000 f89c 	bl	1a001f34 <Chip_Clock_GetDivRate>
		break;
1a001dfc:	e011      	b.n	1a001e22 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001dfe:	2101      	movs	r1, #1
1a001e00:	f000 f898 	bl	1a001f34 <Chip_Clock_GetDivRate>
		break;
1a001e04:	e00d      	b.n	1a001e22 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001e06:	2102      	movs	r1, #2
1a001e08:	f000 f894 	bl	1a001f34 <Chip_Clock_GetDivRate>
		break;
1a001e0c:	e009      	b.n	1a001e22 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a001e0e:	2103      	movs	r1, #3
1a001e10:	f000 f890 	bl	1a001f34 <Chip_Clock_GetDivRate>
		break;
1a001e14:	e005      	b.n	1a001e22 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001e16:	2104      	movs	r1, #4
1a001e18:	f000 f88c 	bl	1a001f34 <Chip_Clock_GetDivRate>
		break;
1a001e1c:	e001      	b.n	1a001e22 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a001e1e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a001e22:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a001e24:	4803      	ldr	r0, [pc, #12]	; (1a001e34 <Chip_Clock_GetClockInputHz+0xa4>)
1a001e26:	e7fc      	b.n	1a001e22 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a001e28:	4806      	ldr	r0, [pc, #24]	; (1a001e44 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a001e2a:	e7fa      	b.n	1a001e22 <Chip_Clock_GetClockInputHz+0x92>
1a001e2c:	00b71b00 	.word	0x00b71b00
1a001e30:	40043000 	.word	0x40043000
1a001e34:	017d7840 	.word	0x017d7840
1a001e38:	1a008354 	.word	0x1a008354
1a001e3c:	1a008380 	.word	0x1a008380
1a001e40:	10000aa8 	.word	0x10000aa8
1a001e44:	02faf080 	.word	0x02faf080

1a001e48 <Chip_Clock_CalcMainPLLValue>:
{
1a001e48:	b538      	push	{r3, r4, r5, lr}
1a001e4a:	4605      	mov	r5, r0
1a001e4c:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a001e4e:	7908      	ldrb	r0, [r1, #4]
1a001e50:	f7ff ff9e 	bl	1a001d90 <Chip_Clock_GetClockInputHz>
1a001e54:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001e56:	4b19      	ldr	r3, [pc, #100]	; (1a001ebc <Chip_Clock_CalcMainPLLValue+0x74>)
1a001e58:	442b      	add	r3, r5
1a001e5a:	4a19      	ldr	r2, [pc, #100]	; (1a001ec0 <Chip_Clock_CalcMainPLLValue+0x78>)
1a001e5c:	4293      	cmp	r3, r2
1a001e5e:	d821      	bhi.n	1a001ea4 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001e60:	b318      	cbz	r0, 1a001eaa <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001e62:	2380      	movs	r3, #128	; 0x80
1a001e64:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001e66:	2300      	movs	r3, #0
1a001e68:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001e6a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001e6c:	fbb5 f3f0 	udiv	r3, r5, r0
1a001e70:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001e72:	4a14      	ldr	r2, [pc, #80]	; (1a001ec4 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001e74:	4295      	cmp	r5, r2
1a001e76:	d903      	bls.n	1a001e80 <Chip_Clock_CalcMainPLLValue+0x38>
1a001e78:	fb03 f000 	mul.w	r0, r3, r0
1a001e7c:	42a8      	cmp	r0, r5
1a001e7e:	d007      	beq.n	1a001e90 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001e80:	4621      	mov	r1, r4
1a001e82:	4628      	mov	r0, r5
1a001e84:	f7ff fe96 	bl	1a001bb4 <pll_get_frac>
		if (!ppll->nsel) {
1a001e88:	68a3      	ldr	r3, [r4, #8]
1a001e8a:	b18b      	cbz	r3, 1a001eb0 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001e8c:	3b01      	subs	r3, #1
1a001e8e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001e90:	6923      	ldr	r3, [r4, #16]
1a001e92:	b183      	cbz	r3, 1a001eb6 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001e94:	68e2      	ldr	r2, [r4, #12]
1a001e96:	b10a      	cbz	r2, 1a001e9c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001e98:	3a01      	subs	r2, #1
1a001e9a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001e9c:	3b01      	subs	r3, #1
1a001e9e:	6123      	str	r3, [r4, #16]
	return 0;
1a001ea0:	2000      	movs	r0, #0
}
1a001ea2:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001ea8:	e7fb      	b.n	1a001ea2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a001eaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001eae:	e7f8      	b.n	1a001ea2 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001eb4:	e7f5      	b.n	1a001ea2 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001eb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001eba:	e7f2      	b.n	1a001ea2 <Chip_Clock_CalcMainPLLValue+0x5a>
1a001ebc:	ff6b3a10 	.word	0xff6b3a10
1a001ec0:	0b940510 	.word	0x0b940510
1a001ec4:	094c5eff 	.word	0x094c5eff

1a001ec8 <Chip_Clock_GetMainPLLHz>:
{
1a001ec8:	b530      	push	{r4, r5, lr}
1a001eca:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001ecc:	4d17      	ldr	r5, [pc, #92]	; (1a001f2c <Chip_Clock_GetMainPLLHz+0x64>)
1a001ece:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001ed0:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001ed4:	f7ff ff5c 	bl	1a001d90 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001ed8:	4b15      	ldr	r3, [pc, #84]	; (1a001f30 <Chip_Clock_GetMainPLLHz+0x68>)
1a001eda:	681b      	ldr	r3, [r3, #0]
1a001edc:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001ede:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001ee0:	f013 0f01 	tst.w	r3, #1
1a001ee4:	d01f      	beq.n	1a001f26 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a001ee6:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001eea:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001eee:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a001ef2:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001ef6:	3301      	adds	r3, #1
	n = nsel + 1;
1a001ef8:	3201      	adds	r2, #1
	p = ptab[psel];
1a001efa:	f10d 0c08 	add.w	ip, sp, #8
1a001efe:	4461      	add	r1, ip
1a001f00:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a001f04:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001f08:	d108      	bne.n	1a001f1c <Chip_Clock_GetMainPLLHz+0x54>
1a001f0a:	b93d      	cbnz	r5, 1a001f1c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a001f0c:	0049      	lsls	r1, r1, #1
1a001f0e:	fbb3 f3f1 	udiv	r3, r3, r1
1a001f12:	fbb0 f0f2 	udiv	r0, r0, r2
1a001f16:	fb00 f003 	mul.w	r0, r0, r3
1a001f1a:	e005      	b.n	1a001f28 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a001f1c:	fbb0 f0f2 	udiv	r0, r0, r2
1a001f20:	fb03 f000 	mul.w	r0, r3, r0
1a001f24:	e000      	b.n	1a001f28 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a001f26:	2000      	movs	r0, #0
}
1a001f28:	b003      	add	sp, #12
1a001f2a:	bd30      	pop	{r4, r5, pc}
1a001f2c:	40050000 	.word	0x40050000
1a001f30:	1a008438 	.word	0x1a008438

1a001f34 <Chip_Clock_GetDivRate>:
{
1a001f34:	b538      	push	{r3, r4, r5, lr}
1a001f36:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001f38:	4608      	mov	r0, r1
1a001f3a:	f7ff ff0d 	bl	1a001d58 <Chip_Clock_GetDividerSource>
1a001f3e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a001f40:	4620      	mov	r0, r4
1a001f42:	f7ff ff17 	bl	1a001d74 <Chip_Clock_GetDividerDivisor>
1a001f46:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001f48:	4628      	mov	r0, r5
1a001f4a:	f7ff ff21 	bl	1a001d90 <Chip_Clock_GetClockInputHz>
1a001f4e:	3401      	adds	r4, #1
}
1a001f50:	fbb0 f0f4 	udiv	r0, r0, r4
1a001f54:	bd38      	pop	{r3, r4, r5, pc}
1a001f56:	Address 0x000000001a001f56 is out of bounds.


1a001f58 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001f58:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001f5a:	f100 0416 	add.w	r4, r0, #22
1a001f5e:	00a4      	lsls	r4, r4, #2
1a001f60:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001f64:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001f68:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001f6a:	281b      	cmp	r0, #27
1a001f6c:	d813      	bhi.n	1a001f96 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a001f6e:	2911      	cmp	r1, #17
1a001f70:	d01a      	beq.n	1a001fa8 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001f72:	4d0e      	ldr	r5, [pc, #56]	; (1a001fac <Chip_Clock_SetBaseClock+0x54>)
1a001f74:	4025      	ands	r5, r4

			if (autoblocken) {
1a001f76:	b10a      	cbz	r2, 1a001f7c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001f78:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001f7c:	b10b      	cbz	r3, 1a001f82 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a001f7e:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001f82:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001f86:	3016      	adds	r0, #22
1a001f88:	0080      	lsls	r0, r0, #2
1a001f8a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001f8e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001f92:	6045      	str	r5, [r0, #4]
1a001f94:	e008      	b.n	1a001fa8 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001f96:	f044 0401 	orr.w	r4, r4, #1
1a001f9a:	3016      	adds	r0, #22
1a001f9c:	0080      	lsls	r0, r0, #2
1a001f9e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001fa2:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001fa6:	6044      	str	r4, [r0, #4]
	}
}
1a001fa8:	bc30      	pop	{r4, r5}
1a001faa:	4770      	bx	lr
1a001fac:	e0fff7fe 	.word	0xe0fff7fe

1a001fb0 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001fb0:	281b      	cmp	r0, #27
1a001fb2:	d80c      	bhi.n	1a001fce <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001fb4:	3016      	adds	r0, #22
1a001fb6:	0080      	lsls	r0, r0, #2
1a001fb8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001fbc:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001fc0:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001fc2:	f010 0f01 	tst.w	r0, #1
1a001fc6:	d104      	bne.n	1a001fd2 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001fc8:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001fcc:	4770      	bx	lr
		return CLKINPUT_PD;
1a001fce:	2011      	movs	r0, #17
1a001fd0:	4770      	bx	lr
		return CLKINPUT_PD;
1a001fd2:	2011      	movs	r0, #17
}
1a001fd4:	4770      	bx	lr

1a001fd6 <Chip_Clock_GetBaseClocktHz>:
{
1a001fd6:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001fd8:	f7ff ffea 	bl	1a001fb0 <Chip_Clock_GetBaseClock>
1a001fdc:	f7ff fed8 	bl	1a001d90 <Chip_Clock_GetClockInputHz>
}
1a001fe0:	bd08      	pop	{r3, pc}
1a001fe2:	Address 0x000000001a001fe2 is out of bounds.


1a001fe4 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001fe4:	b969      	cbnz	r1, 1a002002 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a001fe6:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001fe8:	b10a      	cbz	r2, 1a001fee <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001fea:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001fee:	2b02      	cmp	r3, #2
1a001ff0:	d009      	beq.n	1a002006 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001ff2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001ff6:	d209      	bcs.n	1a00200c <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001ff8:	3020      	adds	r0, #32
1a001ffa:	4b07      	ldr	r3, [pc, #28]	; (1a002018 <Chip_Clock_EnableOpts+0x34>)
1a001ffc:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a002000:	4770      	bx	lr
		reg |= (1 << 1);
1a002002:	2103      	movs	r1, #3
1a002004:	e7f0      	b.n	1a001fe8 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a002006:	f041 0120 	orr.w	r1, r1, #32
1a00200a:	e7f2      	b.n	1a001ff2 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a00200c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002010:	4b02      	ldr	r3, [pc, #8]	; (1a00201c <Chip_Clock_EnableOpts+0x38>)
1a002012:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002016:	4770      	bx	lr
1a002018:	40051000 	.word	0x40051000
1a00201c:	40052000 	.word	0x40052000

1a002020 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002020:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002024:	d208      	bcs.n	1a002038 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002026:	4a09      	ldr	r2, [pc, #36]	; (1a00204c <Chip_Clock_Enable+0x2c>)
1a002028:	3020      	adds	r0, #32
1a00202a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00202e:	f043 0301 	orr.w	r3, r3, #1
1a002032:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a002036:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002038:	4a05      	ldr	r2, [pc, #20]	; (1a002050 <Chip_Clock_Enable+0x30>)
1a00203a:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00203e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002042:	f043 0301 	orr.w	r3, r3, #1
1a002046:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a00204a:	4770      	bx	lr
1a00204c:	40051000 	.word	0x40051000
1a002050:	40052000 	.word	0x40052000

1a002054 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002054:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a002056:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00205a:	d309      	bcc.n	1a002070 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a00205c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002060:	4a0d      	ldr	r2, [pc, #52]	; (1a002098 <Chip_Clock_GetRate+0x44>)
1a002062:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002066:	f014 0f01 	tst.w	r4, #1
1a00206a:	d107      	bne.n	1a00207c <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a00206c:	2000      	movs	r0, #0
	}

	return rate;
}
1a00206e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002070:	f100 0320 	add.w	r3, r0, #32
1a002074:	4a09      	ldr	r2, [pc, #36]	; (1a00209c <Chip_Clock_GetRate+0x48>)
1a002076:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00207a:	e7f4      	b.n	1a002066 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a00207c:	f7ff fe20 	bl	1a001cc0 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002080:	f7ff ffa9 	bl	1a001fd6 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a002084:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a002088:	d103      	bne.n	1a002092 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00208a:	2301      	movs	r3, #1
		rate = rate / div;
1a00208c:	fbb0 f0f3 	udiv	r0, r0, r3
1a002090:	e7ed      	b.n	1a00206e <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a002092:	2302      	movs	r3, #2
1a002094:	e7fa      	b.n	1a00208c <Chip_Clock_GetRate+0x38>
1a002096:	bf00      	nop
1a002098:	40052000 	.word	0x40052000
1a00209c:	40051000 	.word	0x40051000

1a0020a0 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0020a0:	b570      	push	{r4, r5, r6, lr}
1a0020a2:	b08a      	sub	sp, #40	; 0x28
1a0020a4:	4605      	mov	r5, r0
1a0020a6:	460e      	mov	r6, r1
1a0020a8:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0020aa:	f242 7310 	movw	r3, #10000	; 0x2710
1a0020ae:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0020b0:	2806      	cmp	r0, #6
1a0020b2:	d018      	beq.n	1a0020e6 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0020b4:	2300      	movs	r3, #0
1a0020b6:	2201      	movs	r2, #1
1a0020b8:	4629      	mov	r1, r5
1a0020ba:	2004      	movs	r0, #4
1a0020bc:	f7ff ff4c 	bl	1a001f58 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0020c0:	4a49      	ldr	r2, [pc, #292]	; (1a0021e8 <Chip_SetupCoreClock+0x148>)
1a0020c2:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0020c4:	f043 0301 	orr.w	r3, r3, #1
1a0020c8:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0020ca:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0020ce:	a901      	add	r1, sp, #4
1a0020d0:	4630      	mov	r0, r6
1a0020d2:	f7ff feb9 	bl	1a001e48 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0020d6:	4b45      	ldr	r3, [pc, #276]	; (1a0021ec <Chip_SetupCoreClock+0x14c>)
1a0020d8:	429e      	cmp	r6, r3
1a0020da:	d916      	bls.n	1a00210a <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0020dc:	9b01      	ldr	r3, [sp, #4]
1a0020de:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0020e2:	d003      	beq.n	1a0020ec <Chip_SetupCoreClock+0x4c>
1a0020e4:	e7fe      	b.n	1a0020e4 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0020e6:	f7ff fe11 	bl	1a001d0c <Chip_Clock_EnableCrystal>
1a0020ea:	e7e3      	b.n	1a0020b4 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a0020ec:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0020f0:	d005      	beq.n	1a0020fe <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0020f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0020f6:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0020f8:	2500      	movs	r5, #0
			direct = 1;
1a0020fa:	2601      	movs	r6, #1
1a0020fc:	e007      	b.n	1a00210e <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0020fe:	9b04      	ldr	r3, [sp, #16]
1a002100:	3301      	adds	r3, #1
1a002102:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a002104:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a002106:	2600      	movs	r6, #0
1a002108:	e001      	b.n	1a00210e <Chip_SetupCoreClock+0x6e>
1a00210a:	2500      	movs	r5, #0
1a00210c:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00210e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002112:	9b01      	ldr	r3, [sp, #4]
1a002114:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002118:	9a05      	ldr	r2, [sp, #20]
1a00211a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00211e:	9a03      	ldr	r2, [sp, #12]
1a002120:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002124:	9a04      	ldr	r2, [sp, #16]
1a002126:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00212a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00212e:	4a2e      	ldr	r2, [pc, #184]	; (1a0021e8 <Chip_SetupCoreClock+0x148>)
1a002130:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a002132:	4b2d      	ldr	r3, [pc, #180]	; (1a0021e8 <Chip_SetupCoreClock+0x148>)
1a002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a002136:	f013 0f01 	tst.w	r3, #1
1a00213a:	d0fa      	beq.n	1a002132 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00213c:	2300      	movs	r3, #0
1a00213e:	2201      	movs	r2, #1
1a002140:	2109      	movs	r1, #9
1a002142:	2004      	movs	r0, #4
1a002144:	f7ff ff08 	bl	1a001f58 <Chip_Clock_SetBaseClock>

	if (direct) {
1a002148:	b1fe      	cbz	r6, 1a00218a <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00214a:	f242 7310 	movw	r3, #10000	; 0x2710
1a00214e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a002150:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002152:	1e5a      	subs	r2, r3, #1
1a002154:	9209      	str	r2, [sp, #36]	; 0x24
1a002156:	2b00      	cmp	r3, #0
1a002158:	d1fa      	bne.n	1a002150 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00215a:	9b01      	ldr	r3, [sp, #4]
1a00215c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002160:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002162:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002166:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00216a:	9a05      	ldr	r2, [sp, #20]
1a00216c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002170:	9a03      	ldr	r2, [sp, #12]
1a002172:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002176:	9a04      	ldr	r2, [sp, #16]
1a002178:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00217c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002180:	4a19      	ldr	r2, [pc, #100]	; (1a0021e8 <Chip_SetupCoreClock+0x148>)
1a002182:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a002184:	b36c      	cbz	r4, 1a0021e2 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002186:	2400      	movs	r4, #0
1a002188:	e029      	b.n	1a0021de <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a00218a:	2d00      	cmp	r5, #0
1a00218c:	d0fa      	beq.n	1a002184 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00218e:	f242 7310 	movw	r3, #10000	; 0x2710
1a002192:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a002194:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002196:	1e5a      	subs	r2, r3, #1
1a002198:	9209      	str	r2, [sp, #36]	; 0x24
1a00219a:	2b00      	cmp	r3, #0
1a00219c:	d1fa      	bne.n	1a002194 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a00219e:	9b04      	ldr	r3, [sp, #16]
1a0021a0:	1e5a      	subs	r2, r3, #1
1a0021a2:	9204      	str	r2, [sp, #16]
1a0021a4:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a0021a8:	9b01      	ldr	r3, [sp, #4]
1a0021aa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a0021ae:	9905      	ldr	r1, [sp, #20]
1a0021b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0021b4:	9903      	ldr	r1, [sp, #12]
1a0021b6:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0021ba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0021be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0021c2:	4a09      	ldr	r2, [pc, #36]	; (1a0021e8 <Chip_SetupCoreClock+0x148>)
1a0021c4:	6453      	str	r3, [r2, #68]	; 0x44
1a0021c6:	e7dd      	b.n	1a002184 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0021c8:	4809      	ldr	r0, [pc, #36]	; (1a0021f0 <Chip_SetupCoreClock+0x150>)
1a0021ca:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0021ce:	78cb      	ldrb	r3, [r1, #3]
1a0021d0:	788a      	ldrb	r2, [r1, #2]
1a0021d2:	7849      	ldrb	r1, [r1, #1]
1a0021d4:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0021d8:	f7ff febe 	bl	1a001f58 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0021dc:	3401      	adds	r4, #1
1a0021de:	2c11      	cmp	r4, #17
1a0021e0:	d9f2      	bls.n	1a0021c8 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0021e2:	b00a      	add	sp, #40	; 0x28
1a0021e4:	bd70      	pop	{r4, r5, r6, pc}
1a0021e6:	bf00      	nop
1a0021e8:	40050000 	.word	0x40050000
1a0021ec:	068e7780 	.word	0x068e7780
1a0021f0:	1a0084b0 	.word	0x1a0084b0

1a0021f4 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a0021f4:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a0021f6:	4b0f      	ldr	r3, [pc, #60]	; (1a002234 <fpuInit+0x40>)
1a0021f8:	681b      	ldr	r3, [r3, #0]
1a0021fa:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a0021fc:	4b0e      	ldr	r3, [pc, #56]	; (1a002238 <fpuInit+0x44>)
1a0021fe:	681b      	ldr	r3, [r3, #0]
1a002200:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a002202:	9a02      	ldr	r2, [sp, #8]
1a002204:	4b0d      	ldr	r3, [pc, #52]	; (1a00223c <fpuInit+0x48>)
1a002206:	429a      	cmp	r2, r3
1a002208:	d00c      	beq.n	1a002224 <fpuInit+0x30>
1a00220a:	2300      	movs	r3, #0

	if (vfpPresent) {
1a00220c:	b143      	cbz	r3, 1a002220 <fpuInit+0x2c>
		Cpacr = *regCpacr;
1a00220e:	4a0c      	ldr	r2, [pc, #48]	; (1a002240 <fpuInit+0x4c>)
1a002210:	6813      	ldr	r3, [r2, #0]
1a002212:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a002214:	9b03      	ldr	r3, [sp, #12]
1a002216:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00221a:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a00221c:	9b03      	ldr	r3, [sp, #12]
1a00221e:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a002220:	b004      	add	sp, #16
1a002222:	4770      	bx	lr
	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a002224:	9a01      	ldr	r2, [sp, #4]
1a002226:	4b07      	ldr	r3, [pc, #28]	; (1a002244 <fpuInit+0x50>)
1a002228:	429a      	cmp	r2, r3
1a00222a:	d001      	beq.n	1a002230 <fpuInit+0x3c>
1a00222c:	2300      	movs	r3, #0
1a00222e:	e7ed      	b.n	1a00220c <fpuInit+0x18>
1a002230:	2301      	movs	r3, #1
1a002232:	e7eb      	b.n	1a00220c <fpuInit+0x18>
1a002234:	e000ef40 	.word	0xe000ef40
1a002238:	e000ef44 	.word	0xe000ef44
1a00223c:	10110021 	.word	0x10110021
1a002240:	e000ed88 	.word	0xe000ed88
1a002244:	11000011 	.word	0x11000011

1a002248 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a002248:	4770      	bx	lr
1a00224a:	Address 0x000000001a00224a is out of bounds.


1a00224c <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a00224c:	2901      	cmp	r1, #1
1a00224e:	d000      	beq.n	1a002252 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a002250:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a002252:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a002256:	0082      	lsls	r2, r0, #2
1a002258:	4b03      	ldr	r3, [pc, #12]	; (1a002268 <Chip_I2C_EventHandler+0x1c>)
1a00225a:	4413      	add	r3, r2
1a00225c:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a00225e:	7d13      	ldrb	r3, [r2, #20]
1a002260:	b2db      	uxtb	r3, r3
1a002262:	2b04      	cmp	r3, #4
1a002264:	d0fb      	beq.n	1a00225e <Chip_I2C_EventHandler+0x12>
1a002266:	e7f3      	b.n	1a002250 <Chip_I2C_EventHandler+0x4>
1a002268:	10000094 	.word	0x10000094

1a00226c <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a00226c:	b570      	push	{r4, r5, r6, lr}
1a00226e:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a002270:	4e06      	ldr	r6, [pc, #24]	; (1a00228c <Chip_I2C_Init+0x20>)
1a002272:	00c4      	lsls	r4, r0, #3
1a002274:	1a22      	subs	r2, r4, r0
1a002276:	0093      	lsls	r3, r2, #2
1a002278:	4433      	add	r3, r6
1a00227a:	8898      	ldrh	r0, [r3, #4]
1a00227c:	f7ff fed0 	bl	1a002020 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a002280:	1b64      	subs	r4, r4, r5
1a002282:	00a3      	lsls	r3, r4, #2
1a002284:	58f3      	ldr	r3, [r6, r3]
1a002286:	226c      	movs	r2, #108	; 0x6c
1a002288:	619a      	str	r2, [r3, #24]
}
1a00228a:	bd70      	pop	{r4, r5, r6, pc}
1a00228c:	10000094 	.word	0x10000094

1a002290 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a002290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002294:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a002296:	4e0b      	ldr	r6, [pc, #44]	; (1a0022c4 <Chip_I2C_SetClockRate+0x34>)
1a002298:	00c5      	lsls	r5, r0, #3
1a00229a:	1a2b      	subs	r3, r5, r0
1a00229c:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a0022a0:	eb06 0308 	add.w	r3, r6, r8
1a0022a4:	8898      	ldrh	r0, [r3, #4]
1a0022a6:	f7ff fed5 	bl	1a002054 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0022aa:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0022ae:	f856 3008 	ldr.w	r3, [r6, r8]
1a0022b2:	0842      	lsrs	r2, r0, #1
1a0022b4:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0022b6:	f856 3008 	ldr.w	r3, [r6, r8]
1a0022ba:	691a      	ldr	r2, [r3, #16]
1a0022bc:	1a80      	subs	r0, r0, r2
1a0022be:	6158      	str	r0, [r3, #20]
}
1a0022c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0022c4:	10000094 	.word	0x10000094

1a0022c8 <SSP_Write2BFifo>:
 * Private functions
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a0022c8:	680b      	ldr	r3, [r1, #0]
1a0022ca:	b133      	cbz	r3, 1a0022da <SSP_Write2BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
												 xf_setup->tx_cnt)));
1a0022cc:	684a      	ldr	r2, [r1, #4]
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
1a0022ce:	5a9b      	ldrh	r3, [r3, r2]
	pSSP->DR = SSP_DR_BITMASK(tx_data);
1a0022d0:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFFFF);
	}

	xf_setup->tx_cnt += 2;
1a0022d2:	684b      	ldr	r3, [r1, #4]
1a0022d4:	3302      	adds	r3, #2
1a0022d6:	604b      	str	r3, [r1, #4]
}
1a0022d8:	4770      	bx	lr
1a0022da:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a0022de:	6083      	str	r3, [r0, #8]
1a0022e0:	e7f7      	b.n	1a0022d2 <SSP_Write2BFifo+0xa>

1a0022e2 <SSP_Write1BFifo>:

/** SSP macro: write 1 bytes to FIFO buffer */
STATIC void SSP_Write1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a0022e2:	680b      	ldr	r3, [r1, #0]
1a0022e4:	b133      	cbz	r3, 1a0022f4 <SSP_Write1BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint8_t *) ((uint32_t) xf_setup->tx_data + xf_setup->tx_cnt)));
1a0022e6:	684a      	ldr	r2, [r1, #4]
1a0022e8:	5c9b      	ldrb	r3, [r3, r2]
1a0022ea:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFF);
	}

	xf_setup->tx_cnt++;
1a0022ec:	684b      	ldr	r3, [r1, #4]
1a0022ee:	3301      	adds	r3, #1
1a0022f0:	604b      	str	r3, [r1, #4]
}
1a0022f2:	4770      	bx	lr
1a0022f4:	23ff      	movs	r3, #255	; 0xff
1a0022f6:	6083      	str	r3, [r0, #8]
1a0022f8:	e7f8      	b.n	1a0022ec <SSP_Write1BFifo+0xa>

1a0022fa <SSP_Read2BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a0022fa:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0022fc:	f013 0f04 	tst.w	r3, #4
1a002300:	d01b      	beq.n	1a00233a <SSP_Read2BFifo+0x40>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a002302:	68ca      	ldr	r2, [r1, #12]
1a002304:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a002306:	429a      	cmp	r2, r3
1a002308:	d216      	bcs.n	1a002338 <SSP_Read2BFifo+0x3e>
{
1a00230a:	b410      	push	{r4}
1a00230c:	e00a      	b.n	1a002324 <SSP_Read2BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt += 2;
1a00230e:	68cb      	ldr	r3, [r1, #12]
1a002310:	3302      	adds	r3, #2
1a002312:	60cb      	str	r3, [r1, #12]
1a002314:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a002316:	f013 0f04 	tst.w	r3, #4
1a00231a:	d00a      	beq.n	1a002332 <SSP_Read2BFifo+0x38>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a00231c:	68ca      	ldr	r2, [r1, #12]
1a00231e:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a002320:	429a      	cmp	r2, r3
1a002322:	d206      	bcs.n	1a002332 <SSP_Read2BFifo+0x38>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a002324:	6883      	ldr	r3, [r0, #8]
1a002326:	b29b      	uxth	r3, r3
		if (xf_setup->rx_data) {
1a002328:	688c      	ldr	r4, [r1, #8]
1a00232a:	2c00      	cmp	r4, #0
1a00232c:	d0ef      	beq.n	1a00230e <SSP_Read2BFifo+0x14>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a00232e:	52a3      	strh	r3, [r4, r2]
1a002330:	e7ed      	b.n	1a00230e <SSP_Read2BFifo+0x14>
	}
}
1a002332:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002336:	4770      	bx	lr
1a002338:	4770      	bx	lr
1a00233a:	4770      	bx	lr

1a00233c <SSP_Read1BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a00233c:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a00233e:	f013 0f04 	tst.w	r3, #4
1a002342:	d01a      	beq.n	1a00237a <SSP_Read1BFifo+0x3e>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a002344:	68cb      	ldr	r3, [r1, #12]
1a002346:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a002348:	4293      	cmp	r3, r2
1a00234a:	d215      	bcs.n	1a002378 <SSP_Read1BFifo+0x3c>
{
1a00234c:	b410      	push	{r4}
1a00234e:	e00a      	b.n	1a002366 <SSP_Read1BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt++;
1a002350:	68cb      	ldr	r3, [r1, #12]
1a002352:	3301      	adds	r3, #1
1a002354:	60cb      	str	r3, [r1, #12]
1a002356:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a002358:	f013 0f04 	tst.w	r3, #4
1a00235c:	d009      	beq.n	1a002372 <SSP_Read1BFifo+0x36>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a00235e:	68cb      	ldr	r3, [r1, #12]
1a002360:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a002362:	4293      	cmp	r3, r2
1a002364:	d205      	bcs.n	1a002372 <SSP_Read1BFifo+0x36>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a002366:	6884      	ldr	r4, [r0, #8]
		if (xf_setup->rx_data) {
1a002368:	688a      	ldr	r2, [r1, #8]
1a00236a:	2a00      	cmp	r2, #0
1a00236c:	d0f0      	beq.n	1a002350 <SSP_Read1BFifo+0x14>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a00236e:	54d4      	strb	r4, [r2, r3]
1a002370:	e7ee      	b.n	1a002350 <SSP_Read1BFifo+0x14>
	}
}
1a002372:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002376:	4770      	bx	lr
1a002378:	4770      	bx	lr
1a00237a:	4770      	bx	lr

1a00237c <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00237c:	4b03      	ldr	r3, [pc, #12]	; (1a00238c <Chip_SSP_GetClockIndex+0x10>)
1a00237e:	4298      	cmp	r0, r3
1a002380:	d001      	beq.n	1a002386 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a002382:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a002384:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a002386:	20a5      	movs	r0, #165	; 0xa5
1a002388:	4770      	bx	lr
1a00238a:	bf00      	nop
1a00238c:	400c5000 	.word	0x400c5000

1a002390 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002390:	4b04      	ldr	r3, [pc, #16]	; (1a0023a4 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a002392:	4298      	cmp	r0, r3
1a002394:	d002      	beq.n	1a00239c <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a002396:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00239a:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a00239c:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0023a0:	4770      	bx	lr
1a0023a2:	bf00      	nop
1a0023a4:	400c5000 	.word	0x400c5000

1a0023a8 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0023a8:	6803      	ldr	r3, [r0, #0]
1a0023aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0023ae:	0209      	lsls	r1, r1, #8
1a0023b0:	b289      	uxth	r1, r1
1a0023b2:	4319      	orrs	r1, r3
1a0023b4:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a0023b6:	6102      	str	r2, [r0, #16]
}
1a0023b8:	4770      	bx	lr

1a0023ba <Chip_SSP_RWFrames_Blocking>:

/* SSP Polling Read/Write in blocking mode */
uint32_t Chip_SSP_RWFrames_Blocking(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a0023ba:	b538      	push	{r3, r4, r5, lr}
1a0023bc:	4604      	mov	r4, r0
1a0023be:	460d      	mov	r5, r1
	/* Clear all remaining frames in RX FIFO */
	while (Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE)) {
1a0023c0:	e000      	b.n	1a0023c4 <Chip_SSP_RWFrames_Blocking+0xa>
1a0023c2:	68a3      	ldr	r3, [r4, #8]
	return (pSSP->SR & Stat) ? SET : RESET;
1a0023c4:	68e3      	ldr	r3, [r4, #12]
1a0023c6:	f013 0f04 	tst.w	r3, #4
1a0023ca:	d1fa      	bne.n	1a0023c2 <Chip_SSP_RWFrames_Blocking+0x8>
	pSSP->ICR = IntClear;
1a0023cc:	2303      	movs	r3, #3
1a0023ce:	6223      	str	r3, [r4, #32]
	return SSP_CR0_DSS(pSSP->CR0);
1a0023d0:	6823      	ldr	r3, [r4, #0]
1a0023d2:	f003 030f 	and.w	r3, r3, #15
	}

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
1a0023d6:	2b07      	cmp	r3, #7
1a0023d8:	d808      	bhi.n	1a0023ec <Chip_SSP_RWFrames_Blocking+0x32>
1a0023da:	e022      	b.n	1a002422 <Chip_SSP_RWFrames_Blocking+0x68>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a0023dc:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write2BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a0023de:	f013 0f01 	tst.w	r3, #1
1a0023e2:	d139      	bne.n	1a002458 <Chip_SSP_RWFrames_Blocking+0x9e>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
1a0023e4:	4629      	mov	r1, r5
1a0023e6:	4620      	mov	r0, r4
1a0023e8:	f7ff ff87 	bl	1a0022fa <SSP_Read2BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a0023ec:	68ea      	ldr	r2, [r5, #12]
1a0023ee:	692b      	ldr	r3, [r5, #16]
1a0023f0:	429a      	cmp	r2, r3
1a0023f2:	d302      	bcc.n	1a0023fa <Chip_SSP_RWFrames_Blocking+0x40>
1a0023f4:	686a      	ldr	r2, [r5, #4]
1a0023f6:	4293      	cmp	r3, r2
1a0023f8:	d926      	bls.n	1a002448 <Chip_SSP_RWFrames_Blocking+0x8e>
	return (pSSP->SR & Stat) ? SET : RESET;
1a0023fa:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a0023fc:	f012 0f02 	tst.w	r2, #2
1a002400:	d0ec      	beq.n	1a0023dc <Chip_SSP_RWFrames_Blocking+0x22>
1a002402:	686a      	ldr	r2, [r5, #4]
1a002404:	429a      	cmp	r2, r3
1a002406:	d2e9      	bcs.n	1a0023dc <Chip_SSP_RWFrames_Blocking+0x22>
				SSP_Write2BFifo(pSSP, xf_setup);
1a002408:	4629      	mov	r1, r5
1a00240a:	4620      	mov	r0, r4
1a00240c:	f7ff ff5c 	bl	1a0022c8 <SSP_Write2BFifo>
1a002410:	e7e4      	b.n	1a0023dc <Chip_SSP_RWFrames_Blocking+0x22>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a002412:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write1BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a002414:	f013 0f01 	tst.w	r3, #1
1a002418:	d120      	bne.n	1a00245c <Chip_SSP_RWFrames_Blocking+0xa2>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
1a00241a:	4629      	mov	r1, r5
1a00241c:	4620      	mov	r0, r4
1a00241e:	f7ff ff8d 	bl	1a00233c <SSP_Read1BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a002422:	68ea      	ldr	r2, [r5, #12]
1a002424:	692b      	ldr	r3, [r5, #16]
1a002426:	429a      	cmp	r2, r3
1a002428:	d302      	bcc.n	1a002430 <Chip_SSP_RWFrames_Blocking+0x76>
1a00242a:	686a      	ldr	r2, [r5, #4]
1a00242c:	4293      	cmp	r3, r2
1a00242e:	d90b      	bls.n	1a002448 <Chip_SSP_RWFrames_Blocking+0x8e>
	return (pSSP->SR & Stat) ? SET : RESET;
1a002430:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a002432:	f012 0f02 	tst.w	r2, #2
1a002436:	d0ec      	beq.n	1a002412 <Chip_SSP_RWFrames_Blocking+0x58>
1a002438:	686a      	ldr	r2, [r5, #4]
1a00243a:	429a      	cmp	r2, r3
1a00243c:	d2e9      	bcs.n	1a002412 <Chip_SSP_RWFrames_Blocking+0x58>
				SSP_Write1BFifo(pSSP, xf_setup);
1a00243e:	4629      	mov	r1, r5
1a002440:	4620      	mov	r0, r4
1a002442:	f7ff ff4e 	bl	1a0022e2 <SSP_Write1BFifo>
1a002446:	e7e4      	b.n	1a002412 <Chip_SSP_RWFrames_Blocking+0x58>
		}
	}
	if (xf_setup->tx_data) {
1a002448:	682b      	ldr	r3, [r5, #0]
1a00244a:	b10b      	cbz	r3, 1a002450 <Chip_SSP_RWFrames_Blocking+0x96>
		return xf_setup->tx_cnt;
1a00244c:	6868      	ldr	r0, [r5, #4]
1a00244e:	e004      	b.n	1a00245a <Chip_SSP_RWFrames_Blocking+0xa0>
	}
	else if (xf_setup->rx_data) {
1a002450:	68ab      	ldr	r3, [r5, #8]
1a002452:	b12b      	cbz	r3, 1a002460 <Chip_SSP_RWFrames_Blocking+0xa6>
		return xf_setup->rx_cnt;
1a002454:	68e8      	ldr	r0, [r5, #12]
1a002456:	e000      	b.n	1a00245a <Chip_SSP_RWFrames_Blocking+0xa0>
				return ERROR;
1a002458:	2000      	movs	r0, #0
	}

	return 0;
}
1a00245a:	bd38      	pop	{r3, r4, r5, pc}
				return ERROR;
1a00245c:	2000      	movs	r0, #0
1a00245e:	e7fc      	b.n	1a00245a <Chip_SSP_RWFrames_Blocking+0xa0>
	return 0;
1a002460:	2000      	movs	r0, #0
1a002462:	e7fa      	b.n	1a00245a <Chip_SSP_RWFrames_Blocking+0xa0>

1a002464 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a002464:	b570      	push	{r4, r5, r6, lr}
1a002466:	4606      	mov	r6, r0
1a002468:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00246a:	f7ff ff91 	bl	1a002390 <Chip_SSP_GetPeriphClockIndex>
1a00246e:	f7ff fdf1 	bl	1a002054 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a002472:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a002474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a002478:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a00247a:	e000      	b.n	1a00247e <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a00247c:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a00247e:	42ab      	cmp	r3, r5
1a002480:	d90b      	bls.n	1a00249a <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a002482:	1c4c      	adds	r4, r1, #1
1a002484:	fb02 f304 	mul.w	r3, r2, r4
1a002488:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00248c:	429d      	cmp	r5, r3
1a00248e:	d2f6      	bcs.n	1a00247e <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a002490:	2cff      	cmp	r4, #255	; 0xff
1a002492:	d9f3      	bls.n	1a00247c <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a002494:	3202      	adds	r2, #2
				cr0_div = 0;
1a002496:	2100      	movs	r1, #0
1a002498:	e7f1      	b.n	1a00247e <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a00249a:	4630      	mov	r0, r6
1a00249c:	f7ff ff84 	bl	1a0023a8 <Chip_SSP_SetClockRate>
}
1a0024a0:	bd70      	pop	{r4, r5, r6, pc}
1a0024a2:	Address 0x000000001a0024a2 is out of bounds.


1a0024a4 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0024a4:	b510      	push	{r4, lr}
1a0024a6:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0024a8:	f7ff ff68 	bl	1a00237c <Chip_SSP_GetClockIndex>
1a0024ac:	f7ff fdb8 	bl	1a002020 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0024b0:	4620      	mov	r0, r4
1a0024b2:	f7ff ff6d 	bl	1a002390 <Chip_SSP_GetPeriphClockIndex>
1a0024b6:	f7ff fdb3 	bl	1a002020 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0024ba:	6863      	ldr	r3, [r4, #4]
1a0024bc:	f023 0304 	bic.w	r3, r3, #4
1a0024c0:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0024c2:	6823      	ldr	r3, [r4, #0]
1a0024c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0024c8:	f043 0307 	orr.w	r3, r3, #7
1a0024cc:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0024ce:	4902      	ldr	r1, [pc, #8]	; (1a0024d8 <Chip_SSP_Init+0x34>)
1a0024d0:	4620      	mov	r0, r4
1a0024d2:	f7ff ffc7 	bl	1a002464 <Chip_SSP_SetBitRate>
}
1a0024d6:	bd10      	pop	{r4, pc}
1a0024d8:	000186a0 	.word	0x000186a0

1a0024dc <ResetISR>:
void ResetISR(void) {
1a0024dc:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a0024de:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0024e0:	4b18      	ldr	r3, [pc, #96]	; (1a002544 <ResetISR+0x68>)
1a0024e2:	4a19      	ldr	r2, [pc, #100]	; (1a002548 <ResetISR+0x6c>)
1a0024e4:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0024e6:	3304      	adds	r3, #4
1a0024e8:	4a18      	ldr	r2, [pc, #96]	; (1a00254c <ResetISR+0x70>)
1a0024ea:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0024ec:	2300      	movs	r3, #0
1a0024ee:	e005      	b.n	1a0024fc <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0024f0:	4a17      	ldr	r2, [pc, #92]	; (1a002550 <ResetISR+0x74>)
1a0024f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0024f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0024fa:	3301      	adds	r3, #1
1a0024fc:	2b07      	cmp	r3, #7
1a0024fe:	d9f7      	bls.n	1a0024f0 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a002500:	b662      	cpsie	i
    SystemInit();
1a002502:	f7ff f97d 	bl	1a001800 <SystemInit>
    SectionTableAddr = &__data_section_table;
1a002506:	4b13      	ldr	r3, [pc, #76]	; (1a002554 <ResetISR+0x78>)
    while (SectionTableAddr < &__data_section_table_end) {
1a002508:	e007      	b.n	1a00251a <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a00250a:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00250e:	689a      	ldr	r2, [r3, #8]
1a002510:	6859      	ldr	r1, [r3, #4]
1a002512:	6818      	ldr	r0, [r3, #0]
1a002514:	f7fd fe3f 	bl	1a000196 <data_init>
        SectionLen = *SectionTableAddr++;
1a002518:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00251a:	4a0f      	ldr	r2, [pc, #60]	; (1a002558 <ResetISR+0x7c>)
1a00251c:	4293      	cmp	r3, r2
1a00251e:	d3f4      	bcc.n	1a00250a <ResetISR+0x2e>
1a002520:	e006      	b.n	1a002530 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a002522:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a002524:	6859      	ldr	r1, [r3, #4]
1a002526:	f854 0b08 	ldr.w	r0, [r4], #8
1a00252a:	f7fd fe43 	bl	1a0001b4 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00252e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a002530:	4a0a      	ldr	r2, [pc, #40]	; (1a00255c <ResetISR+0x80>)
1a002532:	4293      	cmp	r3, r2
1a002534:	d3f5      	bcc.n	1a002522 <ResetISR+0x46>
    __libc_init_array();
1a002536:	f000 fd63 	bl	1a003000 <__libc_init_array>
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a00253a:	f7ff f8e1 	bl	1a001700 <Board_Init>
    main();
1a00253e:	f7fe fb71 	bl	1a000c24 <main>
1a002542:	e7fe      	b.n	1a002542 <ResetISR+0x66>
1a002544:	40053100 	.word	0x40053100
1a002548:	10df1000 	.word	0x10df1000
1a00254c:	01dff7ff 	.word	0x01dff7ff
1a002550:	e000e280 	.word	0xe000e280
1a002554:	1a000114 	.word	0x1a000114
1a002558:	1a000150 	.word	0x1a000150
1a00255c:	1a000178 	.word	0x1a000178

1a002560 <_init>:
void _init(void) {}
1a002560:	4770      	bx	lr
1a002562:	Address 0x000000001a002562 is out of bounds.


1a002564 <__aeabi_drsub>:
1a002564:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a002568:	e002      	b.n	1a002570 <__adddf3>
1a00256a:	bf00      	nop

1a00256c <__aeabi_dsub>:
1a00256c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a002570 <__adddf3>:
1a002570:	b530      	push	{r4, r5, lr}
1a002572:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a002576:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a00257a:	ea94 0f05 	teq	r4, r5
1a00257e:	bf08      	it	eq
1a002580:	ea90 0f02 	teqeq	r0, r2
1a002584:	bf1f      	itttt	ne
1a002586:	ea54 0c00 	orrsne.w	ip, r4, r0
1a00258a:	ea55 0c02 	orrsne.w	ip, r5, r2
1a00258e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a002592:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a002596:	f000 80e2 	beq.w	1a00275e <__adddf3+0x1ee>
1a00259a:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a00259e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a0025a2:	bfb8      	it	lt
1a0025a4:	426d      	neglt	r5, r5
1a0025a6:	dd0c      	ble.n	1a0025c2 <__adddf3+0x52>
1a0025a8:	442c      	add	r4, r5
1a0025aa:	ea80 0202 	eor.w	r2, r0, r2
1a0025ae:	ea81 0303 	eor.w	r3, r1, r3
1a0025b2:	ea82 0000 	eor.w	r0, r2, r0
1a0025b6:	ea83 0101 	eor.w	r1, r3, r1
1a0025ba:	ea80 0202 	eor.w	r2, r0, r2
1a0025be:	ea81 0303 	eor.w	r3, r1, r3
1a0025c2:	2d36      	cmp	r5, #54	; 0x36
1a0025c4:	bf88      	it	hi
1a0025c6:	bd30      	pophi	{r4, r5, pc}
1a0025c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a0025cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a0025d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a0025d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a0025d8:	d002      	beq.n	1a0025e0 <__adddf3+0x70>
1a0025da:	4240      	negs	r0, r0
1a0025dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0025e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a0025e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a0025e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a0025ec:	d002      	beq.n	1a0025f4 <__adddf3+0x84>
1a0025ee:	4252      	negs	r2, r2
1a0025f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0025f4:	ea94 0f05 	teq	r4, r5
1a0025f8:	f000 80a7 	beq.w	1a00274a <__adddf3+0x1da>
1a0025fc:	f1a4 0401 	sub.w	r4, r4, #1
1a002600:	f1d5 0e20 	rsbs	lr, r5, #32
1a002604:	db0d      	blt.n	1a002622 <__adddf3+0xb2>
1a002606:	fa02 fc0e 	lsl.w	ip, r2, lr
1a00260a:	fa22 f205 	lsr.w	r2, r2, r5
1a00260e:	1880      	adds	r0, r0, r2
1a002610:	f141 0100 	adc.w	r1, r1, #0
1a002614:	fa03 f20e 	lsl.w	r2, r3, lr
1a002618:	1880      	adds	r0, r0, r2
1a00261a:	fa43 f305 	asr.w	r3, r3, r5
1a00261e:	4159      	adcs	r1, r3
1a002620:	e00e      	b.n	1a002640 <__adddf3+0xd0>
1a002622:	f1a5 0520 	sub.w	r5, r5, #32
1a002626:	f10e 0e20 	add.w	lr, lr, #32
1a00262a:	2a01      	cmp	r2, #1
1a00262c:	fa03 fc0e 	lsl.w	ip, r3, lr
1a002630:	bf28      	it	cs
1a002632:	f04c 0c02 	orrcs.w	ip, ip, #2
1a002636:	fa43 f305 	asr.w	r3, r3, r5
1a00263a:	18c0      	adds	r0, r0, r3
1a00263c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a002640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002644:	d507      	bpl.n	1a002656 <__adddf3+0xe6>
1a002646:	f04f 0e00 	mov.w	lr, #0
1a00264a:	f1dc 0c00 	rsbs	ip, ip, #0
1a00264e:	eb7e 0000 	sbcs.w	r0, lr, r0
1a002652:	eb6e 0101 	sbc.w	r1, lr, r1
1a002656:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a00265a:	d31b      	bcc.n	1a002694 <__adddf3+0x124>
1a00265c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a002660:	d30c      	bcc.n	1a00267c <__adddf3+0x10c>
1a002662:	0849      	lsrs	r1, r1, #1
1a002664:	ea5f 0030 	movs.w	r0, r0, rrx
1a002668:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a00266c:	f104 0401 	add.w	r4, r4, #1
1a002670:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a002674:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a002678:	f080 809a 	bcs.w	1a0027b0 <__adddf3+0x240>
1a00267c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a002680:	bf08      	it	eq
1a002682:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a002686:	f150 0000 	adcs.w	r0, r0, #0
1a00268a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00268e:	ea41 0105 	orr.w	r1, r1, r5
1a002692:	bd30      	pop	{r4, r5, pc}
1a002694:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a002698:	4140      	adcs	r0, r0
1a00269a:	eb41 0101 	adc.w	r1, r1, r1
1a00269e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0026a2:	f1a4 0401 	sub.w	r4, r4, #1
1a0026a6:	d1e9      	bne.n	1a00267c <__adddf3+0x10c>
1a0026a8:	f091 0f00 	teq	r1, #0
1a0026ac:	bf04      	itt	eq
1a0026ae:	4601      	moveq	r1, r0
1a0026b0:	2000      	moveq	r0, #0
1a0026b2:	fab1 f381 	clz	r3, r1
1a0026b6:	bf08      	it	eq
1a0026b8:	3320      	addeq	r3, #32
1a0026ba:	f1a3 030b 	sub.w	r3, r3, #11
1a0026be:	f1b3 0220 	subs.w	r2, r3, #32
1a0026c2:	da0c      	bge.n	1a0026de <__adddf3+0x16e>
1a0026c4:	320c      	adds	r2, #12
1a0026c6:	dd08      	ble.n	1a0026da <__adddf3+0x16a>
1a0026c8:	f102 0c14 	add.w	ip, r2, #20
1a0026cc:	f1c2 020c 	rsb	r2, r2, #12
1a0026d0:	fa01 f00c 	lsl.w	r0, r1, ip
1a0026d4:	fa21 f102 	lsr.w	r1, r1, r2
1a0026d8:	e00c      	b.n	1a0026f4 <__adddf3+0x184>
1a0026da:	f102 0214 	add.w	r2, r2, #20
1a0026de:	bfd8      	it	le
1a0026e0:	f1c2 0c20 	rsble	ip, r2, #32
1a0026e4:	fa01 f102 	lsl.w	r1, r1, r2
1a0026e8:	fa20 fc0c 	lsr.w	ip, r0, ip
1a0026ec:	bfdc      	itt	le
1a0026ee:	ea41 010c 	orrle.w	r1, r1, ip
1a0026f2:	4090      	lslle	r0, r2
1a0026f4:	1ae4      	subs	r4, r4, r3
1a0026f6:	bfa2      	ittt	ge
1a0026f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a0026fc:	4329      	orrge	r1, r5
1a0026fe:	bd30      	popge	{r4, r5, pc}
1a002700:	ea6f 0404 	mvn.w	r4, r4
1a002704:	3c1f      	subs	r4, #31
1a002706:	da1c      	bge.n	1a002742 <__adddf3+0x1d2>
1a002708:	340c      	adds	r4, #12
1a00270a:	dc0e      	bgt.n	1a00272a <__adddf3+0x1ba>
1a00270c:	f104 0414 	add.w	r4, r4, #20
1a002710:	f1c4 0220 	rsb	r2, r4, #32
1a002714:	fa20 f004 	lsr.w	r0, r0, r4
1a002718:	fa01 f302 	lsl.w	r3, r1, r2
1a00271c:	ea40 0003 	orr.w	r0, r0, r3
1a002720:	fa21 f304 	lsr.w	r3, r1, r4
1a002724:	ea45 0103 	orr.w	r1, r5, r3
1a002728:	bd30      	pop	{r4, r5, pc}
1a00272a:	f1c4 040c 	rsb	r4, r4, #12
1a00272e:	f1c4 0220 	rsb	r2, r4, #32
1a002732:	fa20 f002 	lsr.w	r0, r0, r2
1a002736:	fa01 f304 	lsl.w	r3, r1, r4
1a00273a:	ea40 0003 	orr.w	r0, r0, r3
1a00273e:	4629      	mov	r1, r5
1a002740:	bd30      	pop	{r4, r5, pc}
1a002742:	fa21 f004 	lsr.w	r0, r1, r4
1a002746:	4629      	mov	r1, r5
1a002748:	bd30      	pop	{r4, r5, pc}
1a00274a:	f094 0f00 	teq	r4, #0
1a00274e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a002752:	bf06      	itte	eq
1a002754:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a002758:	3401      	addeq	r4, #1
1a00275a:	3d01      	subne	r5, #1
1a00275c:	e74e      	b.n	1a0025fc <__adddf3+0x8c>
1a00275e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a002762:	bf18      	it	ne
1a002764:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a002768:	d029      	beq.n	1a0027be <__adddf3+0x24e>
1a00276a:	ea94 0f05 	teq	r4, r5
1a00276e:	bf08      	it	eq
1a002770:	ea90 0f02 	teqeq	r0, r2
1a002774:	d005      	beq.n	1a002782 <__adddf3+0x212>
1a002776:	ea54 0c00 	orrs.w	ip, r4, r0
1a00277a:	bf04      	itt	eq
1a00277c:	4619      	moveq	r1, r3
1a00277e:	4610      	moveq	r0, r2
1a002780:	bd30      	pop	{r4, r5, pc}
1a002782:	ea91 0f03 	teq	r1, r3
1a002786:	bf1e      	ittt	ne
1a002788:	2100      	movne	r1, #0
1a00278a:	2000      	movne	r0, #0
1a00278c:	bd30      	popne	{r4, r5, pc}
1a00278e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a002792:	d105      	bne.n	1a0027a0 <__adddf3+0x230>
1a002794:	0040      	lsls	r0, r0, #1
1a002796:	4149      	adcs	r1, r1
1a002798:	bf28      	it	cs
1a00279a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a00279e:	bd30      	pop	{r4, r5, pc}
1a0027a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a0027a4:	bf3c      	itt	cc
1a0027a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a0027aa:	bd30      	popcc	{r4, r5, pc}
1a0027ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0027b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a0027b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0027b8:	f04f 0000 	mov.w	r0, #0
1a0027bc:	bd30      	pop	{r4, r5, pc}
1a0027be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0027c2:	bf1a      	itte	ne
1a0027c4:	4619      	movne	r1, r3
1a0027c6:	4610      	movne	r0, r2
1a0027c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a0027cc:	bf1c      	itt	ne
1a0027ce:	460b      	movne	r3, r1
1a0027d0:	4602      	movne	r2, r0
1a0027d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0027d6:	bf06      	itte	eq
1a0027d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a0027dc:	ea91 0f03 	teqeq	r1, r3
1a0027e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a0027e4:	bd30      	pop	{r4, r5, pc}
1a0027e6:	bf00      	nop

1a0027e8 <__aeabi_ui2d>:
1a0027e8:	f090 0f00 	teq	r0, #0
1a0027ec:	bf04      	itt	eq
1a0027ee:	2100      	moveq	r1, #0
1a0027f0:	4770      	bxeq	lr
1a0027f2:	b530      	push	{r4, r5, lr}
1a0027f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0027f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0027fc:	f04f 0500 	mov.w	r5, #0
1a002800:	f04f 0100 	mov.w	r1, #0
1a002804:	e750      	b.n	1a0026a8 <__adddf3+0x138>
1a002806:	bf00      	nop

1a002808 <__aeabi_i2d>:
1a002808:	f090 0f00 	teq	r0, #0
1a00280c:	bf04      	itt	eq
1a00280e:	2100      	moveq	r1, #0
1a002810:	4770      	bxeq	lr
1a002812:	b530      	push	{r4, r5, lr}
1a002814:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a002818:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a00281c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a002820:	bf48      	it	mi
1a002822:	4240      	negmi	r0, r0
1a002824:	f04f 0100 	mov.w	r1, #0
1a002828:	e73e      	b.n	1a0026a8 <__adddf3+0x138>
1a00282a:	bf00      	nop

1a00282c <__aeabi_f2d>:
1a00282c:	0042      	lsls	r2, r0, #1
1a00282e:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a002832:	ea4f 0131 	mov.w	r1, r1, rrx
1a002836:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a00283a:	bf1f      	itttt	ne
1a00283c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a002840:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a002844:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a002848:	4770      	bxne	lr
1a00284a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a00284e:	bf08      	it	eq
1a002850:	4770      	bxeq	lr
1a002852:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a002856:	bf04      	itt	eq
1a002858:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a00285c:	4770      	bxeq	lr
1a00285e:	b530      	push	{r4, r5, lr}
1a002860:	f44f 7460 	mov.w	r4, #896	; 0x380
1a002864:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a002868:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a00286c:	e71c      	b.n	1a0026a8 <__adddf3+0x138>
1a00286e:	bf00      	nop

1a002870 <__aeabi_ul2d>:
1a002870:	ea50 0201 	orrs.w	r2, r0, r1
1a002874:	bf08      	it	eq
1a002876:	4770      	bxeq	lr
1a002878:	b530      	push	{r4, r5, lr}
1a00287a:	f04f 0500 	mov.w	r5, #0
1a00287e:	e00a      	b.n	1a002896 <__aeabi_l2d+0x16>

1a002880 <__aeabi_l2d>:
1a002880:	ea50 0201 	orrs.w	r2, r0, r1
1a002884:	bf08      	it	eq
1a002886:	4770      	bxeq	lr
1a002888:	b530      	push	{r4, r5, lr}
1a00288a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a00288e:	d502      	bpl.n	1a002896 <__aeabi_l2d+0x16>
1a002890:	4240      	negs	r0, r0
1a002892:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002896:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a00289a:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a00289e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a0028a2:	f43f aed8 	beq.w	1a002656 <__adddf3+0xe6>
1a0028a6:	f04f 0203 	mov.w	r2, #3
1a0028aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0028ae:	bf18      	it	ne
1a0028b0:	3203      	addne	r2, #3
1a0028b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0028b6:	bf18      	it	ne
1a0028b8:	3203      	addne	r2, #3
1a0028ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a0028be:	f1c2 0320 	rsb	r3, r2, #32
1a0028c2:	fa00 fc03 	lsl.w	ip, r0, r3
1a0028c6:	fa20 f002 	lsr.w	r0, r0, r2
1a0028ca:	fa01 fe03 	lsl.w	lr, r1, r3
1a0028ce:	ea40 000e 	orr.w	r0, r0, lr
1a0028d2:	fa21 f102 	lsr.w	r1, r1, r2
1a0028d6:	4414      	add	r4, r2
1a0028d8:	e6bd      	b.n	1a002656 <__adddf3+0xe6>
1a0028da:	bf00      	nop

1a0028dc <__aeabi_uldivmod>:
1a0028dc:	b953      	cbnz	r3, 1a0028f4 <__aeabi_uldivmod+0x18>
1a0028de:	b94a      	cbnz	r2, 1a0028f4 <__aeabi_uldivmod+0x18>
1a0028e0:	2900      	cmp	r1, #0
1a0028e2:	bf08      	it	eq
1a0028e4:	2800      	cmpeq	r0, #0
1a0028e6:	bf1c      	itt	ne
1a0028e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0028ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0028f0:	f000 b972 	b.w	1a002bd8 <__aeabi_idiv0>
1a0028f4:	f1ad 0c08 	sub.w	ip, sp, #8
1a0028f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0028fc:	f000 f806 	bl	1a00290c <__udivmoddi4>
1a002900:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002908:	b004      	add	sp, #16
1a00290a:	4770      	bx	lr

1a00290c <__udivmoddi4>:
1a00290c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002910:	9e08      	ldr	r6, [sp, #32]
1a002912:	4604      	mov	r4, r0
1a002914:	4688      	mov	r8, r1
1a002916:	2b00      	cmp	r3, #0
1a002918:	d14b      	bne.n	1a0029b2 <__udivmoddi4+0xa6>
1a00291a:	428a      	cmp	r2, r1
1a00291c:	4615      	mov	r5, r2
1a00291e:	d967      	bls.n	1a0029f0 <__udivmoddi4+0xe4>
1a002920:	fab2 f282 	clz	r2, r2
1a002924:	b14a      	cbz	r2, 1a00293a <__udivmoddi4+0x2e>
1a002926:	f1c2 0720 	rsb	r7, r2, #32
1a00292a:	fa01 f302 	lsl.w	r3, r1, r2
1a00292e:	fa20 f707 	lsr.w	r7, r0, r7
1a002932:	4095      	lsls	r5, r2
1a002934:	ea47 0803 	orr.w	r8, r7, r3
1a002938:	4094      	lsls	r4, r2
1a00293a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00293e:	0c23      	lsrs	r3, r4, #16
1a002940:	fbb8 f7fe 	udiv	r7, r8, lr
1a002944:	fa1f fc85 	uxth.w	ip, r5
1a002948:	fb0e 8817 	mls	r8, lr, r7, r8
1a00294c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002950:	fb07 f10c 	mul.w	r1, r7, ip
1a002954:	4299      	cmp	r1, r3
1a002956:	d909      	bls.n	1a00296c <__udivmoddi4+0x60>
1a002958:	18eb      	adds	r3, r5, r3
1a00295a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a00295e:	f080 811b 	bcs.w	1a002b98 <__udivmoddi4+0x28c>
1a002962:	4299      	cmp	r1, r3
1a002964:	f240 8118 	bls.w	1a002b98 <__udivmoddi4+0x28c>
1a002968:	3f02      	subs	r7, #2
1a00296a:	442b      	add	r3, r5
1a00296c:	1a5b      	subs	r3, r3, r1
1a00296e:	b2a4      	uxth	r4, r4
1a002970:	fbb3 f0fe 	udiv	r0, r3, lr
1a002974:	fb0e 3310 	mls	r3, lr, r0, r3
1a002978:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00297c:	fb00 fc0c 	mul.w	ip, r0, ip
1a002980:	45a4      	cmp	ip, r4
1a002982:	d909      	bls.n	1a002998 <__udivmoddi4+0x8c>
1a002984:	192c      	adds	r4, r5, r4
1a002986:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00298a:	f080 8107 	bcs.w	1a002b9c <__udivmoddi4+0x290>
1a00298e:	45a4      	cmp	ip, r4
1a002990:	f240 8104 	bls.w	1a002b9c <__udivmoddi4+0x290>
1a002994:	3802      	subs	r0, #2
1a002996:	442c      	add	r4, r5
1a002998:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a00299c:	eba4 040c 	sub.w	r4, r4, ip
1a0029a0:	2700      	movs	r7, #0
1a0029a2:	b11e      	cbz	r6, 1a0029ac <__udivmoddi4+0xa0>
1a0029a4:	40d4      	lsrs	r4, r2
1a0029a6:	2300      	movs	r3, #0
1a0029a8:	e9c6 4300 	strd	r4, r3, [r6]
1a0029ac:	4639      	mov	r1, r7
1a0029ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0029b2:	428b      	cmp	r3, r1
1a0029b4:	d909      	bls.n	1a0029ca <__udivmoddi4+0xbe>
1a0029b6:	2e00      	cmp	r6, #0
1a0029b8:	f000 80eb 	beq.w	1a002b92 <__udivmoddi4+0x286>
1a0029bc:	2700      	movs	r7, #0
1a0029be:	e9c6 0100 	strd	r0, r1, [r6]
1a0029c2:	4638      	mov	r0, r7
1a0029c4:	4639      	mov	r1, r7
1a0029c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0029ca:	fab3 f783 	clz	r7, r3
1a0029ce:	2f00      	cmp	r7, #0
1a0029d0:	d147      	bne.n	1a002a62 <__udivmoddi4+0x156>
1a0029d2:	428b      	cmp	r3, r1
1a0029d4:	d302      	bcc.n	1a0029dc <__udivmoddi4+0xd0>
1a0029d6:	4282      	cmp	r2, r0
1a0029d8:	f200 80fa 	bhi.w	1a002bd0 <__udivmoddi4+0x2c4>
1a0029dc:	1a84      	subs	r4, r0, r2
1a0029de:	eb61 0303 	sbc.w	r3, r1, r3
1a0029e2:	2001      	movs	r0, #1
1a0029e4:	4698      	mov	r8, r3
1a0029e6:	2e00      	cmp	r6, #0
1a0029e8:	d0e0      	beq.n	1a0029ac <__udivmoddi4+0xa0>
1a0029ea:	e9c6 4800 	strd	r4, r8, [r6]
1a0029ee:	e7dd      	b.n	1a0029ac <__udivmoddi4+0xa0>
1a0029f0:	b902      	cbnz	r2, 1a0029f4 <__udivmoddi4+0xe8>
1a0029f2:	deff      	udf	#255	; 0xff
1a0029f4:	fab2 f282 	clz	r2, r2
1a0029f8:	2a00      	cmp	r2, #0
1a0029fa:	f040 808f 	bne.w	1a002b1c <__udivmoddi4+0x210>
1a0029fe:	1b49      	subs	r1, r1, r5
1a002a00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002a04:	fa1f f885 	uxth.w	r8, r5
1a002a08:	2701      	movs	r7, #1
1a002a0a:	fbb1 fcfe 	udiv	ip, r1, lr
1a002a0e:	0c23      	lsrs	r3, r4, #16
1a002a10:	fb0e 111c 	mls	r1, lr, ip, r1
1a002a14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002a18:	fb08 f10c 	mul.w	r1, r8, ip
1a002a1c:	4299      	cmp	r1, r3
1a002a1e:	d907      	bls.n	1a002a30 <__udivmoddi4+0x124>
1a002a20:	18eb      	adds	r3, r5, r3
1a002a22:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a002a26:	d202      	bcs.n	1a002a2e <__udivmoddi4+0x122>
1a002a28:	4299      	cmp	r1, r3
1a002a2a:	f200 80cd 	bhi.w	1a002bc8 <__udivmoddi4+0x2bc>
1a002a2e:	4684      	mov	ip, r0
1a002a30:	1a59      	subs	r1, r3, r1
1a002a32:	b2a3      	uxth	r3, r4
1a002a34:	fbb1 f0fe 	udiv	r0, r1, lr
1a002a38:	fb0e 1410 	mls	r4, lr, r0, r1
1a002a3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a002a40:	fb08 f800 	mul.w	r8, r8, r0
1a002a44:	45a0      	cmp	r8, r4
1a002a46:	d907      	bls.n	1a002a58 <__udivmoddi4+0x14c>
1a002a48:	192c      	adds	r4, r5, r4
1a002a4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002a4e:	d202      	bcs.n	1a002a56 <__udivmoddi4+0x14a>
1a002a50:	45a0      	cmp	r8, r4
1a002a52:	f200 80b6 	bhi.w	1a002bc2 <__udivmoddi4+0x2b6>
1a002a56:	4618      	mov	r0, r3
1a002a58:	eba4 0408 	sub.w	r4, r4, r8
1a002a5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a002a60:	e79f      	b.n	1a0029a2 <__udivmoddi4+0x96>
1a002a62:	f1c7 0c20 	rsb	ip, r7, #32
1a002a66:	40bb      	lsls	r3, r7
1a002a68:	fa22 fe0c 	lsr.w	lr, r2, ip
1a002a6c:	ea4e 0e03 	orr.w	lr, lr, r3
1a002a70:	fa01 f407 	lsl.w	r4, r1, r7
1a002a74:	fa20 f50c 	lsr.w	r5, r0, ip
1a002a78:	fa21 f30c 	lsr.w	r3, r1, ip
1a002a7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a002a80:	4325      	orrs	r5, r4
1a002a82:	fbb3 f9f8 	udiv	r9, r3, r8
1a002a86:	0c2c      	lsrs	r4, r5, #16
1a002a88:	fb08 3319 	mls	r3, r8, r9, r3
1a002a8c:	fa1f fa8e 	uxth.w	sl, lr
1a002a90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a002a94:	fb09 f40a 	mul.w	r4, r9, sl
1a002a98:	429c      	cmp	r4, r3
1a002a9a:	fa02 f207 	lsl.w	r2, r2, r7
1a002a9e:	fa00 f107 	lsl.w	r1, r0, r7
1a002aa2:	d90b      	bls.n	1a002abc <__udivmoddi4+0x1b0>
1a002aa4:	eb1e 0303 	adds.w	r3, lr, r3
1a002aa8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a002aac:	f080 8087 	bcs.w	1a002bbe <__udivmoddi4+0x2b2>
1a002ab0:	429c      	cmp	r4, r3
1a002ab2:	f240 8084 	bls.w	1a002bbe <__udivmoddi4+0x2b2>
1a002ab6:	f1a9 0902 	sub.w	r9, r9, #2
1a002aba:	4473      	add	r3, lr
1a002abc:	1b1b      	subs	r3, r3, r4
1a002abe:	b2ad      	uxth	r5, r5
1a002ac0:	fbb3 f0f8 	udiv	r0, r3, r8
1a002ac4:	fb08 3310 	mls	r3, r8, r0, r3
1a002ac8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a002acc:	fb00 fa0a 	mul.w	sl, r0, sl
1a002ad0:	45a2      	cmp	sl, r4
1a002ad2:	d908      	bls.n	1a002ae6 <__udivmoddi4+0x1da>
1a002ad4:	eb1e 0404 	adds.w	r4, lr, r4
1a002ad8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002adc:	d26b      	bcs.n	1a002bb6 <__udivmoddi4+0x2aa>
1a002ade:	45a2      	cmp	sl, r4
1a002ae0:	d969      	bls.n	1a002bb6 <__udivmoddi4+0x2aa>
1a002ae2:	3802      	subs	r0, #2
1a002ae4:	4474      	add	r4, lr
1a002ae6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a002aea:	fba0 8902 	umull	r8, r9, r0, r2
1a002aee:	eba4 040a 	sub.w	r4, r4, sl
1a002af2:	454c      	cmp	r4, r9
1a002af4:	46c2      	mov	sl, r8
1a002af6:	464b      	mov	r3, r9
1a002af8:	d354      	bcc.n	1a002ba4 <__udivmoddi4+0x298>
1a002afa:	d051      	beq.n	1a002ba0 <__udivmoddi4+0x294>
1a002afc:	2e00      	cmp	r6, #0
1a002afe:	d069      	beq.n	1a002bd4 <__udivmoddi4+0x2c8>
1a002b00:	ebb1 050a 	subs.w	r5, r1, sl
1a002b04:	eb64 0403 	sbc.w	r4, r4, r3
1a002b08:	fa04 fc0c 	lsl.w	ip, r4, ip
1a002b0c:	40fd      	lsrs	r5, r7
1a002b0e:	40fc      	lsrs	r4, r7
1a002b10:	ea4c 0505 	orr.w	r5, ip, r5
1a002b14:	e9c6 5400 	strd	r5, r4, [r6]
1a002b18:	2700      	movs	r7, #0
1a002b1a:	e747      	b.n	1a0029ac <__udivmoddi4+0xa0>
1a002b1c:	f1c2 0320 	rsb	r3, r2, #32
1a002b20:	fa20 f703 	lsr.w	r7, r0, r3
1a002b24:	4095      	lsls	r5, r2
1a002b26:	fa01 f002 	lsl.w	r0, r1, r2
1a002b2a:	fa21 f303 	lsr.w	r3, r1, r3
1a002b2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002b32:	4338      	orrs	r0, r7
1a002b34:	0c01      	lsrs	r1, r0, #16
1a002b36:	fbb3 f7fe 	udiv	r7, r3, lr
1a002b3a:	fa1f f885 	uxth.w	r8, r5
1a002b3e:	fb0e 3317 	mls	r3, lr, r7, r3
1a002b42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002b46:	fb07 f308 	mul.w	r3, r7, r8
1a002b4a:	428b      	cmp	r3, r1
1a002b4c:	fa04 f402 	lsl.w	r4, r4, r2
1a002b50:	d907      	bls.n	1a002b62 <__udivmoddi4+0x256>
1a002b52:	1869      	adds	r1, r5, r1
1a002b54:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a002b58:	d22f      	bcs.n	1a002bba <__udivmoddi4+0x2ae>
1a002b5a:	428b      	cmp	r3, r1
1a002b5c:	d92d      	bls.n	1a002bba <__udivmoddi4+0x2ae>
1a002b5e:	3f02      	subs	r7, #2
1a002b60:	4429      	add	r1, r5
1a002b62:	1acb      	subs	r3, r1, r3
1a002b64:	b281      	uxth	r1, r0
1a002b66:	fbb3 f0fe 	udiv	r0, r3, lr
1a002b6a:	fb0e 3310 	mls	r3, lr, r0, r3
1a002b6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002b72:	fb00 f308 	mul.w	r3, r0, r8
1a002b76:	428b      	cmp	r3, r1
1a002b78:	d907      	bls.n	1a002b8a <__udivmoddi4+0x27e>
1a002b7a:	1869      	adds	r1, r5, r1
1a002b7c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a002b80:	d217      	bcs.n	1a002bb2 <__udivmoddi4+0x2a6>
1a002b82:	428b      	cmp	r3, r1
1a002b84:	d915      	bls.n	1a002bb2 <__udivmoddi4+0x2a6>
1a002b86:	3802      	subs	r0, #2
1a002b88:	4429      	add	r1, r5
1a002b8a:	1ac9      	subs	r1, r1, r3
1a002b8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a002b90:	e73b      	b.n	1a002a0a <__udivmoddi4+0xfe>
1a002b92:	4637      	mov	r7, r6
1a002b94:	4630      	mov	r0, r6
1a002b96:	e709      	b.n	1a0029ac <__udivmoddi4+0xa0>
1a002b98:	4607      	mov	r7, r0
1a002b9a:	e6e7      	b.n	1a00296c <__udivmoddi4+0x60>
1a002b9c:	4618      	mov	r0, r3
1a002b9e:	e6fb      	b.n	1a002998 <__udivmoddi4+0x8c>
1a002ba0:	4541      	cmp	r1, r8
1a002ba2:	d2ab      	bcs.n	1a002afc <__udivmoddi4+0x1f0>
1a002ba4:	ebb8 0a02 	subs.w	sl, r8, r2
1a002ba8:	eb69 020e 	sbc.w	r2, r9, lr
1a002bac:	3801      	subs	r0, #1
1a002bae:	4613      	mov	r3, r2
1a002bb0:	e7a4      	b.n	1a002afc <__udivmoddi4+0x1f0>
1a002bb2:	4660      	mov	r0, ip
1a002bb4:	e7e9      	b.n	1a002b8a <__udivmoddi4+0x27e>
1a002bb6:	4618      	mov	r0, r3
1a002bb8:	e795      	b.n	1a002ae6 <__udivmoddi4+0x1da>
1a002bba:	4667      	mov	r7, ip
1a002bbc:	e7d1      	b.n	1a002b62 <__udivmoddi4+0x256>
1a002bbe:	4681      	mov	r9, r0
1a002bc0:	e77c      	b.n	1a002abc <__udivmoddi4+0x1b0>
1a002bc2:	3802      	subs	r0, #2
1a002bc4:	442c      	add	r4, r5
1a002bc6:	e747      	b.n	1a002a58 <__udivmoddi4+0x14c>
1a002bc8:	f1ac 0c02 	sub.w	ip, ip, #2
1a002bcc:	442b      	add	r3, r5
1a002bce:	e72f      	b.n	1a002a30 <__udivmoddi4+0x124>
1a002bd0:	4638      	mov	r0, r7
1a002bd2:	e708      	b.n	1a0029e6 <__udivmoddi4+0xda>
1a002bd4:	4637      	mov	r7, r6
1a002bd6:	e6e9      	b.n	1a0029ac <__udivmoddi4+0xa0>

1a002bd8 <__aeabi_idiv0>:
1a002bd8:	4770      	bx	lr
1a002bda:	bf00      	nop

1a002bdc <__aeabi_dmul>:
1a002bdc:	b570      	push	{r4, r5, r6, lr}
1a002bde:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002be2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002be6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002bea:	bf1d      	ittte	ne
1a002bec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002bf0:	ea94 0f0c 	teqne	r4, ip
1a002bf4:	ea95 0f0c 	teqne	r5, ip
1a002bf8:	f000 f8de 	bleq	1a002db8 <__aeabi_dmul+0x1dc>
1a002bfc:	442c      	add	r4, r5
1a002bfe:	ea81 0603 	eor.w	r6, r1, r3
1a002c02:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a002c06:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a002c0a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a002c0e:	bf18      	it	ne
1a002c10:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a002c14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002c18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a002c1c:	d038      	beq.n	1a002c90 <__aeabi_dmul+0xb4>
1a002c1e:	fba0 ce02 	umull	ip, lr, r0, r2
1a002c22:	f04f 0500 	mov.w	r5, #0
1a002c26:	fbe1 e502 	umlal	lr, r5, r1, r2
1a002c2a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a002c2e:	fbe0 e503 	umlal	lr, r5, r0, r3
1a002c32:	f04f 0600 	mov.w	r6, #0
1a002c36:	fbe1 5603 	umlal	r5, r6, r1, r3
1a002c3a:	f09c 0f00 	teq	ip, #0
1a002c3e:	bf18      	it	ne
1a002c40:	f04e 0e01 	orrne.w	lr, lr, #1
1a002c44:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a002c48:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a002c4c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a002c50:	d204      	bcs.n	1a002c5c <__aeabi_dmul+0x80>
1a002c52:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a002c56:	416d      	adcs	r5, r5
1a002c58:	eb46 0606 	adc.w	r6, r6, r6
1a002c5c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a002c60:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a002c64:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a002c68:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a002c6c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a002c70:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002c74:	bf88      	it	hi
1a002c76:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002c7a:	d81e      	bhi.n	1a002cba <__aeabi_dmul+0xde>
1a002c7c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a002c80:	bf08      	it	eq
1a002c82:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a002c86:	f150 0000 	adcs.w	r0, r0, #0
1a002c8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002c8e:	bd70      	pop	{r4, r5, r6, pc}
1a002c90:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a002c94:	ea46 0101 	orr.w	r1, r6, r1
1a002c98:	ea40 0002 	orr.w	r0, r0, r2
1a002c9c:	ea81 0103 	eor.w	r1, r1, r3
1a002ca0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a002ca4:	bfc2      	ittt	gt
1a002ca6:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002caa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002cae:	bd70      	popgt	{r4, r5, r6, pc}
1a002cb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002cb4:	f04f 0e00 	mov.w	lr, #0
1a002cb8:	3c01      	subs	r4, #1
1a002cba:	f300 80ab 	bgt.w	1a002e14 <__aeabi_dmul+0x238>
1a002cbe:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a002cc2:	bfde      	ittt	le
1a002cc4:	2000      	movle	r0, #0
1a002cc6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a002cca:	bd70      	pople	{r4, r5, r6, pc}
1a002ccc:	f1c4 0400 	rsb	r4, r4, #0
1a002cd0:	3c20      	subs	r4, #32
1a002cd2:	da35      	bge.n	1a002d40 <__aeabi_dmul+0x164>
1a002cd4:	340c      	adds	r4, #12
1a002cd6:	dc1b      	bgt.n	1a002d10 <__aeabi_dmul+0x134>
1a002cd8:	f104 0414 	add.w	r4, r4, #20
1a002cdc:	f1c4 0520 	rsb	r5, r4, #32
1a002ce0:	fa00 f305 	lsl.w	r3, r0, r5
1a002ce4:	fa20 f004 	lsr.w	r0, r0, r4
1a002ce8:	fa01 f205 	lsl.w	r2, r1, r5
1a002cec:	ea40 0002 	orr.w	r0, r0, r2
1a002cf0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a002cf4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a002cf8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002cfc:	fa21 f604 	lsr.w	r6, r1, r4
1a002d00:	eb42 0106 	adc.w	r1, r2, r6
1a002d04:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002d08:	bf08      	it	eq
1a002d0a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002d0e:	bd70      	pop	{r4, r5, r6, pc}
1a002d10:	f1c4 040c 	rsb	r4, r4, #12
1a002d14:	f1c4 0520 	rsb	r5, r4, #32
1a002d18:	fa00 f304 	lsl.w	r3, r0, r4
1a002d1c:	fa20 f005 	lsr.w	r0, r0, r5
1a002d20:	fa01 f204 	lsl.w	r2, r1, r4
1a002d24:	ea40 0002 	orr.w	r0, r0, r2
1a002d28:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002d2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a002d30:	f141 0100 	adc.w	r1, r1, #0
1a002d34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002d38:	bf08      	it	eq
1a002d3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002d3e:	bd70      	pop	{r4, r5, r6, pc}
1a002d40:	f1c4 0520 	rsb	r5, r4, #32
1a002d44:	fa00 f205 	lsl.w	r2, r0, r5
1a002d48:	ea4e 0e02 	orr.w	lr, lr, r2
1a002d4c:	fa20 f304 	lsr.w	r3, r0, r4
1a002d50:	fa01 f205 	lsl.w	r2, r1, r5
1a002d54:	ea43 0302 	orr.w	r3, r3, r2
1a002d58:	fa21 f004 	lsr.w	r0, r1, r4
1a002d5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002d60:	fa21 f204 	lsr.w	r2, r1, r4
1a002d64:	ea20 0002 	bic.w	r0, r0, r2
1a002d68:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a002d6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a002d70:	bf08      	it	eq
1a002d72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a002d76:	bd70      	pop	{r4, r5, r6, pc}
1a002d78:	f094 0f00 	teq	r4, #0
1a002d7c:	d10f      	bne.n	1a002d9e <__aeabi_dmul+0x1c2>
1a002d7e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a002d82:	0040      	lsls	r0, r0, #1
1a002d84:	eb41 0101 	adc.w	r1, r1, r1
1a002d88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002d8c:	bf08      	it	eq
1a002d8e:	3c01      	subeq	r4, #1
1a002d90:	d0f7      	beq.n	1a002d82 <__aeabi_dmul+0x1a6>
1a002d92:	ea41 0106 	orr.w	r1, r1, r6
1a002d96:	f095 0f00 	teq	r5, #0
1a002d9a:	bf18      	it	ne
1a002d9c:	4770      	bxne	lr
1a002d9e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a002da2:	0052      	lsls	r2, r2, #1
1a002da4:	eb43 0303 	adc.w	r3, r3, r3
1a002da8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a002dac:	bf08      	it	eq
1a002dae:	3d01      	subeq	r5, #1
1a002db0:	d0f7      	beq.n	1a002da2 <__aeabi_dmul+0x1c6>
1a002db2:	ea43 0306 	orr.w	r3, r3, r6
1a002db6:	4770      	bx	lr
1a002db8:	ea94 0f0c 	teq	r4, ip
1a002dbc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002dc0:	bf18      	it	ne
1a002dc2:	ea95 0f0c 	teqne	r5, ip
1a002dc6:	d00c      	beq.n	1a002de2 <__aeabi_dmul+0x206>
1a002dc8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002dcc:	bf18      	it	ne
1a002dce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002dd2:	d1d1      	bne.n	1a002d78 <__aeabi_dmul+0x19c>
1a002dd4:	ea81 0103 	eor.w	r1, r1, r3
1a002dd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002ddc:	f04f 0000 	mov.w	r0, #0
1a002de0:	bd70      	pop	{r4, r5, r6, pc}
1a002de2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002de6:	bf06      	itte	eq
1a002de8:	4610      	moveq	r0, r2
1a002dea:	4619      	moveq	r1, r3
1a002dec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002df0:	d019      	beq.n	1a002e26 <__aeabi_dmul+0x24a>
1a002df2:	ea94 0f0c 	teq	r4, ip
1a002df6:	d102      	bne.n	1a002dfe <__aeabi_dmul+0x222>
1a002df8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a002dfc:	d113      	bne.n	1a002e26 <__aeabi_dmul+0x24a>
1a002dfe:	ea95 0f0c 	teq	r5, ip
1a002e02:	d105      	bne.n	1a002e10 <__aeabi_dmul+0x234>
1a002e04:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a002e08:	bf1c      	itt	ne
1a002e0a:	4610      	movne	r0, r2
1a002e0c:	4619      	movne	r1, r3
1a002e0e:	d10a      	bne.n	1a002e26 <__aeabi_dmul+0x24a>
1a002e10:	ea81 0103 	eor.w	r1, r1, r3
1a002e14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a002e18:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002e1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002e20:	f04f 0000 	mov.w	r0, #0
1a002e24:	bd70      	pop	{r4, r5, r6, pc}
1a002e26:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a002e2a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a002e2e:	bd70      	pop	{r4, r5, r6, pc}

1a002e30 <__aeabi_ddiv>:
1a002e30:	b570      	push	{r4, r5, r6, lr}
1a002e32:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a002e36:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a002e3a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a002e3e:	bf1d      	ittte	ne
1a002e40:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a002e44:	ea94 0f0c 	teqne	r4, ip
1a002e48:	ea95 0f0c 	teqne	r5, ip
1a002e4c:	f000 f8a7 	bleq	1a002f9e <__aeabi_ddiv+0x16e>
1a002e50:	eba4 0405 	sub.w	r4, r4, r5
1a002e54:	ea81 0e03 	eor.w	lr, r1, r3
1a002e58:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002e5c:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a002e60:	f000 8088 	beq.w	1a002f74 <__aeabi_ddiv+0x144>
1a002e64:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a002e68:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a002e6c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a002e70:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a002e74:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a002e78:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a002e7c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a002e80:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a002e84:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a002e88:	429d      	cmp	r5, r3
1a002e8a:	bf08      	it	eq
1a002e8c:	4296      	cmpeq	r6, r2
1a002e8e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a002e92:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a002e96:	d202      	bcs.n	1a002e9e <__aeabi_ddiv+0x6e>
1a002e98:	085b      	lsrs	r3, r3, #1
1a002e9a:	ea4f 0232 	mov.w	r2, r2, rrx
1a002e9e:	1ab6      	subs	r6, r6, r2
1a002ea0:	eb65 0503 	sbc.w	r5, r5, r3
1a002ea4:	085b      	lsrs	r3, r3, #1
1a002ea6:	ea4f 0232 	mov.w	r2, r2, rrx
1a002eaa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a002eae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a002eb2:	ebb6 0e02 	subs.w	lr, r6, r2
1a002eb6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002eba:	bf22      	ittt	cs
1a002ebc:	1ab6      	subcs	r6, r6, r2
1a002ebe:	4675      	movcs	r5, lr
1a002ec0:	ea40 000c 	orrcs.w	r0, r0, ip
1a002ec4:	085b      	lsrs	r3, r3, #1
1a002ec6:	ea4f 0232 	mov.w	r2, r2, rrx
1a002eca:	ebb6 0e02 	subs.w	lr, r6, r2
1a002ece:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002ed2:	bf22      	ittt	cs
1a002ed4:	1ab6      	subcs	r6, r6, r2
1a002ed6:	4675      	movcs	r5, lr
1a002ed8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a002edc:	085b      	lsrs	r3, r3, #1
1a002ede:	ea4f 0232 	mov.w	r2, r2, rrx
1a002ee2:	ebb6 0e02 	subs.w	lr, r6, r2
1a002ee6:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002eea:	bf22      	ittt	cs
1a002eec:	1ab6      	subcs	r6, r6, r2
1a002eee:	4675      	movcs	r5, lr
1a002ef0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a002ef4:	085b      	lsrs	r3, r3, #1
1a002ef6:	ea4f 0232 	mov.w	r2, r2, rrx
1a002efa:	ebb6 0e02 	subs.w	lr, r6, r2
1a002efe:	eb75 0e03 	sbcs.w	lr, r5, r3
1a002f02:	bf22      	ittt	cs
1a002f04:	1ab6      	subcs	r6, r6, r2
1a002f06:	4675      	movcs	r5, lr
1a002f08:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a002f0c:	ea55 0e06 	orrs.w	lr, r5, r6
1a002f10:	d018      	beq.n	1a002f44 <__aeabi_ddiv+0x114>
1a002f12:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a002f16:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a002f1a:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a002f1e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a002f22:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a002f26:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a002f2a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a002f2e:	d1c0      	bne.n	1a002eb2 <__aeabi_ddiv+0x82>
1a002f30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002f34:	d10b      	bne.n	1a002f4e <__aeabi_ddiv+0x11e>
1a002f36:	ea41 0100 	orr.w	r1, r1, r0
1a002f3a:	f04f 0000 	mov.w	r0, #0
1a002f3e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a002f42:	e7b6      	b.n	1a002eb2 <__aeabi_ddiv+0x82>
1a002f44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a002f48:	bf04      	itt	eq
1a002f4a:	4301      	orreq	r1, r0
1a002f4c:	2000      	moveq	r0, #0
1a002f4e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a002f52:	bf88      	it	hi
1a002f54:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a002f58:	f63f aeaf 	bhi.w	1a002cba <__aeabi_dmul+0xde>
1a002f5c:	ebb5 0c03 	subs.w	ip, r5, r3
1a002f60:	bf04      	itt	eq
1a002f62:	ebb6 0c02 	subseq.w	ip, r6, r2
1a002f66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a002f6a:	f150 0000 	adcs.w	r0, r0, #0
1a002f6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a002f72:	bd70      	pop	{r4, r5, r6, pc}
1a002f74:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a002f78:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a002f7c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a002f80:	bfc2      	ittt	gt
1a002f82:	ebd4 050c 	rsbsgt	r5, r4, ip
1a002f86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a002f8a:	bd70      	popgt	{r4, r5, r6, pc}
1a002f8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a002f90:	f04f 0e00 	mov.w	lr, #0
1a002f94:	3c01      	subs	r4, #1
1a002f96:	e690      	b.n	1a002cba <__aeabi_dmul+0xde>
1a002f98:	ea45 0e06 	orr.w	lr, r5, r6
1a002f9c:	e68d      	b.n	1a002cba <__aeabi_dmul+0xde>
1a002f9e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a002fa2:	ea94 0f0c 	teq	r4, ip
1a002fa6:	bf08      	it	eq
1a002fa8:	ea95 0f0c 	teqeq	r5, ip
1a002fac:	f43f af3b 	beq.w	1a002e26 <__aeabi_dmul+0x24a>
1a002fb0:	ea94 0f0c 	teq	r4, ip
1a002fb4:	d10a      	bne.n	1a002fcc <__aeabi_ddiv+0x19c>
1a002fb6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a002fba:	f47f af34 	bne.w	1a002e26 <__aeabi_dmul+0x24a>
1a002fbe:	ea95 0f0c 	teq	r5, ip
1a002fc2:	f47f af25 	bne.w	1a002e10 <__aeabi_dmul+0x234>
1a002fc6:	4610      	mov	r0, r2
1a002fc8:	4619      	mov	r1, r3
1a002fca:	e72c      	b.n	1a002e26 <__aeabi_dmul+0x24a>
1a002fcc:	ea95 0f0c 	teq	r5, ip
1a002fd0:	d106      	bne.n	1a002fe0 <__aeabi_ddiv+0x1b0>
1a002fd2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a002fd6:	f43f aefd 	beq.w	1a002dd4 <__aeabi_dmul+0x1f8>
1a002fda:	4610      	mov	r0, r2
1a002fdc:	4619      	mov	r1, r3
1a002fde:	e722      	b.n	1a002e26 <__aeabi_dmul+0x24a>
1a002fe0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a002fe4:	bf18      	it	ne
1a002fe6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002fea:	f47f aec5 	bne.w	1a002d78 <__aeabi_dmul+0x19c>
1a002fee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a002ff2:	f47f af0d 	bne.w	1a002e10 <__aeabi_dmul+0x234>
1a002ff6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a002ffa:	f47f aeeb 	bne.w	1a002dd4 <__aeabi_dmul+0x1f8>
1a002ffe:	e712      	b.n	1a002e26 <__aeabi_dmul+0x24a>

1a003000 <__libc_init_array>:
1a003000:	b570      	push	{r4, r5, r6, lr}
1a003002:	4e0d      	ldr	r6, [pc, #52]	; (1a003038 <__libc_init_array+0x38>)
1a003004:	4d0d      	ldr	r5, [pc, #52]	; (1a00303c <__libc_init_array+0x3c>)
1a003006:	1b76      	subs	r6, r6, r5
1a003008:	10b6      	asrs	r6, r6, #2
1a00300a:	d006      	beq.n	1a00301a <__libc_init_array+0x1a>
1a00300c:	2400      	movs	r4, #0
1a00300e:	3401      	adds	r4, #1
1a003010:	f855 3b04 	ldr.w	r3, [r5], #4
1a003014:	4798      	blx	r3
1a003016:	42a6      	cmp	r6, r4
1a003018:	d1f9      	bne.n	1a00300e <__libc_init_array+0xe>
1a00301a:	4e09      	ldr	r6, [pc, #36]	; (1a003040 <__libc_init_array+0x40>)
1a00301c:	4d09      	ldr	r5, [pc, #36]	; (1a003044 <__libc_init_array+0x44>)
1a00301e:	1b76      	subs	r6, r6, r5
1a003020:	f7ff fa9e 	bl	1a002560 <_init>
1a003024:	10b6      	asrs	r6, r6, #2
1a003026:	d006      	beq.n	1a003036 <__libc_init_array+0x36>
1a003028:	2400      	movs	r4, #0
1a00302a:	3401      	adds	r4, #1
1a00302c:	f855 3b04 	ldr.w	r3, [r5], #4
1a003030:	4798      	blx	r3
1a003032:	42a6      	cmp	r6, r4
1a003034:	d1f9      	bne.n	1a00302a <__libc_init_array+0x2a>
1a003036:	bd70      	pop	{r4, r5, r6, pc}
1a003038:	1a008780 	.word	0x1a008780
1a00303c:	1a008780 	.word	0x1a008780
1a003040:	1a008780 	.word	0x1a008780
1a003044:	1a008780 	.word	0x1a008780

1a003048 <memcpy>:
1a003048:	4684      	mov	ip, r0
1a00304a:	ea41 0300 	orr.w	r3, r1, r0
1a00304e:	f013 0303 	ands.w	r3, r3, #3
1a003052:	d16d      	bne.n	1a003130 <memcpy+0xe8>
1a003054:	3a40      	subs	r2, #64	; 0x40
1a003056:	d341      	bcc.n	1a0030dc <memcpy+0x94>
1a003058:	f851 3b04 	ldr.w	r3, [r1], #4
1a00305c:	f840 3b04 	str.w	r3, [r0], #4
1a003060:	f851 3b04 	ldr.w	r3, [r1], #4
1a003064:	f840 3b04 	str.w	r3, [r0], #4
1a003068:	f851 3b04 	ldr.w	r3, [r1], #4
1a00306c:	f840 3b04 	str.w	r3, [r0], #4
1a003070:	f851 3b04 	ldr.w	r3, [r1], #4
1a003074:	f840 3b04 	str.w	r3, [r0], #4
1a003078:	f851 3b04 	ldr.w	r3, [r1], #4
1a00307c:	f840 3b04 	str.w	r3, [r0], #4
1a003080:	f851 3b04 	ldr.w	r3, [r1], #4
1a003084:	f840 3b04 	str.w	r3, [r0], #4
1a003088:	f851 3b04 	ldr.w	r3, [r1], #4
1a00308c:	f840 3b04 	str.w	r3, [r0], #4
1a003090:	f851 3b04 	ldr.w	r3, [r1], #4
1a003094:	f840 3b04 	str.w	r3, [r0], #4
1a003098:	f851 3b04 	ldr.w	r3, [r1], #4
1a00309c:	f840 3b04 	str.w	r3, [r0], #4
1a0030a0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0030a4:	f840 3b04 	str.w	r3, [r0], #4
1a0030a8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0030ac:	f840 3b04 	str.w	r3, [r0], #4
1a0030b0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0030b4:	f840 3b04 	str.w	r3, [r0], #4
1a0030b8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0030bc:	f840 3b04 	str.w	r3, [r0], #4
1a0030c0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0030c4:	f840 3b04 	str.w	r3, [r0], #4
1a0030c8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0030cc:	f840 3b04 	str.w	r3, [r0], #4
1a0030d0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0030d4:	f840 3b04 	str.w	r3, [r0], #4
1a0030d8:	3a40      	subs	r2, #64	; 0x40
1a0030da:	d2bd      	bcs.n	1a003058 <memcpy+0x10>
1a0030dc:	3230      	adds	r2, #48	; 0x30
1a0030de:	d311      	bcc.n	1a003104 <memcpy+0xbc>
1a0030e0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0030e4:	f840 3b04 	str.w	r3, [r0], #4
1a0030e8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0030ec:	f840 3b04 	str.w	r3, [r0], #4
1a0030f0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0030f4:	f840 3b04 	str.w	r3, [r0], #4
1a0030f8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0030fc:	f840 3b04 	str.w	r3, [r0], #4
1a003100:	3a10      	subs	r2, #16
1a003102:	d2ed      	bcs.n	1a0030e0 <memcpy+0x98>
1a003104:	320c      	adds	r2, #12
1a003106:	d305      	bcc.n	1a003114 <memcpy+0xcc>
1a003108:	f851 3b04 	ldr.w	r3, [r1], #4
1a00310c:	f840 3b04 	str.w	r3, [r0], #4
1a003110:	3a04      	subs	r2, #4
1a003112:	d2f9      	bcs.n	1a003108 <memcpy+0xc0>
1a003114:	3204      	adds	r2, #4
1a003116:	d008      	beq.n	1a00312a <memcpy+0xe2>
1a003118:	07d2      	lsls	r2, r2, #31
1a00311a:	bf1c      	itt	ne
1a00311c:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a003120:	f800 3b01 	strbne.w	r3, [r0], #1
1a003124:	d301      	bcc.n	1a00312a <memcpy+0xe2>
1a003126:	880b      	ldrh	r3, [r1, #0]
1a003128:	8003      	strh	r3, [r0, #0]
1a00312a:	4660      	mov	r0, ip
1a00312c:	4770      	bx	lr
1a00312e:	bf00      	nop
1a003130:	2a08      	cmp	r2, #8
1a003132:	d313      	bcc.n	1a00315c <memcpy+0x114>
1a003134:	078b      	lsls	r3, r1, #30
1a003136:	d08d      	beq.n	1a003054 <memcpy+0xc>
1a003138:	f010 0303 	ands.w	r3, r0, #3
1a00313c:	d08a      	beq.n	1a003054 <memcpy+0xc>
1a00313e:	f1c3 0304 	rsb	r3, r3, #4
1a003142:	1ad2      	subs	r2, r2, r3
1a003144:	07db      	lsls	r3, r3, #31
1a003146:	bf1c      	itt	ne
1a003148:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a00314c:	f800 3b01 	strbne.w	r3, [r0], #1
1a003150:	d380      	bcc.n	1a003054 <memcpy+0xc>
1a003152:	f831 3b02 	ldrh.w	r3, [r1], #2
1a003156:	f820 3b02 	strh.w	r3, [r0], #2
1a00315a:	e77b      	b.n	1a003054 <memcpy+0xc>
1a00315c:	3a04      	subs	r2, #4
1a00315e:	d3d9      	bcc.n	1a003114 <memcpy+0xcc>
1a003160:	3a01      	subs	r2, #1
1a003162:	f811 3b01 	ldrb.w	r3, [r1], #1
1a003166:	f800 3b01 	strb.w	r3, [r0], #1
1a00316a:	d2f9      	bcs.n	1a003160 <memcpy+0x118>
1a00316c:	780b      	ldrb	r3, [r1, #0]
1a00316e:	7003      	strb	r3, [r0, #0]
1a003170:	784b      	ldrb	r3, [r1, #1]
1a003172:	7043      	strb	r3, [r0, #1]
1a003174:	788b      	ldrb	r3, [r1, #2]
1a003176:	7083      	strb	r3, [r0, #2]
1a003178:	4660      	mov	r0, ip
1a00317a:	4770      	bx	lr

1a00317c <memset>:
1a00317c:	b4f0      	push	{r4, r5, r6, r7}
1a00317e:	0786      	lsls	r6, r0, #30
1a003180:	d043      	beq.n	1a00320a <memset+0x8e>
1a003182:	1e54      	subs	r4, r2, #1
1a003184:	2a00      	cmp	r2, #0
1a003186:	d03e      	beq.n	1a003206 <memset+0x8a>
1a003188:	b2ca      	uxtb	r2, r1
1a00318a:	4603      	mov	r3, r0
1a00318c:	e002      	b.n	1a003194 <memset+0x18>
1a00318e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
1a003192:	d338      	bcc.n	1a003206 <memset+0x8a>
1a003194:	f803 2b01 	strb.w	r2, [r3], #1
1a003198:	079d      	lsls	r5, r3, #30
1a00319a:	d1f8      	bne.n	1a00318e <memset+0x12>
1a00319c:	2c03      	cmp	r4, #3
1a00319e:	d92b      	bls.n	1a0031f8 <memset+0x7c>
1a0031a0:	b2cd      	uxtb	r5, r1
1a0031a2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a0031a6:	2c0f      	cmp	r4, #15
1a0031a8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a0031ac:	d916      	bls.n	1a0031dc <memset+0x60>
1a0031ae:	f1a4 0710 	sub.w	r7, r4, #16
1a0031b2:	093f      	lsrs	r7, r7, #4
1a0031b4:	f103 0620 	add.w	r6, r3, #32
1a0031b8:	eb06 1607 	add.w	r6, r6, r7, lsl #4
1a0031bc:	f103 0210 	add.w	r2, r3, #16
1a0031c0:	e942 5504 	strd	r5, r5, [r2, #-16]
1a0031c4:	e942 5502 	strd	r5, r5, [r2, #-8]
1a0031c8:	3210      	adds	r2, #16
1a0031ca:	42b2      	cmp	r2, r6
1a0031cc:	d1f8      	bne.n	1a0031c0 <memset+0x44>
1a0031ce:	f004 040f 	and.w	r4, r4, #15
1a0031d2:	3701      	adds	r7, #1
1a0031d4:	2c03      	cmp	r4, #3
1a0031d6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
1a0031da:	d90d      	bls.n	1a0031f8 <memset+0x7c>
1a0031dc:	461e      	mov	r6, r3
1a0031de:	4622      	mov	r2, r4
1a0031e0:	3a04      	subs	r2, #4
1a0031e2:	2a03      	cmp	r2, #3
1a0031e4:	f846 5b04 	str.w	r5, [r6], #4
1a0031e8:	d8fa      	bhi.n	1a0031e0 <memset+0x64>
1a0031ea:	1f22      	subs	r2, r4, #4
1a0031ec:	f022 0203 	bic.w	r2, r2, #3
1a0031f0:	3204      	adds	r2, #4
1a0031f2:	4413      	add	r3, r2
1a0031f4:	f004 0403 	and.w	r4, r4, #3
1a0031f8:	b12c      	cbz	r4, 1a003206 <memset+0x8a>
1a0031fa:	b2c9      	uxtb	r1, r1
1a0031fc:	441c      	add	r4, r3
1a0031fe:	f803 1b01 	strb.w	r1, [r3], #1
1a003202:	429c      	cmp	r4, r3
1a003204:	d1fb      	bne.n	1a0031fe <memset+0x82>
1a003206:	bcf0      	pop	{r4, r5, r6, r7}
1a003208:	4770      	bx	lr
1a00320a:	4614      	mov	r4, r2
1a00320c:	4603      	mov	r3, r0
1a00320e:	e7c5      	b.n	1a00319c <memset+0x20>

1a003210 <printf>:
1a003210:	b40f      	push	{r0, r1, r2, r3}
1a003212:	b500      	push	{lr}
1a003214:	4907      	ldr	r1, [pc, #28]	; (1a003234 <printf+0x24>)
1a003216:	b083      	sub	sp, #12
1a003218:	ab04      	add	r3, sp, #16
1a00321a:	6808      	ldr	r0, [r1, #0]
1a00321c:	f853 2b04 	ldr.w	r2, [r3], #4
1a003220:	6881      	ldr	r1, [r0, #8]
1a003222:	9301      	str	r3, [sp, #4]
1a003224:	f000 f8dc 	bl	1a0033e0 <_vfprintf_r>
1a003228:	b003      	add	sp, #12
1a00322a:	f85d eb04 	ldr.w	lr, [sp], #4
1a00322e:	b004      	add	sp, #16
1a003230:	4770      	bx	lr
1a003232:	bf00      	nop
1a003234:	100000cc 	.word	0x100000cc

1a003238 <_puts_r>:
1a003238:	b570      	push	{r4, r5, r6, lr}
1a00323a:	4605      	mov	r5, r0
1a00323c:	b088      	sub	sp, #32
1a00323e:	4608      	mov	r0, r1
1a003240:	460c      	mov	r4, r1
1a003242:	f000 f85d 	bl	1a003300 <strlen>
1a003246:	4a22      	ldr	r2, [pc, #136]	; (1a0032d0 <_puts_r+0x98>)
1a003248:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a00324a:	9404      	str	r4, [sp, #16]
1a00324c:	2601      	movs	r6, #1
1a00324e:	1c44      	adds	r4, r0, #1
1a003250:	a904      	add	r1, sp, #16
1a003252:	9206      	str	r2, [sp, #24]
1a003254:	2202      	movs	r2, #2
1a003256:	9403      	str	r4, [sp, #12]
1a003258:	9005      	str	r0, [sp, #20]
1a00325a:	68ac      	ldr	r4, [r5, #8]
1a00325c:	9607      	str	r6, [sp, #28]
1a00325e:	e9cd 1201 	strd	r1, r2, [sp, #4]
1a003262:	b31b      	cbz	r3, 1a0032ac <_puts_r+0x74>
1a003264:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a003266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00326a:	07ce      	lsls	r6, r1, #31
1a00326c:	b29a      	uxth	r2, r3
1a00326e:	d401      	bmi.n	1a003274 <_puts_r+0x3c>
1a003270:	0590      	lsls	r0, r2, #22
1a003272:	d525      	bpl.n	1a0032c0 <_puts_r+0x88>
1a003274:	0491      	lsls	r1, r2, #18
1a003276:	d406      	bmi.n	1a003286 <_puts_r+0x4e>
1a003278:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a00327a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a00327e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
1a003282:	81a3      	strh	r3, [r4, #12]
1a003284:	6662      	str	r2, [r4, #100]	; 0x64
1a003286:	4628      	mov	r0, r5
1a003288:	aa01      	add	r2, sp, #4
1a00328a:	4621      	mov	r1, r4
1a00328c:	f003 f8b2 	bl	1a0063f4 <__sfvwrite_r>
1a003290:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a003292:	2800      	cmp	r0, #0
1a003294:	bf0c      	ite	eq
1a003296:	250a      	moveq	r5, #10
1a003298:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a00329c:	07da      	lsls	r2, r3, #31
1a00329e:	d402      	bmi.n	1a0032a6 <_puts_r+0x6e>
1a0032a0:	89a3      	ldrh	r3, [r4, #12]
1a0032a2:	059b      	lsls	r3, r3, #22
1a0032a4:	d506      	bpl.n	1a0032b4 <_puts_r+0x7c>
1a0032a6:	4628      	mov	r0, r5
1a0032a8:	b008      	add	sp, #32
1a0032aa:	bd70      	pop	{r4, r5, r6, pc}
1a0032ac:	4628      	mov	r0, r5
1a0032ae:	f002 ff25 	bl	1a0060fc <__sinit>
1a0032b2:	e7d7      	b.n	1a003264 <_puts_r+0x2c>
1a0032b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0032b6:	f003 fa59 	bl	1a00676c <__retarget_lock_release_recursive>
1a0032ba:	4628      	mov	r0, r5
1a0032bc:	b008      	add	sp, #32
1a0032be:	bd70      	pop	{r4, r5, r6, pc}
1a0032c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0032c2:	f003 fa51 	bl	1a006768 <__retarget_lock_acquire_recursive>
1a0032c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0032ca:	b29a      	uxth	r2, r3
1a0032cc:	e7d2      	b.n	1a003274 <_puts_r+0x3c>
1a0032ce:	bf00      	nop
1a0032d0:	1a0080c4 	.word	0x1a0080c4

1a0032d4 <puts>:
1a0032d4:	4b02      	ldr	r3, [pc, #8]	; (1a0032e0 <puts+0xc>)
1a0032d6:	4601      	mov	r1, r0
1a0032d8:	6818      	ldr	r0, [r3, #0]
1a0032da:	f7ff bfad 	b.w	1a003238 <_puts_r>
1a0032de:	bf00      	nop
1a0032e0:	100000cc 	.word	0x100000cc
1a0032e4:	ffffffff 	.word	0xffffffff
1a0032e8:	ffffffff 	.word	0xffffffff
1a0032ec:	ffffffff 	.word	0xffffffff
1a0032f0:	ffffffff 	.word	0xffffffff
1a0032f4:	ffffffff 	.word	0xffffffff
1a0032f8:	ffffffff 	.word	0xffffffff
1a0032fc:	ffffffff 	.word	0xffffffff

1a003300 <strlen>:
1a003300:	f890 f000 	pld	[r0]
1a003304:	e96d 4502 	strd	r4, r5, [sp, #-8]!
1a003308:	f020 0107 	bic.w	r1, r0, #7
1a00330c:	f06f 0c00 	mvn.w	ip, #0
1a003310:	f010 0407 	ands.w	r4, r0, #7
1a003314:	f891 f020 	pld	[r1, #32]
1a003318:	f040 8049 	bne.w	1a0033ae <strlen+0xae>
1a00331c:	f04f 0400 	mov.w	r4, #0
1a003320:	f06f 0007 	mvn.w	r0, #7
1a003324:	e9d1 2300 	ldrd	r2, r3, [r1]
1a003328:	f891 f040 	pld	[r1, #64]	; 0x40
1a00332c:	f100 0008 	add.w	r0, r0, #8
1a003330:	fa82 f24c 	uadd8	r2, r2, ip
1a003334:	faa4 f28c 	sel	r2, r4, ip
1a003338:	fa83 f34c 	uadd8	r3, r3, ip
1a00333c:	faa2 f38c 	sel	r3, r2, ip
1a003340:	bb4b      	cbnz	r3, 1a003396 <strlen+0x96>
1a003342:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a003346:	fa82 f24c 	uadd8	r2, r2, ip
1a00334a:	f100 0008 	add.w	r0, r0, #8
1a00334e:	faa4 f28c 	sel	r2, r4, ip
1a003352:	fa83 f34c 	uadd8	r3, r3, ip
1a003356:	faa2 f38c 	sel	r3, r2, ip
1a00335a:	b9e3      	cbnz	r3, 1a003396 <strlen+0x96>
1a00335c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a003360:	fa82 f24c 	uadd8	r2, r2, ip
1a003364:	f100 0008 	add.w	r0, r0, #8
1a003368:	faa4 f28c 	sel	r2, r4, ip
1a00336c:	fa83 f34c 	uadd8	r3, r3, ip
1a003370:	faa2 f38c 	sel	r3, r2, ip
1a003374:	b97b      	cbnz	r3, 1a003396 <strlen+0x96>
1a003376:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a00337a:	f101 0120 	add.w	r1, r1, #32
1a00337e:	fa82 f24c 	uadd8	r2, r2, ip
1a003382:	f100 0008 	add.w	r0, r0, #8
1a003386:	faa4 f28c 	sel	r2, r4, ip
1a00338a:	fa83 f34c 	uadd8	r3, r3, ip
1a00338e:	faa2 f38c 	sel	r3, r2, ip
1a003392:	2b00      	cmp	r3, #0
1a003394:	d0c6      	beq.n	1a003324 <strlen+0x24>
1a003396:	2a00      	cmp	r2, #0
1a003398:	bf04      	itt	eq
1a00339a:	3004      	addeq	r0, #4
1a00339c:	461a      	moveq	r2, r3
1a00339e:	ba12      	rev	r2, r2
1a0033a0:	fab2 f282 	clz	r2, r2
1a0033a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
1a0033a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a0033ac:	4770      	bx	lr
1a0033ae:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0033b2:	f004 0503 	and.w	r5, r4, #3
1a0033b6:	f1c4 0000 	rsb	r0, r4, #0
1a0033ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a0033be:	f014 0f04 	tst.w	r4, #4
1a0033c2:	f891 f040 	pld	[r1, #64]	; 0x40
1a0033c6:	fa0c f505 	lsl.w	r5, ip, r5
1a0033ca:	ea62 0205 	orn	r2, r2, r5
1a0033ce:	bf1c      	itt	ne
1a0033d0:	ea63 0305 	ornne	r3, r3, r5
1a0033d4:	4662      	movne	r2, ip
1a0033d6:	f04f 0400 	mov.w	r4, #0
1a0033da:	e7a9      	b.n	1a003330 <strlen+0x30>
1a0033dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0033e0 <_vfprintf_r>:
1a0033e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0033e4:	b0d7      	sub	sp, #348	; 0x15c
1a0033e6:	461c      	mov	r4, r3
1a0033e8:	4689      	mov	r9, r1
1a0033ea:	4617      	mov	r7, r2
1a0033ec:	4605      	mov	r5, r0
1a0033ee:	9003      	str	r0, [sp, #12]
1a0033f0:	f003 f9a8 	bl	1a006744 <_localeconv_r>
1a0033f4:	6803      	ldr	r3, [r0, #0]
1a0033f6:	9316      	str	r3, [sp, #88]	; 0x58
1a0033f8:	4618      	mov	r0, r3
1a0033fa:	f7ff ff81 	bl	1a003300 <strlen>
1a0033fe:	9408      	str	r4, [sp, #32]
1a003400:	9015      	str	r0, [sp, #84]	; 0x54
1a003402:	b11d      	cbz	r5, 1a00340c <_vfprintf_r+0x2c>
1a003404:	6bab      	ldr	r3, [r5, #56]	; 0x38
1a003406:	2b00      	cmp	r3, #0
1a003408:	f000 8107 	beq.w	1a00361a <_vfprintf_r+0x23a>
1a00340c:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a003410:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a003414:	07c8      	lsls	r0, r1, #31
1a003416:	b293      	uxth	r3, r2
1a003418:	d402      	bmi.n	1a003420 <_vfprintf_r+0x40>
1a00341a:	0599      	lsls	r1, r3, #22
1a00341c:	f140 811f 	bpl.w	1a00365e <_vfprintf_r+0x27e>
1a003420:	049e      	lsls	r6, r3, #18
1a003422:	d40a      	bmi.n	1a00343a <_vfprintf_r+0x5a>
1a003424:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a003428:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
1a00342c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a003430:	f8a9 300c 	strh.w	r3, [r9, #12]
1a003434:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
1a003438:	b29b      	uxth	r3, r3
1a00343a:	071d      	lsls	r5, r3, #28
1a00343c:	f140 80b2 	bpl.w	1a0035a4 <_vfprintf_r+0x1c4>
1a003440:	f8d9 2010 	ldr.w	r2, [r9, #16]
1a003444:	2a00      	cmp	r2, #0
1a003446:	f000 80ad 	beq.w	1a0035a4 <_vfprintf_r+0x1c4>
1a00344a:	f003 021a 	and.w	r2, r3, #26
1a00344e:	2a0a      	cmp	r2, #10
1a003450:	f000 80c9 	beq.w	1a0035e6 <_vfprintf_r+0x206>
1a003454:	2300      	movs	r3, #0
1a003456:	ed9f 7b86 	vldr	d7, [pc, #536]	; 1a003670 <_vfprintf_r+0x290>
1a00345a:	9310      	str	r3, [sp, #64]	; 0x40
1a00345c:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
1a003460:	9317      	str	r3, [sp, #92]	; 0x5c
1a003462:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
1a003466:	931b      	str	r3, [sp, #108]	; 0x6c
1a003468:	9318      	str	r3, [sp, #96]	; 0x60
1a00346a:	9305      	str	r3, [sp, #20]
1a00346c:	ab2d      	add	r3, sp, #180	; 0xb4
1a00346e:	932a      	str	r3, [sp, #168]	; 0xa8
1a003470:	469b      	mov	fp, r3
1a003472:	783b      	ldrb	r3, [r7, #0]
1a003474:	f8cd 901c 	str.w	r9, [sp, #28]
1a003478:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
1a00347c:	2b00      	cmp	r3, #0
1a00347e:	f000 8259 	beq.w	1a003934 <_vfprintf_r+0x554>
1a003482:	2b25      	cmp	r3, #37	; 0x25
1a003484:	463c      	mov	r4, r7
1a003486:	d102      	bne.n	1a00348e <_vfprintf_r+0xae>
1a003488:	e01d      	b.n	1a0034c6 <_vfprintf_r+0xe6>
1a00348a:	2b25      	cmp	r3, #37	; 0x25
1a00348c:	d003      	beq.n	1a003496 <_vfprintf_r+0xb6>
1a00348e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
1a003492:	2b00      	cmp	r3, #0
1a003494:	d1f9      	bne.n	1a00348a <_vfprintf_r+0xaa>
1a003496:	1be5      	subs	r5, r4, r7
1a003498:	b18d      	cbz	r5, 1a0034be <_vfprintf_r+0xde>
1a00349a:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
1a00349e:	3301      	adds	r3, #1
1a0034a0:	442a      	add	r2, r5
1a0034a2:	2b07      	cmp	r3, #7
1a0034a4:	f8cb 7000 	str.w	r7, [fp]
1a0034a8:	f8cb 5004 	str.w	r5, [fp, #4]
1a0034ac:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
1a0034b0:	f300 80ca 	bgt.w	1a003648 <_vfprintf_r+0x268>
1a0034b4:	f10b 0b08 	add.w	fp, fp, #8
1a0034b8:	9b05      	ldr	r3, [sp, #20]
1a0034ba:	442b      	add	r3, r5
1a0034bc:	9305      	str	r3, [sp, #20]
1a0034be:	7823      	ldrb	r3, [r4, #0]
1a0034c0:	2b00      	cmp	r3, #0
1a0034c2:	f000 8237 	beq.w	1a003934 <_vfprintf_r+0x554>
1a0034c6:	2300      	movs	r3, #0
1a0034c8:	7866      	ldrb	r6, [r4, #1]
1a0034ca:	9306      	str	r3, [sp, #24]
1a0034cc:	4698      	mov	r8, r3
1a0034ce:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a0034d2:	f104 0a01 	add.w	sl, r4, #1
1a0034d6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
1a0034da:	252b      	movs	r5, #43	; 0x2b
1a0034dc:	f10a 0a01 	add.w	sl, sl, #1
1a0034e0:	f1a6 0320 	sub.w	r3, r6, #32
1a0034e4:	2b5a      	cmp	r3, #90	; 0x5a
1a0034e6:	f200 842a 	bhi.w	1a003d3e <_vfprintf_r+0x95e>
1a0034ea:	e8df f013 	tbh	[pc, r3, lsl #1]
1a0034ee:	03aa      	.short	0x03aa
1a0034f0:	04280428 	.word	0x04280428
1a0034f4:	0428029c 	.word	0x0428029c
1a0034f8:	04280428 	.word	0x04280428
1a0034fc:	042802a7 	.word	0x042802a7
1a003500:	02c60428 	.word	0x02c60428
1a003504:	042802d2 	.word	0x042802d2
1a003508:	02dc02d7 	.word	0x02dc02d7
1a00350c:	02f60428 	.word	0x02f60428
1a003510:	026d026d 	.word	0x026d026d
1a003514:	026d026d 	.word	0x026d026d
1a003518:	026d026d 	.word	0x026d026d
1a00351c:	026d026d 	.word	0x026d026d
1a003520:	0428026d 	.word	0x0428026d
1a003524:	04280428 	.word	0x04280428
1a003528:	04280428 	.word	0x04280428
1a00352c:	04280428 	.word	0x04280428
1a003530:	042802fb 	.word	0x042802fb
1a003534:	03f3033c 	.word	0x03f3033c
1a003538:	02fb02fb 	.word	0x02fb02fb
1a00353c:	042802fb 	.word	0x042802fb
1a003540:	04280428 	.word	0x04280428
1a003544:	03ee0428 	.word	0x03ee0428
1a003548:	04280428 	.word	0x04280428
1a00354c:	0428009a 	.word	0x0428009a
1a003550:	04280428 	.word	0x04280428
1a003554:	04280350 	.word	0x04280350
1a003558:	04280379 	.word	0x04280379
1a00355c:	03900428 	.word	0x03900428
1a003560:	04280428 	.word	0x04280428
1a003564:	04280428 	.word	0x04280428
1a003568:	04280428 	.word	0x04280428
1a00356c:	04280428 	.word	0x04280428
1a003570:	042802fb 	.word	0x042802fb
1a003574:	00c5033c 	.word	0x00c5033c
1a003578:	02fb02fb 	.word	0x02fb02fb
1a00357c:	03d102fb 	.word	0x03d102fb
1a003580:	007000c5 	.word	0x007000c5
1a003584:	03b50428 	.word	0x03b50428
1a003588:	03c20428 	.word	0x03c20428
1a00358c:	03de009c 	.word	0x03de009c
1a003590:	04280070 	.word	0x04280070
1a003594:	00720350 	.word	0x00720350
1a003598:	0428022c 	.word	0x0428022c
1a00359c:	027c0428 	.word	0x027c0428
1a0035a0:	00720428 	.word	0x00720428
1a0035a4:	4649      	mov	r1, r9
1a0035a6:	9803      	ldr	r0, [sp, #12]
1a0035a8:	f001 fc9a 	bl	1a004ee0 <__swsetup_r>
1a0035ac:	b1a0      	cbz	r0, 1a0035d8 <_vfprintf_r+0x1f8>
1a0035ae:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
1a0035b2:	07d8      	lsls	r0, r3, #31
1a0035b4:	d404      	bmi.n	1a0035c0 <_vfprintf_r+0x1e0>
1a0035b6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a0035ba:	0599      	lsls	r1, r3, #22
1a0035bc:	f140 83b7 	bpl.w	1a003d2e <_vfprintf_r+0x94e>
1a0035c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0035c4:	9305      	str	r3, [sp, #20]
1a0035c6:	9805      	ldr	r0, [sp, #20]
1a0035c8:	b057      	add	sp, #348	; 0x15c
1a0035ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0035ce:	f048 0820 	orr.w	r8, r8, #32
1a0035d2:	f89a 6000 	ldrb.w	r6, [sl]
1a0035d6:	e781      	b.n	1a0034dc <_vfprintf_r+0xfc>
1a0035d8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a0035dc:	f003 021a 	and.w	r2, r3, #26
1a0035e0:	2a0a      	cmp	r2, #10
1a0035e2:	f47f af37 	bne.w	1a003454 <_vfprintf_r+0x74>
1a0035e6:	f9b9 200e 	ldrsh.w	r2, [r9, #14]
1a0035ea:	2a00      	cmp	r2, #0
1a0035ec:	f6ff af32 	blt.w	1a003454 <_vfprintf_r+0x74>
1a0035f0:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a0035f4:	07d2      	lsls	r2, r2, #31
1a0035f6:	d405      	bmi.n	1a003604 <_vfprintf_r+0x224>
1a0035f8:	059b      	lsls	r3, r3, #22
1a0035fa:	d403      	bmi.n	1a003604 <_vfprintf_r+0x224>
1a0035fc:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a003600:	f003 f8b4 	bl	1a00676c <__retarget_lock_release_recursive>
1a003604:	4623      	mov	r3, r4
1a003606:	463a      	mov	r2, r7
1a003608:	4649      	mov	r1, r9
1a00360a:	9803      	ldr	r0, [sp, #12]
1a00360c:	f001 fc26 	bl	1a004e5c <__sbprintf>
1a003610:	9005      	str	r0, [sp, #20]
1a003612:	9805      	ldr	r0, [sp, #20]
1a003614:	b057      	add	sp, #348	; 0x15c
1a003616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00361a:	9803      	ldr	r0, [sp, #12]
1a00361c:	f002 fd6e 	bl	1a0060fc <__sinit>
1a003620:	e6f4      	b.n	1a00340c <_vfprintf_r+0x2c>
1a003622:	f048 0810 	orr.w	r8, r8, #16
1a003626:	f018 0f20 	tst.w	r8, #32
1a00362a:	f000 836c 	beq.w	1a003d06 <_vfprintf_r+0x926>
1a00362e:	9c08      	ldr	r4, [sp, #32]
1a003630:	3407      	adds	r4, #7
1a003632:	f024 0307 	bic.w	r3, r4, #7
1a003636:	e9d3 4500 	ldrd	r4, r5, [r3]
1a00363a:	f103 0208 	add.w	r2, r3, #8
1a00363e:	9208      	str	r2, [sp, #32]
1a003640:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
1a003644:	2200      	movs	r2, #0
1a003646:	e18c      	b.n	1a003962 <_vfprintf_r+0x582>
1a003648:	aa2a      	add	r2, sp, #168	; 0xa8
1a00364a:	9907      	ldr	r1, [sp, #28]
1a00364c:	9803      	ldr	r0, [sp, #12]
1a00364e:	f004 fa0d 	bl	1a007a6c <__sprint_r>
1a003652:	2800      	cmp	r0, #0
1a003654:	f041 8376 	bne.w	1a004d44 <_vfprintf_r+0x1964>
1a003658:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00365c:	e72c      	b.n	1a0034b8 <_vfprintf_r+0xd8>
1a00365e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a003662:	f003 f881 	bl	1a006768 <__retarget_lock_acquire_recursive>
1a003666:	f9b9 200c 	ldrsh.w	r2, [r9, #12]
1a00366a:	b293      	uxth	r3, r2
1a00366c:	e6d8      	b.n	1a003420 <_vfprintf_r+0x40>
1a00366e:	bf00      	nop
	...
1a003678:	4643      	mov	r3, r8
1a00367a:	069f      	lsls	r7, r3, #26
1a00367c:	f140 832f 	bpl.w	1a003cde <_vfprintf_r+0x8fe>
1a003680:	9c08      	ldr	r4, [sp, #32]
1a003682:	3407      	adds	r4, #7
1a003684:	f024 0407 	bic.w	r4, r4, #7
1a003688:	e9d4 0100 	ldrd	r0, r1, [r4]
1a00368c:	f104 0208 	add.w	r2, r4, #8
1a003690:	9208      	str	r2, [sp, #32]
1a003692:	4604      	mov	r4, r0
1a003694:	460d      	mov	r5, r1
1a003696:	2800      	cmp	r0, #0
1a003698:	f171 0200 	sbcs.w	r2, r1, #0
1a00369c:	da05      	bge.n	1a0036aa <_vfprintf_r+0x2ca>
1a00369e:	222d      	movs	r2, #45	; 0x2d
1a0036a0:	4264      	negs	r4, r4
1a0036a2:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
1a0036a6:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
1a0036aa:	aa56      	add	r2, sp, #344	; 0x158
1a0036ac:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a0036b0:	9204      	str	r2, [sp, #16]
1a0036b2:	f000 84b2 	beq.w	1a00401a <_vfprintf_r+0xc3a>
1a0036b6:	2201      	movs	r2, #1
1a0036b8:	ea54 0105 	orrs.w	r1, r4, r5
1a0036bc:	f023 0880 	bic.w	r8, r3, #128	; 0x80
1a0036c0:	f040 8159 	bne.w	1a003976 <_vfprintf_r+0x596>
1a0036c4:	f1b9 0f00 	cmp.w	r9, #0
1a0036c8:	f040 8619 	bne.w	1a0042fe <_vfprintf_r+0xf1e>
1a0036cc:	2a00      	cmp	r2, #0
1a0036ce:	f040 8508 	bne.w	1a0040e2 <_vfprintf_r+0xd02>
1a0036d2:	f013 0301 	ands.w	r3, r3, #1
1a0036d6:	af56      	add	r7, sp, #344	; 0x158
1a0036d8:	9309      	str	r3, [sp, #36]	; 0x24
1a0036da:	d002      	beq.n	1a0036e2 <_vfprintf_r+0x302>
1a0036dc:	2330      	movs	r3, #48	; 0x30
1a0036de:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a0036e2:	2300      	movs	r3, #0
1a0036e4:	930a      	str	r3, [sp, #40]	; 0x28
1a0036e6:	930f      	str	r3, [sp, #60]	; 0x3c
1a0036e8:	9314      	str	r3, [sp, #80]	; 0x50
1a0036ea:	9311      	str	r3, [sp, #68]	; 0x44
1a0036ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0036ee:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a0036f2:	454b      	cmp	r3, r9
1a0036f4:	bfb8      	it	lt
1a0036f6:	464b      	movlt	r3, r9
1a0036f8:	9304      	str	r3, [sp, #16]
1a0036fa:	b112      	cbz	r2, 1a003702 <_vfprintf_r+0x322>
1a0036fc:	9b04      	ldr	r3, [sp, #16]
1a0036fe:	3301      	adds	r3, #1
1a003700:	9304      	str	r3, [sp, #16]
1a003702:	f018 0302 	ands.w	r3, r8, #2
1a003706:	930b      	str	r3, [sp, #44]	; 0x2c
1a003708:	d002      	beq.n	1a003710 <_vfprintf_r+0x330>
1a00370a:	9b04      	ldr	r3, [sp, #16]
1a00370c:	3302      	adds	r3, #2
1a00370e:	9304      	str	r3, [sp, #16]
1a003710:	f018 0384 	ands.w	r3, r8, #132	; 0x84
1a003714:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003716:	930e      	str	r3, [sp, #56]	; 0x38
1a003718:	d13f      	bne.n	1a00379a <_vfprintf_r+0x3ba>
1a00371a:	9b06      	ldr	r3, [sp, #24]
1a00371c:	9904      	ldr	r1, [sp, #16]
1a00371e:	1a5d      	subs	r5, r3, r1
1a003720:	2d00      	cmp	r5, #0
1a003722:	dd3a      	ble.n	1a00379a <_vfprintf_r+0x3ba>
1a003724:	2d10      	cmp	r5, #16
1a003726:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a003728:	dd29      	ble.n	1a00377e <_vfprintf_r+0x39e>
1a00372a:	4659      	mov	r1, fp
1a00372c:	4620      	mov	r0, r4
1a00372e:	9620      	str	r6, [sp, #128]	; 0x80
1a003730:	2310      	movs	r3, #16
1a003732:	9c03      	ldr	r4, [sp, #12]
1a003734:	9e07      	ldr	r6, [sp, #28]
1a003736:	46bb      	mov	fp, r7
1a003738:	e004      	b.n	1a003744 <_vfprintf_r+0x364>
1a00373a:	3d10      	subs	r5, #16
1a00373c:	2d10      	cmp	r5, #16
1a00373e:	f101 0108 	add.w	r1, r1, #8
1a003742:	dd18      	ble.n	1a003776 <_vfprintf_r+0x396>
1a003744:	3201      	adds	r2, #1
1a003746:	4fba      	ldr	r7, [pc, #744]	; (1a003a30 <_vfprintf_r+0x650>)
1a003748:	3010      	adds	r0, #16
1a00374a:	2a07      	cmp	r2, #7
1a00374c:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
1a003750:	e9c1 7300 	strd	r7, r3, [r1]
1a003754:	ddf1      	ble.n	1a00373a <_vfprintf_r+0x35a>
1a003756:	aa2a      	add	r2, sp, #168	; 0xa8
1a003758:	4631      	mov	r1, r6
1a00375a:	4620      	mov	r0, r4
1a00375c:	930c      	str	r3, [sp, #48]	; 0x30
1a00375e:	f004 f985 	bl	1a007a6c <__sprint_r>
1a003762:	2800      	cmp	r0, #0
1a003764:	f040 843d 	bne.w	1a003fe2 <_vfprintf_r+0xc02>
1a003768:	3d10      	subs	r5, #16
1a00376a:	2d10      	cmp	r5, #16
1a00376c:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
1a003770:	a92d      	add	r1, sp, #180	; 0xb4
1a003772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a003774:	dce6      	bgt.n	1a003744 <_vfprintf_r+0x364>
1a003776:	9e20      	ldr	r6, [sp, #128]	; 0x80
1a003778:	465f      	mov	r7, fp
1a00377a:	4604      	mov	r4, r0
1a00377c:	468b      	mov	fp, r1
1a00377e:	3201      	adds	r2, #1
1a003780:	4bab      	ldr	r3, [pc, #684]	; (1a003a30 <_vfprintf_r+0x650>)
1a003782:	442c      	add	r4, r5
1a003784:	2a07      	cmp	r2, #7
1a003786:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a00378a:	e9cb 3500 	strd	r3, r5, [fp]
1a00378e:	f300 84ff 	bgt.w	1a004190 <_vfprintf_r+0xdb0>
1a003792:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a003796:	f10b 0b08 	add.w	fp, fp, #8
1a00379a:	b172      	cbz	r2, 1a0037ba <_vfprintf_r+0x3da>
1a00379c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a00379e:	3201      	adds	r2, #1
1a0037a0:	3401      	adds	r4, #1
1a0037a2:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
1a0037a6:	2101      	movs	r1, #1
1a0037a8:	2a07      	cmp	r2, #7
1a0037aa:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a0037ae:	e9cb 0100 	strd	r0, r1, [fp]
1a0037b2:	f300 8418 	bgt.w	1a003fe6 <_vfprintf_r+0xc06>
1a0037b6:	f10b 0b08 	add.w	fp, fp, #8
1a0037ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0037bc:	b16b      	cbz	r3, 1a0037da <_vfprintf_r+0x3fa>
1a0037be:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a0037c0:	3301      	adds	r3, #1
1a0037c2:	3402      	adds	r4, #2
1a0037c4:	a923      	add	r1, sp, #140	; 0x8c
1a0037c6:	2202      	movs	r2, #2
1a0037c8:	2b07      	cmp	r3, #7
1a0037ca:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a0037ce:	e9cb 1200 	strd	r1, r2, [fp]
1a0037d2:	f300 8415 	bgt.w	1a004000 <_vfprintf_r+0xc20>
1a0037d6:	f10b 0b08 	add.w	fp, fp, #8
1a0037da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0037dc:	2b80      	cmp	r3, #128	; 0x80
1a0037de:	f000 8331 	beq.w	1a003e44 <_vfprintf_r+0xa64>
1a0037e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0037e4:	eba9 0503 	sub.w	r5, r9, r3
1a0037e8:	2d00      	cmp	r5, #0
1a0037ea:	dd37      	ble.n	1a00385c <_vfprintf_r+0x47c>
1a0037ec:	2d10      	cmp	r5, #16
1a0037ee:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a0037f0:	4b90      	ldr	r3, [pc, #576]	; (1a003a34 <_vfprintf_r+0x654>)
1a0037f2:	dd28      	ble.n	1a003846 <_vfprintf_r+0x466>
1a0037f4:	4659      	mov	r1, fp
1a0037f6:	4620      	mov	r0, r4
1a0037f8:	46bb      	mov	fp, r7
1a0037fa:	f04f 0910 	mov.w	r9, #16
1a0037fe:	4637      	mov	r7, r6
1a003800:	461c      	mov	r4, r3
1a003802:	9e07      	ldr	r6, [sp, #28]
1a003804:	e004      	b.n	1a003810 <_vfprintf_r+0x430>
1a003806:	3d10      	subs	r5, #16
1a003808:	2d10      	cmp	r5, #16
1a00380a:	f101 0108 	add.w	r1, r1, #8
1a00380e:	dd15      	ble.n	1a00383c <_vfprintf_r+0x45c>
1a003810:	3201      	adds	r2, #1
1a003812:	3010      	adds	r0, #16
1a003814:	2a07      	cmp	r2, #7
1a003816:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
1a00381a:	e9c1 4900 	strd	r4, r9, [r1]
1a00381e:	ddf2      	ble.n	1a003806 <_vfprintf_r+0x426>
1a003820:	aa2a      	add	r2, sp, #168	; 0xa8
1a003822:	4631      	mov	r1, r6
1a003824:	9803      	ldr	r0, [sp, #12]
1a003826:	f004 f921 	bl	1a007a6c <__sprint_r>
1a00382a:	2800      	cmp	r0, #0
1a00382c:	f040 83d9 	bne.w	1a003fe2 <_vfprintf_r+0xc02>
1a003830:	3d10      	subs	r5, #16
1a003832:	2d10      	cmp	r5, #16
1a003834:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
1a003838:	a92d      	add	r1, sp, #180	; 0xb4
1a00383a:	dce9      	bgt.n	1a003810 <_vfprintf_r+0x430>
1a00383c:	463e      	mov	r6, r7
1a00383e:	4623      	mov	r3, r4
1a003840:	465f      	mov	r7, fp
1a003842:	4604      	mov	r4, r0
1a003844:	468b      	mov	fp, r1
1a003846:	3201      	adds	r2, #1
1a003848:	442c      	add	r4, r5
1a00384a:	2a07      	cmp	r2, #7
1a00384c:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a003850:	e9cb 3500 	strd	r3, r5, [fp]
1a003854:	f300 83ef 	bgt.w	1a004036 <_vfprintf_r+0xc56>
1a003858:	f10b 0b08 	add.w	fp, fp, #8
1a00385c:	f418 7f80 	tst.w	r8, #256	; 0x100
1a003860:	f040 8280 	bne.w	1a003d64 <_vfprintf_r+0x984>
1a003864:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a003866:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a003868:	f8cb 7000 	str.w	r7, [fp]
1a00386c:	3301      	adds	r3, #1
1a00386e:	4414      	add	r4, r2
1a003870:	2b07      	cmp	r3, #7
1a003872:	942c      	str	r4, [sp, #176]	; 0xb0
1a003874:	f8cb 2004 	str.w	r2, [fp, #4]
1a003878:	932b      	str	r3, [sp, #172]	; 0xac
1a00387a:	f300 8392 	bgt.w	1a003fa2 <_vfprintf_r+0xbc2>
1a00387e:	f10b 0b08 	add.w	fp, fp, #8
1a003882:	f018 0f04 	tst.w	r8, #4
1a003886:	d03b      	beq.n	1a003900 <_vfprintf_r+0x520>
1a003888:	9b06      	ldr	r3, [sp, #24]
1a00388a:	9a04      	ldr	r2, [sp, #16]
1a00388c:	1a9d      	subs	r5, r3, r2
1a00388e:	2d00      	cmp	r5, #0
1a003890:	dd36      	ble.n	1a003900 <_vfprintf_r+0x520>
1a003892:	2d10      	cmp	r5, #16
1a003894:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a003896:	dd21      	ble.n	1a0038dc <_vfprintf_r+0x4fc>
1a003898:	2610      	movs	r6, #16
1a00389a:	9f03      	ldr	r7, [sp, #12]
1a00389c:	f8dd 801c 	ldr.w	r8, [sp, #28]
1a0038a0:	e004      	b.n	1a0038ac <_vfprintf_r+0x4cc>
1a0038a2:	3d10      	subs	r5, #16
1a0038a4:	2d10      	cmp	r5, #16
1a0038a6:	f10b 0b08 	add.w	fp, fp, #8
1a0038aa:	dd17      	ble.n	1a0038dc <_vfprintf_r+0x4fc>
1a0038ac:	3301      	adds	r3, #1
1a0038ae:	4a60      	ldr	r2, [pc, #384]	; (1a003a30 <_vfprintf_r+0x650>)
1a0038b0:	3410      	adds	r4, #16
1a0038b2:	2b07      	cmp	r3, #7
1a0038b4:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a0038b8:	e9cb 2600 	strd	r2, r6, [fp]
1a0038bc:	ddf1      	ble.n	1a0038a2 <_vfprintf_r+0x4c2>
1a0038be:	aa2a      	add	r2, sp, #168	; 0xa8
1a0038c0:	4641      	mov	r1, r8
1a0038c2:	4638      	mov	r0, r7
1a0038c4:	f004 f8d2 	bl	1a007a6c <__sprint_r>
1a0038c8:	2800      	cmp	r0, #0
1a0038ca:	f040 856c 	bne.w	1a0043a6 <_vfprintf_r+0xfc6>
1a0038ce:	3d10      	subs	r5, #16
1a0038d0:	2d10      	cmp	r5, #16
1a0038d2:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
1a0038d6:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0038da:	dce7      	bgt.n	1a0038ac <_vfprintf_r+0x4cc>
1a0038dc:	3301      	adds	r3, #1
1a0038de:	4a54      	ldr	r2, [pc, #336]	; (1a003a30 <_vfprintf_r+0x650>)
1a0038e0:	442c      	add	r4, r5
1a0038e2:	2b07      	cmp	r3, #7
1a0038e4:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a0038e8:	e9cb 2500 	strd	r2, r5, [fp]
1a0038ec:	dd08      	ble.n	1a003900 <_vfprintf_r+0x520>
1a0038ee:	aa2a      	add	r2, sp, #168	; 0xa8
1a0038f0:	9907      	ldr	r1, [sp, #28]
1a0038f2:	9803      	ldr	r0, [sp, #12]
1a0038f4:	f004 f8ba 	bl	1a007a6c <__sprint_r>
1a0038f8:	2800      	cmp	r0, #0
1a0038fa:	f040 82e9 	bne.w	1a003ed0 <_vfprintf_r+0xaf0>
1a0038fe:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003900:	9904      	ldr	r1, [sp, #16]
1a003902:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
1a003906:	428a      	cmp	r2, r1
1a003908:	bfac      	ite	ge
1a00390a:	189b      	addge	r3, r3, r2
1a00390c:	185b      	addlt	r3, r3, r1
1a00390e:	9305      	str	r3, [sp, #20]
1a003910:	2c00      	cmp	r4, #0
1a003912:	f040 82d5 	bne.w	1a003ec0 <_vfprintf_r+0xae0>
1a003916:	2300      	movs	r3, #0
1a003918:	932b      	str	r3, [sp, #172]	; 0xac
1a00391a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00391c:	b11b      	cbz	r3, 1a003926 <_vfprintf_r+0x546>
1a00391e:	990a      	ldr	r1, [sp, #40]	; 0x28
1a003920:	9803      	ldr	r0, [sp, #12]
1a003922:	f002 fc73 	bl	1a00620c <_free_r>
1a003926:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00392a:	4657      	mov	r7, sl
1a00392c:	783b      	ldrb	r3, [r7, #0]
1a00392e:	2b00      	cmp	r3, #0
1a003930:	f47f ada7 	bne.w	1a003482 <_vfprintf_r+0xa2>
1a003934:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
1a003936:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a00393a:	2b00      	cmp	r3, #0
1a00393c:	f041 80e7 	bne.w	1a004b0e <_vfprintf_r+0x172e>
1a003940:	2300      	movs	r3, #0
1a003942:	932b      	str	r3, [sp, #172]	; 0xac
1a003944:	e2cb      	b.n	1a003ede <_vfprintf_r+0xafe>
1a003946:	4643      	mov	r3, r8
1a003948:	069a      	lsls	r2, r3, #26
1a00394a:	f140 814e 	bpl.w	1a003bea <_vfprintf_r+0x80a>
1a00394e:	9c08      	ldr	r4, [sp, #32]
1a003950:	3407      	adds	r4, #7
1a003952:	f024 0207 	bic.w	r2, r4, #7
1a003956:	f102 0108 	add.w	r1, r2, #8
1a00395a:	e9d2 4500 	ldrd	r4, r5, [r2]
1a00395e:	9108      	str	r1, [sp, #32]
1a003960:	2201      	movs	r2, #1
1a003962:	2100      	movs	r1, #0
1a003964:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
1a003968:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a00396c:	a956      	add	r1, sp, #344	; 0x158
1a00396e:	9104      	str	r1, [sp, #16]
1a003970:	f47f aea2 	bne.w	1a0036b8 <_vfprintf_r+0x2d8>
1a003974:	4698      	mov	r8, r3
1a003976:	2a01      	cmp	r2, #1
1a003978:	f000 8350 	beq.w	1a00401c <_vfprintf_r+0xc3c>
1a00397c:	2a02      	cmp	r2, #2
1a00397e:	f000 831b 	beq.w	1a003fb8 <_vfprintf_r+0xbd8>
1a003982:	a956      	add	r1, sp, #344	; 0x158
1a003984:	e000      	b.n	1a003988 <_vfprintf_r+0x5a8>
1a003986:	4639      	mov	r1, r7
1a003988:	08e2      	lsrs	r2, r4, #3
1a00398a:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
1a00398e:	08e8      	lsrs	r0, r5, #3
1a003990:	f004 0307 	and.w	r3, r4, #7
1a003994:	4605      	mov	r5, r0
1a003996:	4614      	mov	r4, r2
1a003998:	3330      	adds	r3, #48	; 0x30
1a00399a:	ea54 0205 	orrs.w	r2, r4, r5
1a00399e:	f801 3c01 	strb.w	r3, [r1, #-1]
1a0039a2:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
1a0039a6:	d1ee      	bne.n	1a003986 <_vfprintf_r+0x5a6>
1a0039a8:	f018 0f01 	tst.w	r8, #1
1a0039ac:	f000 8314 	beq.w	1a003fd8 <_vfprintf_r+0xbf8>
1a0039b0:	2b30      	cmp	r3, #48	; 0x30
1a0039b2:	f000 8311 	beq.w	1a003fd8 <_vfprintf_r+0xbf8>
1a0039b6:	9a04      	ldr	r2, [sp, #16]
1a0039b8:	3902      	subs	r1, #2
1a0039ba:	2330      	movs	r3, #48	; 0x30
1a0039bc:	1a52      	subs	r2, r2, r1
1a0039be:	f807 3c01 	strb.w	r3, [r7, #-1]
1a0039c2:	9209      	str	r2, [sp, #36]	; 0x24
1a0039c4:	460f      	mov	r7, r1
1a0039c6:	e68c      	b.n	1a0036e2 <_vfprintf_r+0x302>
1a0039c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a0039cc:	2200      	movs	r2, #0
1a0039ce:	f81a 6b01 	ldrb.w	r6, [sl], #1
1a0039d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0039d6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a0039da:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a0039de:	2b09      	cmp	r3, #9
1a0039e0:	d9f5      	bls.n	1a0039ce <_vfprintf_r+0x5ee>
1a0039e2:	9206      	str	r2, [sp, #24]
1a0039e4:	e57c      	b.n	1a0034e0 <_vfprintf_r+0x100>
1a0039e6:	4b14      	ldr	r3, [pc, #80]	; (1a003a38 <_vfprintf_r+0x658>)
1a0039e8:	9317      	str	r3, [sp, #92]	; 0x5c
1a0039ea:	f018 0f20 	tst.w	r8, #32
1a0039ee:	f000 8114 	beq.w	1a003c1a <_vfprintf_r+0x83a>
1a0039f2:	9c08      	ldr	r4, [sp, #32]
1a0039f4:	3407      	adds	r4, #7
1a0039f6:	f024 0307 	bic.w	r3, r4, #7
1a0039fa:	e9d3 4500 	ldrd	r4, r5, [r3]
1a0039fe:	f103 0208 	add.w	r2, r3, #8
1a003a02:	9208      	str	r2, [sp, #32]
1a003a04:	f018 0f01 	tst.w	r8, #1
1a003a08:	d009      	beq.n	1a003a1e <_vfprintf_r+0x63e>
1a003a0a:	ea54 0305 	orrs.w	r3, r4, r5
1a003a0e:	d006      	beq.n	1a003a1e <_vfprintf_r+0x63e>
1a003a10:	2330      	movs	r3, #48	; 0x30
1a003a12:	f88d 608d 	strb.w	r6, [sp, #141]	; 0x8d
1a003a16:	f048 0802 	orr.w	r8, r8, #2
1a003a1a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
1a003a1e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
1a003a22:	2202      	movs	r2, #2
1a003a24:	e79d      	b.n	1a003962 <_vfprintf_r+0x582>
1a003a26:	f048 0801 	orr.w	r8, r8, #1
1a003a2a:	f89a 6000 	ldrb.w	r6, [sl]
1a003a2e:	e555      	b.n	1a0034dc <_vfprintf_r+0xfc>
1a003a30:	1a00853c 	.word	0x1a00853c
1a003a34:	1a00854c 	.word	0x1a00854c
1a003a38:	1a008508 	.word	0x1a008508
1a003a3c:	9e03      	ldr	r6, [sp, #12]
1a003a3e:	4630      	mov	r0, r6
1a003a40:	f002 fe80 	bl	1a006744 <_localeconv_r>
1a003a44:	6843      	ldr	r3, [r0, #4]
1a003a46:	9318      	str	r3, [sp, #96]	; 0x60
1a003a48:	4618      	mov	r0, r3
1a003a4a:	f7ff fc59 	bl	1a003300 <strlen>
1a003a4e:	901b      	str	r0, [sp, #108]	; 0x6c
1a003a50:	4604      	mov	r4, r0
1a003a52:	4630      	mov	r0, r6
1a003a54:	f002 fe76 	bl	1a006744 <_localeconv_r>
1a003a58:	6883      	ldr	r3, [r0, #8]
1a003a5a:	931a      	str	r3, [sp, #104]	; 0x68
1a003a5c:	2c00      	cmp	r4, #0
1a003a5e:	f43f adb8 	beq.w	1a0035d2 <_vfprintf_r+0x1f2>
1a003a62:	f89a 6000 	ldrb.w	r6, [sl]
1a003a66:	2b00      	cmp	r3, #0
1a003a68:	f43f ad38 	beq.w	1a0034dc <_vfprintf_r+0xfc>
1a003a6c:	781b      	ldrb	r3, [r3, #0]
1a003a6e:	2b00      	cmp	r3, #0
1a003a70:	f43f ad34 	beq.w	1a0034dc <_vfprintf_r+0xfc>
1a003a74:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
1a003a78:	e530      	b.n	1a0034dc <_vfprintf_r+0xfc>
1a003a7a:	9b08      	ldr	r3, [sp, #32]
1a003a7c:	f89a 6000 	ldrb.w	r6, [sl]
1a003a80:	681a      	ldr	r2, [r3, #0]
1a003a82:	9206      	str	r2, [sp, #24]
1a003a84:	2a00      	cmp	r2, #0
1a003a86:	f103 0304 	add.w	r3, r3, #4
1a003a8a:	f2c0 8697 	blt.w	1a0047bc <_vfprintf_r+0x13dc>
1a003a8e:	9308      	str	r3, [sp, #32]
1a003a90:	e524      	b.n	1a0034dc <_vfprintf_r+0xfc>
1a003a92:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
1a003a96:	f89a 6000 	ldrb.w	r6, [sl]
1a003a9a:	e51f      	b.n	1a0034dc <_vfprintf_r+0xfc>
1a003a9c:	f89a 6000 	ldrb.w	r6, [sl]
1a003aa0:	f048 0804 	orr.w	r8, r8, #4
1a003aa4:	e51a      	b.n	1a0034dc <_vfprintf_r+0xfc>
1a003aa6:	f89a 6000 	ldrb.w	r6, [sl]
1a003aaa:	2e2a      	cmp	r6, #42	; 0x2a
1a003aac:	f10a 0201 	add.w	r2, sl, #1
1a003ab0:	f001 81b0 	beq.w	1a004e14 <_vfprintf_r+0x1a34>
1a003ab4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a003ab8:	2b09      	cmp	r3, #9
1a003aba:	4692      	mov	sl, r2
1a003abc:	f04f 0900 	mov.w	r9, #0
1a003ac0:	f63f ad0e 	bhi.w	1a0034e0 <_vfprintf_r+0x100>
1a003ac4:	f81a 6b01 	ldrb.w	r6, [sl], #1
1a003ac8:	eb09 0989 	add.w	r9, r9, r9, lsl #2
1a003acc:	eb03 0949 	add.w	r9, r3, r9, lsl #1
1a003ad0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
1a003ad4:	2b09      	cmp	r3, #9
1a003ad6:	d9f5      	bls.n	1a003ac4 <_vfprintf_r+0x6e4>
1a003ad8:	e502      	b.n	1a0034e0 <_vfprintf_r+0x100>
1a003ada:	f048 0880 	orr.w	r8, r8, #128	; 0x80
1a003ade:	f89a 6000 	ldrb.w	r6, [sl]
1a003ae2:	e4fb      	b.n	1a0034dc <_vfprintf_r+0xfc>
1a003ae4:	9c08      	ldr	r4, [sp, #32]
1a003ae6:	3407      	adds	r4, #7
1a003ae8:	f024 0407 	bic.w	r4, r4, #7
1a003aec:	ed94 7b00 	vldr	d7, [r4]
1a003af0:	ec52 1b17 	vmov	r1, r2, d7
1a003af4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
1a003af8:	931d      	str	r3, [sp, #116]	; 0x74
1a003afa:	ed8d 7a1c 	vstr	s14, [sp, #112]	; 0x70
1a003afe:	3408      	adds	r4, #8
1a003b00:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a003b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003b08:	4bba      	ldr	r3, [pc, #744]	; (1a003df4 <_vfprintf_r+0xa14>)
1a003b0a:	9408      	str	r4, [sp, #32]
1a003b0c:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
1a003b10:	f004 fa0e 	bl	1a007f30 <__aeabi_dcmpun>
1a003b14:	2800      	cmp	r0, #0
1a003b16:	f040 846f 	bne.w	1a0043f8 <_vfprintf_r+0x1018>
1a003b1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003b1e:	4bb5      	ldr	r3, [pc, #724]	; (1a003df4 <_vfprintf_r+0xa14>)
1a003b20:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
1a003b24:	f004 f9e6 	bl	1a007ef4 <__aeabi_dcmple>
1a003b28:	2800      	cmp	r0, #0
1a003b2a:	f040 8465 	bne.w	1a0043f8 <_vfprintf_r+0x1018>
1a003b2e:	2200      	movs	r2, #0
1a003b30:	2300      	movs	r3, #0
1a003b32:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a003b36:	f004 f9d3 	bl	1a007ee0 <__aeabi_dcmplt>
1a003b3a:	2800      	cmp	r0, #0
1a003b3c:	f040 855b 	bne.w	1a0045f6 <_vfprintf_r+0x1216>
1a003b40:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a003b44:	4fac      	ldr	r7, [pc, #688]	; (1a003df8 <_vfprintf_r+0xa18>)
1a003b46:	4bad      	ldr	r3, [pc, #692]	; (1a003dfc <_vfprintf_r+0xa1c>)
1a003b48:	2000      	movs	r0, #0
1a003b4a:	2103      	movs	r1, #3
1a003b4c:	9104      	str	r1, [sp, #16]
1a003b4e:	900a      	str	r0, [sp, #40]	; 0x28
1a003b50:	f028 0880 	bic.w	r8, r8, #128	; 0x80
1a003b54:	2e47      	cmp	r6, #71	; 0x47
1a003b56:	bfd8      	it	le
1a003b58:	461f      	movle	r7, r3
1a003b5a:	9109      	str	r1, [sp, #36]	; 0x24
1a003b5c:	4681      	mov	r9, r0
1a003b5e:	900f      	str	r0, [sp, #60]	; 0x3c
1a003b60:	9014      	str	r0, [sp, #80]	; 0x50
1a003b62:	9011      	str	r0, [sp, #68]	; 0x44
1a003b64:	e5c9      	b.n	1a0036fa <_vfprintf_r+0x31a>
1a003b66:	9808      	ldr	r0, [sp, #32]
1a003b68:	2300      	movs	r3, #0
1a003b6a:	6801      	ldr	r1, [r0, #0]
1a003b6c:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a003b70:	461a      	mov	r2, r3
1a003b72:	f88d 10f4 	strb.w	r1, [sp, #244]	; 0xf4
1a003b76:	2301      	movs	r3, #1
1a003b78:	1d01      	adds	r1, r0, #4
1a003b7a:	9304      	str	r3, [sp, #16]
1a003b7c:	920a      	str	r2, [sp, #40]	; 0x28
1a003b7e:	4691      	mov	r9, r2
1a003b80:	920f      	str	r2, [sp, #60]	; 0x3c
1a003b82:	9214      	str	r2, [sp, #80]	; 0x50
1a003b84:	9211      	str	r2, [sp, #68]	; 0x44
1a003b86:	e9cd 1308 	strd	r1, r3, [sp, #32]
1a003b8a:	af3d      	add	r7, sp, #244	; 0xf4
1a003b8c:	e5b9      	b.n	1a003702 <_vfprintf_r+0x322>
1a003b8e:	9b08      	ldr	r3, [sp, #32]
1a003b90:	681f      	ldr	r7, [r3, #0]
1a003b92:	2500      	movs	r5, #0
1a003b94:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
1a003b98:	1d1c      	adds	r4, r3, #4
1a003b9a:	2f00      	cmp	r7, #0
1a003b9c:	f000 8639 	beq.w	1a004812 <_vfprintf_r+0x1432>
1a003ba0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a003ba4:	f000 8711 	beq.w	1a0049ca <_vfprintf_r+0x15ea>
1a003ba8:	464a      	mov	r2, r9
1a003baa:	4629      	mov	r1, r5
1a003bac:	4638      	mov	r0, r7
1a003bae:	f003 f8ff 	bl	1a006db0 <memchr>
1a003bb2:	900a      	str	r0, [sp, #40]	; 0x28
1a003bb4:	2800      	cmp	r0, #0
1a003bb6:	f000 85e7 	beq.w	1a004788 <_vfprintf_r+0x13a8>
1a003bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a003bbc:	1bdb      	subs	r3, r3, r7
1a003bbe:	9309      	str	r3, [sp, #36]	; 0x24
1a003bc0:	46a9      	mov	r9, r5
1a003bc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a003bc6:	9408      	str	r4, [sp, #32]
1a003bc8:	9304      	str	r3, [sp, #16]
1a003bca:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a003bce:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
1a003bd2:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
1a003bd6:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
1a003bda:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a003bde:	e58c      	b.n	1a0036fa <_vfprintf_r+0x31a>
1a003be0:	f048 0310 	orr.w	r3, r8, #16
1a003be4:	069a      	lsls	r2, r3, #26
1a003be6:	f53f aeb2 	bmi.w	1a00394e <_vfprintf_r+0x56e>
1a003bea:	9a08      	ldr	r2, [sp, #32]
1a003bec:	06df      	lsls	r7, r3, #27
1a003bee:	f102 0104 	add.w	r1, r2, #4
1a003bf2:	f100 837e 	bmi.w	1a0042f2 <_vfprintf_r+0xf12>
1a003bf6:	065d      	lsls	r5, r3, #25
1a003bf8:	9a08      	ldr	r2, [sp, #32]
1a003bfa:	f100 84e4 	bmi.w	1a0045c6 <_vfprintf_r+0x11e6>
1a003bfe:	059c      	lsls	r4, r3, #22
1a003c00:	f140 8377 	bpl.w	1a0042f2 <_vfprintf_r+0xf12>
1a003c04:	7814      	ldrb	r4, [r2, #0]
1a003c06:	9108      	str	r1, [sp, #32]
1a003c08:	2500      	movs	r5, #0
1a003c0a:	2201      	movs	r2, #1
1a003c0c:	e6a9      	b.n	1a003962 <_vfprintf_r+0x582>
1a003c0e:	4b7c      	ldr	r3, [pc, #496]	; (1a003e00 <_vfprintf_r+0xa20>)
1a003c10:	9317      	str	r3, [sp, #92]	; 0x5c
1a003c12:	f018 0f20 	tst.w	r8, #32
1a003c16:	f47f aeec 	bne.w	1a0039f2 <_vfprintf_r+0x612>
1a003c1a:	9a08      	ldr	r2, [sp, #32]
1a003c1c:	f018 0f10 	tst.w	r8, #16
1a003c20:	f102 0304 	add.w	r3, r2, #4
1a003c24:	f040 8354 	bne.w	1a0042d0 <_vfprintf_r+0xef0>
1a003c28:	f018 0f40 	tst.w	r8, #64	; 0x40
1a003c2c:	9a08      	ldr	r2, [sp, #32]
1a003c2e:	f040 84d0 	bne.w	1a0045d2 <_vfprintf_r+0x11f2>
1a003c32:	f418 7f00 	tst.w	r8, #512	; 0x200
1a003c36:	f000 834b 	beq.w	1a0042d0 <_vfprintf_r+0xef0>
1a003c3a:	7814      	ldrb	r4, [r2, #0]
1a003c3c:	9308      	str	r3, [sp, #32]
1a003c3e:	2500      	movs	r5, #0
1a003c40:	e6e0      	b.n	1a003a04 <_vfprintf_r+0x624>
1a003c42:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
1a003c46:	f89a 6000 	ldrb.w	r6, [sl]
1a003c4a:	2b00      	cmp	r3, #0
1a003c4c:	f47f ac46 	bne.w	1a0034dc <_vfprintf_r+0xfc>
1a003c50:	2320      	movs	r3, #32
1a003c52:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a003c56:	e441      	b.n	1a0034dc <_vfprintf_r+0xfc>
1a003c58:	f89a 6000 	ldrb.w	r6, [sl]
1a003c5c:	2e6c      	cmp	r6, #108	; 0x6c
1a003c5e:	bf03      	ittte	eq
1a003c60:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
1a003c64:	f048 0820 	orreq.w	r8, r8, #32
1a003c68:	f10a 0a01 	addeq.w	sl, sl, #1
1a003c6c:	f048 0810 	orrne.w	r8, r8, #16
1a003c70:	e434      	b.n	1a0034dc <_vfprintf_r+0xfc>
1a003c72:	9a08      	ldr	r2, [sp, #32]
1a003c74:	f018 0f20 	tst.w	r8, #32
1a003c78:	f852 3b04 	ldr.w	r3, [r2], #4
1a003c7c:	9208      	str	r2, [sp, #32]
1a003c7e:	f000 83a1 	beq.w	1a0043c4 <_vfprintf_r+0xfe4>
1a003c82:	9a05      	ldr	r2, [sp, #20]
1a003c84:	4610      	mov	r0, r2
1a003c86:	17d1      	asrs	r1, r2, #31
1a003c88:	e9c3 0100 	strd	r0, r1, [r3]
1a003c8c:	4657      	mov	r7, sl
1a003c8e:	e64d      	b.n	1a00392c <_vfprintf_r+0x54c>
1a003c90:	f89a 6000 	ldrb.w	r6, [sl]
1a003c94:	2e68      	cmp	r6, #104	; 0x68
1a003c96:	bf03      	ittte	eq
1a003c98:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
1a003c9c:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
1a003ca0:	f10a 0a01 	addeq.w	sl, sl, #1
1a003ca4:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
1a003ca8:	e418      	b.n	1a0034dc <_vfprintf_r+0xfc>
1a003caa:	9908      	ldr	r1, [sp, #32]
1a003cac:	4b55      	ldr	r3, [pc, #340]	; (1a003e04 <_vfprintf_r+0xa24>)
1a003cae:	680c      	ldr	r4, [r1, #0]
1a003cb0:	9317      	str	r3, [sp, #92]	; 0x5c
1a003cb2:	f647 0230 	movw	r2, #30768	; 0x7830
1a003cb6:	3104      	adds	r1, #4
1a003cb8:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
1a003cbc:	f048 0302 	orr.w	r3, r8, #2
1a003cc0:	9108      	str	r1, [sp, #32]
1a003cc2:	2500      	movs	r5, #0
1a003cc4:	2202      	movs	r2, #2
1a003cc6:	2678      	movs	r6, #120	; 0x78
1a003cc8:	e64b      	b.n	1a003962 <_vfprintf_r+0x582>
1a003cca:	f048 0808 	orr.w	r8, r8, #8
1a003cce:	f89a 6000 	ldrb.w	r6, [sl]
1a003cd2:	e403      	b.n	1a0034dc <_vfprintf_r+0xfc>
1a003cd4:	f048 0310 	orr.w	r3, r8, #16
1a003cd8:	069f      	lsls	r7, r3, #26
1a003cda:	f53f acd1 	bmi.w	1a003680 <_vfprintf_r+0x2a0>
1a003cde:	9908      	ldr	r1, [sp, #32]
1a003ce0:	06dd      	lsls	r5, r3, #27
1a003ce2:	f101 0204 	add.w	r2, r1, #4
1a003ce6:	f100 82fd 	bmi.w	1a0042e4 <_vfprintf_r+0xf04>
1a003cea:	065c      	lsls	r4, r3, #25
1a003cec:	9908      	ldr	r1, [sp, #32]
1a003cee:	f100 8475 	bmi.w	1a0045dc <_vfprintf_r+0x11fc>
1a003cf2:	0598      	lsls	r0, r3, #22
1a003cf4:	f140 82f6 	bpl.w	1a0042e4 <_vfprintf_r+0xf04>
1a003cf8:	f991 4000 	ldrsb.w	r4, [r1]
1a003cfc:	9208      	str	r2, [sp, #32]
1a003cfe:	17e5      	asrs	r5, r4, #31
1a003d00:	4620      	mov	r0, r4
1a003d02:	4629      	mov	r1, r5
1a003d04:	e4c7      	b.n	1a003696 <_vfprintf_r+0x2b6>
1a003d06:	9a08      	ldr	r2, [sp, #32]
1a003d08:	f018 0f10 	tst.w	r8, #16
1a003d0c:	f102 0304 	add.w	r3, r2, #4
1a003d10:	f040 82e3 	bne.w	1a0042da <_vfprintf_r+0xefa>
1a003d14:	f018 0f40 	tst.w	r8, #64	; 0x40
1a003d18:	9a08      	ldr	r2, [sp, #32]
1a003d1a:	f040 8467 	bne.w	1a0045ec <_vfprintf_r+0x120c>
1a003d1e:	f418 7f00 	tst.w	r8, #512	; 0x200
1a003d22:	f000 82da 	beq.w	1a0042da <_vfprintf_r+0xefa>
1a003d26:	7814      	ldrb	r4, [r2, #0]
1a003d28:	9308      	str	r3, [sp, #32]
1a003d2a:	2500      	movs	r5, #0
1a003d2c:	e488      	b.n	1a003640 <_vfprintf_r+0x260>
1a003d2e:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a003d32:	f002 fd1b 	bl	1a00676c <__retarget_lock_release_recursive>
1a003d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a003d3a:	9305      	str	r3, [sp, #20]
1a003d3c:	e443      	b.n	1a0035c6 <_vfprintf_r+0x1e6>
1a003d3e:	2e00      	cmp	r6, #0
1a003d40:	f43f adf8 	beq.w	1a003934 <_vfprintf_r+0x554>
1a003d44:	2300      	movs	r3, #0
1a003d46:	2101      	movs	r1, #1
1a003d48:	461a      	mov	r2, r3
1a003d4a:	9104      	str	r1, [sp, #16]
1a003d4c:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
1a003d50:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
1a003d54:	930a      	str	r3, [sp, #40]	; 0x28
1a003d56:	4699      	mov	r9, r3
1a003d58:	930f      	str	r3, [sp, #60]	; 0x3c
1a003d5a:	9314      	str	r3, [sp, #80]	; 0x50
1a003d5c:	9311      	str	r3, [sp, #68]	; 0x44
1a003d5e:	9109      	str	r1, [sp, #36]	; 0x24
1a003d60:	af3d      	add	r7, sp, #244	; 0xf4
1a003d62:	e4ce      	b.n	1a003702 <_vfprintf_r+0x322>
1a003d64:	2e65      	cmp	r6, #101	; 0x65
1a003d66:	f340 80ca 	ble.w	1a003efe <_vfprintf_r+0xb1e>
1a003d6a:	2200      	movs	r2, #0
1a003d6c:	2300      	movs	r3, #0
1a003d6e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a003d72:	f004 f8ab 	bl	1a007ecc <__aeabi_dcmpeq>
1a003d76:	2800      	cmp	r0, #0
1a003d78:	f000 8169 	beq.w	1a00404e <_vfprintf_r+0xc6e>
1a003d7c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a003d7e:	4a22      	ldr	r2, [pc, #136]	; (1a003e08 <_vfprintf_r+0xa28>)
1a003d80:	f8cb 2000 	str.w	r2, [fp]
1a003d84:	3301      	adds	r3, #1
1a003d86:	3401      	adds	r4, #1
1a003d88:	2201      	movs	r2, #1
1a003d8a:	2b07      	cmp	r3, #7
1a003d8c:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a003d90:	f8cb 2004 	str.w	r2, [fp, #4]
1a003d94:	f300 8406 	bgt.w	1a0045a4 <_vfprintf_r+0x11c4>
1a003d98:	f10b 0b08 	add.w	fp, fp, #8
1a003d9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a003d9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a003da0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003da2:	4293      	cmp	r3, r2
1a003da4:	db03      	blt.n	1a003dae <_vfprintf_r+0x9ce>
1a003da6:	f018 0f01 	tst.w	r8, #1
1a003daa:	f43f ad6a 	beq.w	1a003882 <_vfprintf_r+0x4a2>
1a003dae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a003db0:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a003db2:	f8cb 2000 	str.w	r2, [fp]
1a003db6:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a003db8:	f8cb 2004 	str.w	r2, [fp, #4]
1a003dbc:	3301      	adds	r3, #1
1a003dbe:	4414      	add	r4, r2
1a003dc0:	2b07      	cmp	r3, #7
1a003dc2:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
1a003dc6:	f300 8517 	bgt.w	1a0047f8 <_vfprintf_r+0x1418>
1a003dca:	f10b 0b08 	add.w	fp, fp, #8
1a003dce:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a003dd0:	1e5d      	subs	r5, r3, #1
1a003dd2:	2d00      	cmp	r5, #0
1a003dd4:	f77f ad55 	ble.w	1a003882 <_vfprintf_r+0x4a2>
1a003dd8:	2d10      	cmp	r5, #16
1a003dda:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a003ddc:	4b0b      	ldr	r3, [pc, #44]	; (1a003e0c <_vfprintf_r+0xa2c>)
1a003dde:	f340 82e7 	ble.w	1a0043b0 <_vfprintf_r+0xfd0>
1a003de2:	4619      	mov	r1, r3
1a003de4:	2610      	movs	r6, #16
1a003de6:	4623      	mov	r3, r4
1a003de8:	9f03      	ldr	r7, [sp, #12]
1a003dea:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a003dee:	460c      	mov	r4, r1
1a003df0:	e014      	b.n	1a003e1c <_vfprintf_r+0xa3c>
1a003df2:	bf00      	nop
1a003df4:	7fefffff 	.word	0x7fefffff
1a003df8:	1a0084fc 	.word	0x1a0084fc
1a003dfc:	1a0084f8 	.word	0x1a0084f8
1a003e00:	1a00851c 	.word	0x1a00851c
1a003e04:	1a008508 	.word	0x1a008508
1a003e08:	1a008538 	.word	0x1a008538
1a003e0c:	1a00854c 	.word	0x1a00854c
1a003e10:	f10b 0b08 	add.w	fp, fp, #8
1a003e14:	3d10      	subs	r5, #16
1a003e16:	2d10      	cmp	r5, #16
1a003e18:	f340 82c7 	ble.w	1a0043aa <_vfprintf_r+0xfca>
1a003e1c:	3201      	adds	r2, #1
1a003e1e:	3310      	adds	r3, #16
1a003e20:	2a07      	cmp	r2, #7
1a003e22:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
1a003e26:	e9cb 4600 	strd	r4, r6, [fp]
1a003e2a:	ddf1      	ble.n	1a003e10 <_vfprintf_r+0xa30>
1a003e2c:	aa2a      	add	r2, sp, #168	; 0xa8
1a003e2e:	4649      	mov	r1, r9
1a003e30:	4638      	mov	r0, r7
1a003e32:	f003 fe1b 	bl	1a007a6c <__sprint_r>
1a003e36:	2800      	cmp	r0, #0
1a003e38:	d14c      	bne.n	1a003ed4 <_vfprintf_r+0xaf4>
1a003e3a:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
1a003e3e:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003e42:	e7e7      	b.n	1a003e14 <_vfprintf_r+0xa34>
1a003e44:	9b06      	ldr	r3, [sp, #24]
1a003e46:	9a04      	ldr	r2, [sp, #16]
1a003e48:	1a9d      	subs	r5, r3, r2
1a003e4a:	2d00      	cmp	r5, #0
1a003e4c:	f77f acc9 	ble.w	1a0037e2 <_vfprintf_r+0x402>
1a003e50:	2d10      	cmp	r5, #16
1a003e52:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a003e54:	4bbc      	ldr	r3, [pc, #752]	; (1a004148 <_vfprintf_r+0xd68>)
1a003e56:	dd27      	ble.n	1a003ea8 <_vfprintf_r+0xac8>
1a003e58:	4659      	mov	r1, fp
1a003e5a:	4620      	mov	r0, r4
1a003e5c:	46bb      	mov	fp, r7
1a003e5e:	461c      	mov	r4, r3
1a003e60:	4637      	mov	r7, r6
1a003e62:	9e07      	ldr	r6, [sp, #28]
1a003e64:	e004      	b.n	1a003e70 <_vfprintf_r+0xa90>
1a003e66:	3d10      	subs	r5, #16
1a003e68:	2d10      	cmp	r5, #16
1a003e6a:	f101 0108 	add.w	r1, r1, #8
1a003e6e:	dd16      	ble.n	1a003e9e <_vfprintf_r+0xabe>
1a003e70:	3201      	adds	r2, #1
1a003e72:	3010      	adds	r0, #16
1a003e74:	2310      	movs	r3, #16
1a003e76:	2a07      	cmp	r2, #7
1a003e78:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
1a003e7c:	600c      	str	r4, [r1, #0]
1a003e7e:	604b      	str	r3, [r1, #4]
1a003e80:	ddf1      	ble.n	1a003e66 <_vfprintf_r+0xa86>
1a003e82:	aa2a      	add	r2, sp, #168	; 0xa8
1a003e84:	4631      	mov	r1, r6
1a003e86:	9803      	ldr	r0, [sp, #12]
1a003e88:	f003 fdf0 	bl	1a007a6c <__sprint_r>
1a003e8c:	2800      	cmp	r0, #0
1a003e8e:	f040 80a8 	bne.w	1a003fe2 <_vfprintf_r+0xc02>
1a003e92:	3d10      	subs	r5, #16
1a003e94:	2d10      	cmp	r5, #16
1a003e96:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
1a003e9a:	a92d      	add	r1, sp, #180	; 0xb4
1a003e9c:	dce8      	bgt.n	1a003e70 <_vfprintf_r+0xa90>
1a003e9e:	463e      	mov	r6, r7
1a003ea0:	4623      	mov	r3, r4
1a003ea2:	465f      	mov	r7, fp
1a003ea4:	4604      	mov	r4, r0
1a003ea6:	468b      	mov	fp, r1
1a003ea8:	3201      	adds	r2, #1
1a003eaa:	442c      	add	r4, r5
1a003eac:	2a07      	cmp	r2, #7
1a003eae:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a003eb2:	e9cb 3500 	strd	r3, r5, [fp]
1a003eb6:	f300 8292 	bgt.w	1a0043de <_vfprintf_r+0xffe>
1a003eba:	f10b 0b08 	add.w	fp, fp, #8
1a003ebe:	e490      	b.n	1a0037e2 <_vfprintf_r+0x402>
1a003ec0:	aa2a      	add	r2, sp, #168	; 0xa8
1a003ec2:	9907      	ldr	r1, [sp, #28]
1a003ec4:	9803      	ldr	r0, [sp, #12]
1a003ec6:	f003 fdd1 	bl	1a007a6c <__sprint_r>
1a003eca:	2800      	cmp	r0, #0
1a003ecc:	f43f ad23 	beq.w	1a003916 <_vfprintf_r+0x536>
1a003ed0:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a003ed4:	990a      	ldr	r1, [sp, #40]	; 0x28
1a003ed6:	b111      	cbz	r1, 1a003ede <_vfprintf_r+0xafe>
1a003ed8:	9803      	ldr	r0, [sp, #12]
1a003eda:	f002 f997 	bl	1a00620c <_free_r>
1a003ede:	f8d9 2064 	ldr.w	r2, [r9, #100]	; 0x64
1a003ee2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a003ee6:	07d0      	lsls	r0, r2, #31
1a003ee8:	d402      	bmi.n	1a003ef0 <_vfprintf_r+0xb10>
1a003eea:	0599      	lsls	r1, r3, #22
1a003eec:	f140 81d0 	bpl.w	1a004290 <_vfprintf_r+0xeb0>
1a003ef0:	065a      	lsls	r2, r3, #25
1a003ef2:	f53f ab65 	bmi.w	1a0035c0 <_vfprintf_r+0x1e0>
1a003ef6:	9805      	ldr	r0, [sp, #20]
1a003ef8:	b057      	add	sp, #348	; 0x15c
1a003efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003efe:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a003f00:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a003f02:	2a01      	cmp	r2, #1
1a003f04:	f104 0401 	add.w	r4, r4, #1
1a003f08:	f103 0501 	add.w	r5, r3, #1
1a003f0c:	f10b 0608 	add.w	r6, fp, #8
1a003f10:	f340 811c 	ble.w	1a00414c <_vfprintf_r+0xd6c>
1a003f14:	2301      	movs	r3, #1
1a003f16:	2d07      	cmp	r5, #7
1a003f18:	f8cb 7000 	str.w	r7, [fp]
1a003f1c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
1a003f20:	f8cb 3004 	str.w	r3, [fp, #4]
1a003f24:	f300 81bb 	bgt.w	1a00429e <_vfprintf_r+0xebe>
1a003f28:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a003f2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
1a003f2c:	1c69      	adds	r1, r5, #1
1a003f2e:	441c      	add	r4, r3
1a003f30:	2907      	cmp	r1, #7
1a003f32:	910b      	str	r1, [sp, #44]	; 0x2c
1a003f34:	e9cd 142b 	strd	r1, r4, [sp, #172]	; 0xac
1a003f38:	e9c6 2300 	strd	r2, r3, [r6]
1a003f3c:	f300 81bb 	bgt.w	1a0042b6 <_vfprintf_r+0xed6>
1a003f40:	3608      	adds	r6, #8
1a003f42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a003f44:	1c53      	adds	r3, r2, #1
1a003f46:	461d      	mov	r5, r3
1a003f48:	9509      	str	r5, [sp, #36]	; 0x24
1a003f4a:	9d10      	ldr	r5, [sp, #64]	; 0x40
1a003f4c:	930e      	str	r3, [sp, #56]	; 0x38
1a003f4e:	2200      	movs	r2, #0
1a003f50:	2300      	movs	r3, #0
1a003f52:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a003f56:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
1a003f5a:	f106 0b08 	add.w	fp, r6, #8
1a003f5e:	f003 ffb5 	bl	1a007ecc <__aeabi_dcmpeq>
1a003f62:	2800      	cmp	r0, #0
1a003f64:	f040 80c2 	bne.w	1a0040ec <_vfprintf_r+0xd0c>
1a003f68:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a003f6a:	f8c6 9004 	str.w	r9, [r6, #4]
1a003f6e:	3701      	adds	r7, #1
1a003f70:	444c      	add	r4, r9
1a003f72:	2d07      	cmp	r5, #7
1a003f74:	6037      	str	r7, [r6, #0]
1a003f76:	942c      	str	r4, [sp, #176]	; 0xb0
1a003f78:	952b      	str	r5, [sp, #172]	; 0xac
1a003f7a:	f300 80f9 	bgt.w	1a004170 <_vfprintf_r+0xd90>
1a003f7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a003f80:	f106 0310 	add.w	r3, r6, #16
1a003f84:	3202      	adds	r2, #2
1a003f86:	465e      	mov	r6, fp
1a003f88:	9209      	str	r2, [sp, #36]	; 0x24
1a003f8a:	469b      	mov	fp, r3
1a003f8c:	9a19      	ldr	r2, [sp, #100]	; 0x64
1a003f8e:	6072      	str	r2, [r6, #4]
1a003f90:	4414      	add	r4, r2
1a003f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a003f94:	942c      	str	r4, [sp, #176]	; 0xb0
1a003f96:	ab26      	add	r3, sp, #152	; 0x98
1a003f98:	2a07      	cmp	r2, #7
1a003f9a:	922b      	str	r2, [sp, #172]	; 0xac
1a003f9c:	6033      	str	r3, [r6, #0]
1a003f9e:	f77f ac70 	ble.w	1a003882 <_vfprintf_r+0x4a2>
1a003fa2:	aa2a      	add	r2, sp, #168	; 0xa8
1a003fa4:	9907      	ldr	r1, [sp, #28]
1a003fa6:	9803      	ldr	r0, [sp, #12]
1a003fa8:	f003 fd60 	bl	1a007a6c <__sprint_r>
1a003fac:	2800      	cmp	r0, #0
1a003fae:	d18f      	bne.n	1a003ed0 <_vfprintf_r+0xaf0>
1a003fb0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003fb2:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003fb6:	e464      	b.n	1a003882 <_vfprintf_r+0x4a2>
1a003fb8:	9817      	ldr	r0, [sp, #92]	; 0x5c
1a003fba:	af56      	add	r7, sp, #344	; 0x158
1a003fbc:	0923      	lsrs	r3, r4, #4
1a003fbe:	f004 010f 	and.w	r1, r4, #15
1a003fc2:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
1a003fc6:	092a      	lsrs	r2, r5, #4
1a003fc8:	461c      	mov	r4, r3
1a003fca:	4615      	mov	r5, r2
1a003fcc:	5c43      	ldrb	r3, [r0, r1]
1a003fce:	f807 3d01 	strb.w	r3, [r7, #-1]!
1a003fd2:	ea54 0305 	orrs.w	r3, r4, r5
1a003fd6:	d1f1      	bne.n	1a003fbc <_vfprintf_r+0xbdc>
1a003fd8:	9b04      	ldr	r3, [sp, #16]
1a003fda:	1bdb      	subs	r3, r3, r7
1a003fdc:	9309      	str	r3, [sp, #36]	; 0x24
1a003fde:	f7ff bb80 	b.w	1a0036e2 <_vfprintf_r+0x302>
1a003fe2:	46b1      	mov	r9, r6
1a003fe4:	e776      	b.n	1a003ed4 <_vfprintf_r+0xaf4>
1a003fe6:	aa2a      	add	r2, sp, #168	; 0xa8
1a003fe8:	9907      	ldr	r1, [sp, #28]
1a003fea:	9803      	ldr	r0, [sp, #12]
1a003fec:	f003 fd3e 	bl	1a007a6c <__sprint_r>
1a003ff0:	2800      	cmp	r0, #0
1a003ff2:	f47f af6d 	bne.w	1a003ed0 <_vfprintf_r+0xaf0>
1a003ff6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a003ff8:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a003ffc:	f7ff bbdd 	b.w	1a0037ba <_vfprintf_r+0x3da>
1a004000:	aa2a      	add	r2, sp, #168	; 0xa8
1a004002:	9907      	ldr	r1, [sp, #28]
1a004004:	9803      	ldr	r0, [sp, #12]
1a004006:	f003 fd31 	bl	1a007a6c <__sprint_r>
1a00400a:	2800      	cmp	r0, #0
1a00400c:	f47f af60 	bne.w	1a003ed0 <_vfprintf_r+0xaf0>
1a004010:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a004012:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a004016:	f7ff bbe0 	b.w	1a0037da <_vfprintf_r+0x3fa>
1a00401a:	4698      	mov	r8, r3
1a00401c:	2d00      	cmp	r5, #0
1a00401e:	bf08      	it	eq
1a004020:	2c0a      	cmpeq	r4, #10
1a004022:	f080 8170 	bcs.w	1a004306 <_vfprintf_r+0xf26>
1a004026:	af56      	add	r7, sp, #344	; 0x158
1a004028:	3430      	adds	r4, #48	; 0x30
1a00402a:	2301      	movs	r3, #1
1a00402c:	f807 4d01 	strb.w	r4, [r7, #-1]!
1a004030:	9309      	str	r3, [sp, #36]	; 0x24
1a004032:	f7ff bb56 	b.w	1a0036e2 <_vfprintf_r+0x302>
1a004036:	aa2a      	add	r2, sp, #168	; 0xa8
1a004038:	9907      	ldr	r1, [sp, #28]
1a00403a:	9803      	ldr	r0, [sp, #12]
1a00403c:	f003 fd16 	bl	1a007a6c <__sprint_r>
1a004040:	2800      	cmp	r0, #0
1a004042:	f47f af45 	bne.w	1a003ed0 <_vfprintf_r+0xaf0>
1a004046:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a004048:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00404c:	e406      	b.n	1a00385c <_vfprintf_r+0x47c>
1a00404e:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a004050:	2b00      	cmp	r3, #0
1a004052:	f340 8273 	ble.w	1a00453c <_vfprintf_r+0x115c>
1a004056:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a00405a:	4293      	cmp	r3, r2
1a00405c:	bfa8      	it	ge
1a00405e:	4613      	movge	r3, r2
1a004060:	2b00      	cmp	r3, #0
1a004062:	461d      	mov	r5, r3
1a004064:	dd0d      	ble.n	1a004082 <_vfprintf_r+0xca2>
1a004066:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a004068:	f8cb 7000 	str.w	r7, [fp]
1a00406c:	3301      	adds	r3, #1
1a00406e:	442c      	add	r4, r5
1a004070:	2b07      	cmp	r3, #7
1a004072:	942c      	str	r4, [sp, #176]	; 0xb0
1a004074:	f8cb 5004 	str.w	r5, [fp, #4]
1a004078:	932b      	str	r3, [sp, #172]	; 0xac
1a00407a:	f300 82c1 	bgt.w	1a004600 <_vfprintf_r+0x1220>
1a00407e:	f10b 0b08 	add.w	fp, fp, #8
1a004082:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a004084:	2d00      	cmp	r5, #0
1a004086:	bfa8      	it	ge
1a004088:	1b5b      	subge	r3, r3, r5
1a00408a:	2b00      	cmp	r3, #0
1a00408c:	461d      	mov	r5, r3
1a00408e:	f340 8099 	ble.w	1a0041c4 <_vfprintf_r+0xde4>
1a004092:	2d10      	cmp	r5, #16
1a004094:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a004096:	4b2c      	ldr	r3, [pc, #176]	; (1a004148 <_vfprintf_r+0xd68>)
1a004098:	f340 83db 	ble.w	1a004852 <_vfprintf_r+0x1472>
1a00409c:	4618      	mov	r0, r3
1a00409e:	4621      	mov	r1, r4
1a0040a0:	465b      	mov	r3, fp
1a0040a2:	2610      	movs	r6, #16
1a0040a4:	46bb      	mov	fp, r7
1a0040a6:	f8dd 900c 	ldr.w	r9, [sp, #12]
1a0040aa:	9c07      	ldr	r4, [sp, #28]
1a0040ac:	4607      	mov	r7, r0
1a0040ae:	e004      	b.n	1a0040ba <_vfprintf_r+0xcda>
1a0040b0:	3308      	adds	r3, #8
1a0040b2:	3d10      	subs	r5, #16
1a0040b4:	2d10      	cmp	r5, #16
1a0040b6:	f340 83c7 	ble.w	1a004848 <_vfprintf_r+0x1468>
1a0040ba:	3201      	adds	r2, #1
1a0040bc:	3110      	adds	r1, #16
1a0040be:	2a07      	cmp	r2, #7
1a0040c0:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
1a0040c4:	e9c3 7600 	strd	r7, r6, [r3]
1a0040c8:	ddf2      	ble.n	1a0040b0 <_vfprintf_r+0xcd0>
1a0040ca:	aa2a      	add	r2, sp, #168	; 0xa8
1a0040cc:	4621      	mov	r1, r4
1a0040ce:	4648      	mov	r0, r9
1a0040d0:	f003 fccc 	bl	1a007a6c <__sprint_r>
1a0040d4:	2800      	cmp	r0, #0
1a0040d6:	f040 84a5 	bne.w	1a004a24 <_vfprintf_r+0x1644>
1a0040da:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
1a0040de:	ab2d      	add	r3, sp, #180	; 0xb4
1a0040e0:	e7e7      	b.n	1a0040b2 <_vfprintf_r+0xcd2>
1a0040e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a0040e6:	af56      	add	r7, sp, #344	; 0x158
1a0040e8:	f7ff bafb 	b.w	1a0036e2 <_vfprintf_r+0x302>
1a0040ec:	f1b9 0f00 	cmp.w	r9, #0
1a0040f0:	f77f af4c 	ble.w	1a003f8c <_vfprintf_r+0xbac>
1a0040f4:	f1b9 0f10 	cmp.w	r9, #16
1a0040f8:	4b13      	ldr	r3, [pc, #76]	; (1a004148 <_vfprintf_r+0xd68>)
1a0040fa:	f340 8659 	ble.w	1a004db0 <_vfprintf_r+0x19d0>
1a0040fe:	4619      	mov	r1, r3
1a004100:	4622      	mov	r2, r4
1a004102:	4633      	mov	r3, r6
1a004104:	2710      	movs	r7, #16
1a004106:	f8dd b00c 	ldr.w	fp, [sp, #12]
1a00410a:	9c07      	ldr	r4, [sp, #28]
1a00410c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
1a00410e:	460e      	mov	r6, r1
1a004110:	e007      	b.n	1a004122 <_vfprintf_r+0xd42>
1a004112:	3308      	adds	r3, #8
1a004114:	f1a9 0910 	sub.w	r9, r9, #16
1a004118:	f1b9 0f10 	cmp.w	r9, #16
1a00411c:	f340 8353 	ble.w	1a0047c6 <_vfprintf_r+0x13e6>
1a004120:	3501      	adds	r5, #1
1a004122:	3210      	adds	r2, #16
1a004124:	2d07      	cmp	r5, #7
1a004126:	e9cd 522b 	strd	r5, r2, [sp, #172]	; 0xac
1a00412a:	e9c3 6700 	strd	r6, r7, [r3]
1a00412e:	ddf0      	ble.n	1a004112 <_vfprintf_r+0xd32>
1a004130:	aa2a      	add	r2, sp, #168	; 0xa8
1a004132:	4621      	mov	r1, r4
1a004134:	4658      	mov	r0, fp
1a004136:	f003 fc99 	bl	1a007a6c <__sprint_r>
1a00413a:	2800      	cmp	r0, #0
1a00413c:	f040 8472 	bne.w	1a004a24 <_vfprintf_r+0x1644>
1a004140:	e9dd 522b 	ldrd	r5, r2, [sp, #172]	; 0xac
1a004144:	ab2d      	add	r3, sp, #180	; 0xb4
1a004146:	e7e5      	b.n	1a004114 <_vfprintf_r+0xd34>
1a004148:	1a00854c 	.word	0x1a00854c
1a00414c:	f018 0f01 	tst.w	r8, #1
1a004150:	f47f aee0 	bne.w	1a003f14 <_vfprintf_r+0xb34>
1a004154:	2201      	movs	r2, #1
1a004156:	2d07      	cmp	r5, #7
1a004158:	f8cb 7000 	str.w	r7, [fp]
1a00415c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
1a004160:	f8cb 2004 	str.w	r2, [fp, #4]
1a004164:	dc04      	bgt.n	1a004170 <_vfprintf_r+0xd90>
1a004166:	3302      	adds	r3, #2
1a004168:	9309      	str	r3, [sp, #36]	; 0x24
1a00416a:	f10b 0b10 	add.w	fp, fp, #16
1a00416e:	e70d      	b.n	1a003f8c <_vfprintf_r+0xbac>
1a004170:	aa2a      	add	r2, sp, #168	; 0xa8
1a004172:	9907      	ldr	r1, [sp, #28]
1a004174:	9803      	ldr	r0, [sp, #12]
1a004176:	f003 fc79 	bl	1a007a6c <__sprint_r>
1a00417a:	2800      	cmp	r0, #0
1a00417c:	f47f aea8 	bne.w	1a003ed0 <_vfprintf_r+0xaf0>
1a004180:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
1a004184:	3301      	adds	r3, #1
1a004186:	9309      	str	r3, [sp, #36]	; 0x24
1a004188:	f10d 0bbc 	add.w	fp, sp, #188	; 0xbc
1a00418c:	ae2d      	add	r6, sp, #180	; 0xb4
1a00418e:	e6fd      	b.n	1a003f8c <_vfprintf_r+0xbac>
1a004190:	aa2a      	add	r2, sp, #168	; 0xa8
1a004192:	9907      	ldr	r1, [sp, #28]
1a004194:	9803      	ldr	r0, [sp, #12]
1a004196:	f003 fc69 	bl	1a007a6c <__sprint_r>
1a00419a:	2800      	cmp	r0, #0
1a00419c:	f47f ae98 	bne.w	1a003ed0 <_vfprintf_r+0xaf0>
1a0041a0:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a0041a4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0041a6:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0041aa:	f7ff baf6 	b.w	1a00379a <_vfprintf_r+0x3ba>
1a0041ae:	aa2a      	add	r2, sp, #168	; 0xa8
1a0041b0:	9907      	ldr	r1, [sp, #28]
1a0041b2:	9803      	ldr	r0, [sp, #12]
1a0041b4:	f003 fc5a 	bl	1a007a6c <__sprint_r>
1a0041b8:	2800      	cmp	r0, #0
1a0041ba:	f47f ae89 	bne.w	1a003ed0 <_vfprintf_r+0xaf0>
1a0041be:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0041c0:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0041c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0041c6:	f418 6f80 	tst.w	r8, #1024	; 0x400
1a0041ca:	443b      	add	r3, r7
1a0041cc:	4699      	mov	r9, r3
1a0041ce:	f040 8357 	bne.w	1a004880 <_vfprintf_r+0x14a0>
1a0041d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a0041d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a0041d6:	4293      	cmp	r3, r2
1a0041d8:	db49      	blt.n	1a00426e <_vfprintf_r+0xe8e>
1a0041da:	f018 0f01 	tst.w	r8, #1
1a0041de:	d146      	bne.n	1a00426e <_vfprintf_r+0xe8e>
1a0041e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a0041e2:	18bd      	adds	r5, r7, r2
1a0041e4:	eba5 0509 	sub.w	r5, r5, r9
1a0041e8:	1ad3      	subs	r3, r2, r3
1a0041ea:	429d      	cmp	r5, r3
1a0041ec:	bfa8      	it	ge
1a0041ee:	461d      	movge	r5, r3
1a0041f0:	2d00      	cmp	r5, #0
1a0041f2:	dd0d      	ble.n	1a004210 <_vfprintf_r+0xe30>
1a0041f4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a0041f6:	f8cb 9000 	str.w	r9, [fp]
1a0041fa:	3201      	adds	r2, #1
1a0041fc:	442c      	add	r4, r5
1a0041fe:	2a07      	cmp	r2, #7
1a004200:	942c      	str	r4, [sp, #176]	; 0xb0
1a004202:	f8cb 5004 	str.w	r5, [fp, #4]
1a004206:	922b      	str	r2, [sp, #172]	; 0xac
1a004208:	f300 8462 	bgt.w	1a004ad0 <_vfprintf_r+0x16f0>
1a00420c:	f10b 0b08 	add.w	fp, fp, #8
1a004210:	2d00      	cmp	r5, #0
1a004212:	bfac      	ite	ge
1a004214:	1b5d      	subge	r5, r3, r5
1a004216:	461d      	movlt	r5, r3
1a004218:	2d00      	cmp	r5, #0
1a00421a:	f77f ab32 	ble.w	1a003882 <_vfprintf_r+0x4a2>
1a00421e:	2d10      	cmp	r5, #16
1a004220:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a004222:	4bc5      	ldr	r3, [pc, #788]	; (1a004538 <_vfprintf_r+0x1158>)
1a004224:	f340 80c4 	ble.w	1a0043b0 <_vfprintf_r+0xfd0>
1a004228:	4619      	mov	r1, r3
1a00422a:	2610      	movs	r6, #16
1a00422c:	4623      	mov	r3, r4
1a00422e:	9f03      	ldr	r7, [sp, #12]
1a004230:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a004234:	460c      	mov	r4, r1
1a004236:	e005      	b.n	1a004244 <_vfprintf_r+0xe64>
1a004238:	f10b 0b08 	add.w	fp, fp, #8
1a00423c:	3d10      	subs	r5, #16
1a00423e:	2d10      	cmp	r5, #16
1a004240:	f340 80b3 	ble.w	1a0043aa <_vfprintf_r+0xfca>
1a004244:	3201      	adds	r2, #1
1a004246:	3310      	adds	r3, #16
1a004248:	2a07      	cmp	r2, #7
1a00424a:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
1a00424e:	e9cb 4600 	strd	r4, r6, [fp]
1a004252:	ddf1      	ble.n	1a004238 <_vfprintf_r+0xe58>
1a004254:	aa2a      	add	r2, sp, #168	; 0xa8
1a004256:	4649      	mov	r1, r9
1a004258:	4638      	mov	r0, r7
1a00425a:	f003 fc07 	bl	1a007a6c <__sprint_r>
1a00425e:	2800      	cmp	r0, #0
1a004260:	f47f ae38 	bne.w	1a003ed4 <_vfprintf_r+0xaf4>
1a004264:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
1a004268:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00426c:	e7e6      	b.n	1a00423c <_vfprintf_r+0xe5c>
1a00426e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a004270:	9916      	ldr	r1, [sp, #88]	; 0x58
1a004272:	f8cb 1000 	str.w	r1, [fp]
1a004276:	9915      	ldr	r1, [sp, #84]	; 0x54
1a004278:	f8cb 1004 	str.w	r1, [fp, #4]
1a00427c:	3201      	adds	r2, #1
1a00427e:	440c      	add	r4, r1
1a004280:	2a07      	cmp	r2, #7
1a004282:	942c      	str	r4, [sp, #176]	; 0xb0
1a004284:	922b      	str	r2, [sp, #172]	; 0xac
1a004286:	f300 828c 	bgt.w	1a0047a2 <_vfprintf_r+0x13c2>
1a00428a:	f10b 0b08 	add.w	fp, fp, #8
1a00428e:	e7a7      	b.n	1a0041e0 <_vfprintf_r+0xe00>
1a004290:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
1a004294:	f002 fa6a 	bl	1a00676c <__retarget_lock_release_recursive>
1a004298:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a00429c:	e628      	b.n	1a003ef0 <_vfprintf_r+0xb10>
1a00429e:	aa2a      	add	r2, sp, #168	; 0xa8
1a0042a0:	9907      	ldr	r1, [sp, #28]
1a0042a2:	9803      	ldr	r0, [sp, #12]
1a0042a4:	f003 fbe2 	bl	1a007a6c <__sprint_r>
1a0042a8:	2800      	cmp	r0, #0
1a0042aa:	f47f ae11 	bne.w	1a003ed0 <_vfprintf_r+0xaf0>
1a0042ae:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
1a0042b2:	ae2d      	add	r6, sp, #180	; 0xb4
1a0042b4:	e638      	b.n	1a003f28 <_vfprintf_r+0xb48>
1a0042b6:	aa2a      	add	r2, sp, #168	; 0xa8
1a0042b8:	9907      	ldr	r1, [sp, #28]
1a0042ba:	9803      	ldr	r0, [sp, #12]
1a0042bc:	f003 fbd6 	bl	1a007a6c <__sprint_r>
1a0042c0:	2800      	cmp	r0, #0
1a0042c2:	f47f ae05 	bne.w	1a003ed0 <_vfprintf_r+0xaf0>
1a0042c6:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
1a0042ca:	ae2d      	add	r6, sp, #180	; 0xb4
1a0042cc:	930b      	str	r3, [sp, #44]	; 0x2c
1a0042ce:	e638      	b.n	1a003f42 <_vfprintf_r+0xb62>
1a0042d0:	6814      	ldr	r4, [r2, #0]
1a0042d2:	9308      	str	r3, [sp, #32]
1a0042d4:	2500      	movs	r5, #0
1a0042d6:	f7ff bb95 	b.w	1a003a04 <_vfprintf_r+0x624>
1a0042da:	6814      	ldr	r4, [r2, #0]
1a0042dc:	9308      	str	r3, [sp, #32]
1a0042de:	2500      	movs	r5, #0
1a0042e0:	f7ff b9ae 	b.w	1a003640 <_vfprintf_r+0x260>
1a0042e4:	680c      	ldr	r4, [r1, #0]
1a0042e6:	9208      	str	r2, [sp, #32]
1a0042e8:	17e5      	asrs	r5, r4, #31
1a0042ea:	4620      	mov	r0, r4
1a0042ec:	4629      	mov	r1, r5
1a0042ee:	f7ff b9d2 	b.w	1a003696 <_vfprintf_r+0x2b6>
1a0042f2:	6814      	ldr	r4, [r2, #0]
1a0042f4:	9108      	str	r1, [sp, #32]
1a0042f6:	2201      	movs	r2, #1
1a0042f8:	2500      	movs	r5, #0
1a0042fa:	f7ff bb32 	b.w	1a003962 <_vfprintf_r+0x582>
1a0042fe:	2a01      	cmp	r2, #1
1a004300:	f47f ab3c 	bne.w	1a00397c <_vfprintf_r+0x59c>
1a004304:	e68f      	b.n	1a004026 <_vfprintf_r+0xc46>
1a004306:	f408 6380 	and.w	r3, r8, #1024	; 0x400
1a00430a:	2200      	movs	r2, #0
1a00430c:	e9cd a609 	strd	sl, r6, [sp, #36]	; 0x24
1a004310:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
1a004314:	af56      	add	r7, sp, #344	; 0x158
1a004316:	4692      	mov	sl, r2
1a004318:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
1a00431c:	461e      	mov	r6, r3
1a00431e:	e00a      	b.n	1a004336 <_vfprintf_r+0xf56>
1a004320:	2300      	movs	r3, #0
1a004322:	4620      	mov	r0, r4
1a004324:	4629      	mov	r1, r5
1a004326:	220a      	movs	r2, #10
1a004328:	f7fe fad8 	bl	1a0028dc <__aeabi_uldivmod>
1a00432c:	4604      	mov	r4, r0
1a00432e:	460d      	mov	r5, r1
1a004330:	ea54 0305 	orrs.w	r3, r4, r5
1a004334:	d029      	beq.n	1a00438a <_vfprintf_r+0xfaa>
1a004336:	220a      	movs	r2, #10
1a004338:	2300      	movs	r3, #0
1a00433a:	4620      	mov	r0, r4
1a00433c:	4629      	mov	r1, r5
1a00433e:	f7fe facd 	bl	1a0028dc <__aeabi_uldivmod>
1a004342:	3230      	adds	r2, #48	; 0x30
1a004344:	f807 2c01 	strb.w	r2, [r7, #-1]
1a004348:	f10a 0a01 	add.w	sl, sl, #1
1a00434c:	3f01      	subs	r7, #1
1a00434e:	2e00      	cmp	r6, #0
1a004350:	d0e6      	beq.n	1a004320 <_vfprintf_r+0xf40>
1a004352:	f898 3000 	ldrb.w	r3, [r8]
1a004356:	459a      	cmp	sl, r3
1a004358:	d1e2      	bne.n	1a004320 <_vfprintf_r+0xf40>
1a00435a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
1a00435e:	d0df      	beq.n	1a004320 <_vfprintf_r+0xf40>
1a004360:	2d00      	cmp	r5, #0
1a004362:	bf08      	it	eq
1a004364:	2c0a      	cmpeq	r4, #10
1a004366:	d3db      	bcc.n	1a004320 <_vfprintf_r+0xf40>
1a004368:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
1a00436a:	9918      	ldr	r1, [sp, #96]	; 0x60
1a00436c:	1aff      	subs	r7, r7, r3
1a00436e:	461a      	mov	r2, r3
1a004370:	4638      	mov	r0, r7
1a004372:	f003 fb0d 	bl	1a007990 <strncpy>
1a004376:	f898 3001 	ldrb.w	r3, [r8, #1]
1a00437a:	2b00      	cmp	r3, #0
1a00437c:	f000 8496 	beq.w	1a004cac <_vfprintf_r+0x18cc>
1a004380:	f108 0801 	add.w	r8, r8, #1
1a004384:	f04f 0a00 	mov.w	sl, #0
1a004388:	e7ca      	b.n	1a004320 <_vfprintf_r+0xf40>
1a00438a:	9b04      	ldr	r3, [sp, #16]
1a00438c:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
1a004390:	1bdb      	subs	r3, r3, r7
1a004392:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
1a004396:	9e0a      	ldr	r6, [sp, #40]	; 0x28
1a004398:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
1a00439c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
1a0043a0:	9309      	str	r3, [sp, #36]	; 0x24
1a0043a2:	f7ff b99e 	b.w	1a0036e2 <_vfprintf_r+0x302>
1a0043a6:	46c1      	mov	r9, r8
1a0043a8:	e594      	b.n	1a003ed4 <_vfprintf_r+0xaf4>
1a0043aa:	4621      	mov	r1, r4
1a0043ac:	461c      	mov	r4, r3
1a0043ae:	460b      	mov	r3, r1
1a0043b0:	3201      	adds	r2, #1
1a0043b2:	442c      	add	r4, r5
1a0043b4:	2a07      	cmp	r2, #7
1a0043b6:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a0043ba:	e9cb 3500 	strd	r3, r5, [fp]
1a0043be:	f77f aa5e 	ble.w	1a00387e <_vfprintf_r+0x49e>
1a0043c2:	e5ee      	b.n	1a003fa2 <_vfprintf_r+0xbc2>
1a0043c4:	f018 0f10 	tst.w	r8, #16
1a0043c8:	f040 80f8 	bne.w	1a0045bc <_vfprintf_r+0x11dc>
1a0043cc:	f018 0f40 	tst.w	r8, #64	; 0x40
1a0043d0:	f000 8351 	beq.w	1a004a76 <_vfprintf_r+0x1696>
1a0043d4:	9a05      	ldr	r2, [sp, #20]
1a0043d6:	801a      	strh	r2, [r3, #0]
1a0043d8:	4657      	mov	r7, sl
1a0043da:	f7ff baa7 	b.w	1a00392c <_vfprintf_r+0x54c>
1a0043de:	aa2a      	add	r2, sp, #168	; 0xa8
1a0043e0:	9907      	ldr	r1, [sp, #28]
1a0043e2:	9803      	ldr	r0, [sp, #12]
1a0043e4:	f003 fb42 	bl	1a007a6c <__sprint_r>
1a0043e8:	2800      	cmp	r0, #0
1a0043ea:	f47f ad71 	bne.w	1a003ed0 <_vfprintf_r+0xaf0>
1a0043ee:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0043f0:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0043f4:	f7ff b9f5 	b.w	1a0037e2 <_vfprintf_r+0x402>
1a0043f8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a0043fc:	4602      	mov	r2, r0
1a0043fe:	460b      	mov	r3, r1
1a004400:	f003 fd96 	bl	1a007f30 <__aeabi_dcmpun>
1a004404:	2800      	cmp	r0, #0
1a004406:	f040 8491 	bne.w	1a004d2c <_vfprintf_r+0x194c>
1a00440a:	2e61      	cmp	r6, #97	; 0x61
1a00440c:	f000 8111 	beq.w	1a004632 <_vfprintf_r+0x1252>
1a004410:	2e41      	cmp	r6, #65	; 0x41
1a004412:	f000 8377 	beq.w	1a004b04 <_vfprintf_r+0x1724>
1a004416:	f448 7380 	orr.w	r3, r8, #256	; 0x100
1a00441a:	f026 0220 	bic.w	r2, r6, #32
1a00441e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
1a004422:	930e      	str	r3, [sp, #56]	; 0x38
1a004424:	9204      	str	r2, [sp, #16]
1a004426:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a004428:	f000 842d 	beq.w	1a004c86 <_vfprintf_r+0x18a6>
1a00442c:	2a47      	cmp	r2, #71	; 0x47
1a00442e:	f000 8424 	beq.w	1a004c7a <_vfprintf_r+0x189a>
1a004432:	2b00      	cmp	r3, #0
1a004434:	f2c0 82f9 	blt.w	1a004a2a <_vfprintf_r+0x164a>
1a004438:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
1a00443c:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
1a004440:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
1a004444:	2e66      	cmp	r6, #102	; 0x66
1a004446:	f000 83eb 	beq.w	1a004c20 <_vfprintf_r+0x1840>
1a00444a:	2e46      	cmp	r6, #70	; 0x46
1a00444c:	f000 847e 	beq.w	1a004d4c <_vfprintf_r+0x196c>
1a004450:	9b04      	ldr	r3, [sp, #16]
1a004452:	9803      	ldr	r0, [sp, #12]
1a004454:	2b45      	cmp	r3, #69	; 0x45
1a004456:	bf0c      	ite	eq
1a004458:	f109 0501 	addeq.w	r5, r9, #1
1a00445c:	464d      	movne	r5, r9
1a00445e:	aa28      	add	r2, sp, #160	; 0xa0
1a004460:	ab25      	add	r3, sp, #148	; 0x94
1a004462:	e9cd 3200 	strd	r3, r2, [sp]
1a004466:	2102      	movs	r1, #2
1a004468:	ab24      	add	r3, sp, #144	; 0x90
1a00446a:	462a      	mov	r2, r5
1a00446c:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a004470:	f000 fe2e 	bl	1a0050d0 <_dtoa_r>
1a004474:	2e67      	cmp	r6, #103	; 0x67
1a004476:	4607      	mov	r7, r0
1a004478:	f040 849c 	bne.w	1a004db4 <_vfprintf_r+0x19d4>
1a00447c:	f018 0f01 	tst.w	r8, #1
1a004480:	f040 83f9 	bne.w	1a004c76 <_vfprintf_r+0x1896>
1a004484:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a004486:	4640      	mov	r0, r8
1a004488:	1bdb      	subs	r3, r3, r7
1a00448a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a00448e:	9310      	str	r3, [sp, #64]	; 0x40
1a004490:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a004492:	9311      	str	r3, [sp, #68]	; 0x44
1a004494:	9b04      	ldr	r3, [sp, #16]
1a004496:	2b47      	cmp	r3, #71	; 0x47
1a004498:	f000 81e7 	beq.w	1a00486a <_vfprintf_r+0x148a>
1a00449c:	9b04      	ldr	r3, [sp, #16]
1a00449e:	2b46      	cmp	r3, #70	; 0x46
1a0044a0:	f000 8300 	beq.w	1a004aa4 <_vfprintf_r+0x16c4>
1a0044a4:	9904      	ldr	r1, [sp, #16]
1a0044a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0044a8:	b2f2      	uxtb	r2, r6
1a0044aa:	2941      	cmp	r1, #65	; 0x41
1a0044ac:	bf08      	it	eq
1a0044ae:	320f      	addeq	r2, #15
1a0044b0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
1a0044b4:	bf06      	itte	eq
1a0044b6:	b2d2      	uxtbeq	r2, r2
1a0044b8:	2101      	moveq	r1, #1
1a0044ba:	2100      	movne	r1, #0
1a0044bc:	2b00      	cmp	r3, #0
1a0044be:	9324      	str	r3, [sp, #144]	; 0x90
1a0044c0:	bfb8      	it	lt
1a0044c2:	9b11      	ldrlt	r3, [sp, #68]	; 0x44
1a0044c4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
1a0044c8:	bfba      	itte	lt
1a0044ca:	f1c3 0301 	rsblt	r3, r3, #1
1a0044ce:	222d      	movlt	r2, #45	; 0x2d
1a0044d0:	222b      	movge	r2, #43	; 0x2b
1a0044d2:	2b09      	cmp	r3, #9
1a0044d4:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
1a0044d8:	f300 83f9 	bgt.w	1a004cce <_vfprintf_r+0x18ee>
1a0044dc:	2900      	cmp	r1, #0
1a0044de:	f040 8487 	bne.w	1a004df0 <_vfprintf_r+0x1a10>
1a0044e2:	2230      	movs	r2, #48	; 0x30
1a0044e4:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
1a0044e8:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
1a0044ec:	3330      	adds	r3, #48	; 0x30
1a0044ee:	7013      	strb	r3, [r2, #0]
1a0044f0:	1c53      	adds	r3, r2, #1
1a0044f2:	aa26      	add	r2, sp, #152	; 0x98
1a0044f4:	1a9b      	subs	r3, r3, r2
1a0044f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a0044f8:	9319      	str	r3, [sp, #100]	; 0x64
1a0044fa:	2a01      	cmp	r2, #1
1a0044fc:	4413      	add	r3, r2
1a0044fe:	9309      	str	r3, [sp, #36]	; 0x24
1a004500:	f340 8442 	ble.w	1a004d88 <_vfprintf_r+0x19a8>
1a004504:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004506:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a004508:	4413      	add	r3, r2
1a00450a:	9309      	str	r3, [sp, #36]	; 0x24
1a00450c:	2300      	movs	r3, #0
1a00450e:	930f      	str	r3, [sp, #60]	; 0x3c
1a004510:	9314      	str	r3, [sp, #80]	; 0x50
1a004512:	9311      	str	r3, [sp, #68]	; 0x44
1a004514:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004516:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
1a00451a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a00451e:	f440 7880 	orr.w	r8, r0, #256	; 0x100
1a004522:	9304      	str	r3, [sp, #16]
1a004524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004526:	2b00      	cmp	r3, #0
1a004528:	f040 8275 	bne.w	1a004a16 <_vfprintf_r+0x1636>
1a00452c:	4699      	mov	r9, r3
1a00452e:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a004532:	f7ff b8e2 	b.w	1a0036fa <_vfprintf_r+0x31a>
1a004536:	bf00      	nop
1a004538:	1a00854c 	.word	0x1a00854c
1a00453c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a00453e:	49bd      	ldr	r1, [pc, #756]	; (1a004834 <_vfprintf_r+0x1454>)
1a004540:	f8cb 1000 	str.w	r1, [fp]
1a004544:	3201      	adds	r2, #1
1a004546:	3401      	adds	r4, #1
1a004548:	2101      	movs	r1, #1
1a00454a:	2a07      	cmp	r2, #7
1a00454c:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a004550:	f8cb 1004 	str.w	r1, [fp, #4]
1a004554:	dc60      	bgt.n	1a004618 <_vfprintf_r+0x1238>
1a004556:	f10b 0b08 	add.w	fp, fp, #8
1a00455a:	b92b      	cbnz	r3, 1a004568 <_vfprintf_r+0x1188>
1a00455c:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a00455e:	b91a      	cbnz	r2, 1a004568 <_vfprintf_r+0x1188>
1a004560:	f018 0f01 	tst.w	r8, #1
1a004564:	f43f a98d 	beq.w	1a003882 <_vfprintf_r+0x4a2>
1a004568:	9a2b      	ldr	r2, [sp, #172]	; 0xac
1a00456a:	9916      	ldr	r1, [sp, #88]	; 0x58
1a00456c:	f8cb 1000 	str.w	r1, [fp]
1a004570:	9915      	ldr	r1, [sp, #84]	; 0x54
1a004572:	f8cb 1004 	str.w	r1, [fp, #4]
1a004576:	3201      	adds	r2, #1
1a004578:	440c      	add	r4, r1
1a00457a:	2a07      	cmp	r2, #7
1a00457c:	942c      	str	r4, [sp, #176]	; 0xb0
1a00457e:	922b      	str	r2, [sp, #172]	; 0xac
1a004580:	f300 8282 	bgt.w	1a004a88 <_vfprintf_r+0x16a8>
1a004584:	f10b 0b08 	add.w	fp, fp, #8
1a004588:	2b00      	cmp	r3, #0
1a00458a:	f2c0 82e7 	blt.w	1a004b5c <_vfprintf_r+0x177c>
1a00458e:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a004590:	3201      	adds	r2, #1
1a004592:	441c      	add	r4, r3
1a004594:	2a07      	cmp	r2, #7
1a004596:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a00459a:	e9cb 7300 	strd	r7, r3, [fp]
1a00459e:	f77f a96e 	ble.w	1a00387e <_vfprintf_r+0x49e>
1a0045a2:	e4fe      	b.n	1a003fa2 <_vfprintf_r+0xbc2>
1a0045a4:	aa2a      	add	r2, sp, #168	; 0xa8
1a0045a6:	9907      	ldr	r1, [sp, #28]
1a0045a8:	9803      	ldr	r0, [sp, #12]
1a0045aa:	f003 fa5f 	bl	1a007a6c <__sprint_r>
1a0045ae:	2800      	cmp	r0, #0
1a0045b0:	f47f ac8e 	bne.w	1a003ed0 <_vfprintf_r+0xaf0>
1a0045b4:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0045b8:	f7ff bbf0 	b.w	1a003d9c <_vfprintf_r+0x9bc>
1a0045bc:	9a05      	ldr	r2, [sp, #20]
1a0045be:	601a      	str	r2, [r3, #0]
1a0045c0:	4657      	mov	r7, sl
1a0045c2:	f7ff b9b3 	b.w	1a00392c <_vfprintf_r+0x54c>
1a0045c6:	8814      	ldrh	r4, [r2, #0]
1a0045c8:	9108      	str	r1, [sp, #32]
1a0045ca:	2500      	movs	r5, #0
1a0045cc:	2201      	movs	r2, #1
1a0045ce:	f7ff b9c8 	b.w	1a003962 <_vfprintf_r+0x582>
1a0045d2:	8814      	ldrh	r4, [r2, #0]
1a0045d4:	9308      	str	r3, [sp, #32]
1a0045d6:	2500      	movs	r5, #0
1a0045d8:	f7ff ba14 	b.w	1a003a04 <_vfprintf_r+0x624>
1a0045dc:	f9b1 4000 	ldrsh.w	r4, [r1]
1a0045e0:	9208      	str	r2, [sp, #32]
1a0045e2:	17e5      	asrs	r5, r4, #31
1a0045e4:	4620      	mov	r0, r4
1a0045e6:	4629      	mov	r1, r5
1a0045e8:	f7ff b855 	b.w	1a003696 <_vfprintf_r+0x2b6>
1a0045ec:	8814      	ldrh	r4, [r2, #0]
1a0045ee:	9308      	str	r3, [sp, #32]
1a0045f0:	2500      	movs	r5, #0
1a0045f2:	f7ff b825 	b.w	1a003640 <_vfprintf_r+0x260>
1a0045f6:	222d      	movs	r2, #45	; 0x2d
1a0045f8:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
1a0045fc:	f7ff baa2 	b.w	1a003b44 <_vfprintf_r+0x764>
1a004600:	aa2a      	add	r2, sp, #168	; 0xa8
1a004602:	9907      	ldr	r1, [sp, #28]
1a004604:	9803      	ldr	r0, [sp, #12]
1a004606:	f003 fa31 	bl	1a007a6c <__sprint_r>
1a00460a:	2800      	cmp	r0, #0
1a00460c:	f47f ac60 	bne.w	1a003ed0 <_vfprintf_r+0xaf0>
1a004610:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a004612:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a004616:	e534      	b.n	1a004082 <_vfprintf_r+0xca2>
1a004618:	aa2a      	add	r2, sp, #168	; 0xa8
1a00461a:	9907      	ldr	r1, [sp, #28]
1a00461c:	9803      	ldr	r0, [sp, #12]
1a00461e:	f003 fa25 	bl	1a007a6c <__sprint_r>
1a004622:	2800      	cmp	r0, #0
1a004624:	f47f ac54 	bne.w	1a003ed0 <_vfprintf_r+0xaf0>
1a004628:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a00462a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a00462c:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a004630:	e793      	b.n	1a00455a <_vfprintf_r+0x117a>
1a004632:	2330      	movs	r3, #48	; 0x30
1a004634:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
1a004638:	2378      	movs	r3, #120	; 0x78
1a00463a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
1a00463e:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
1a004642:	f048 0402 	orr.w	r4, r8, #2
1a004646:	f300 82b0 	bgt.w	1a004baa <_vfprintf_r+0x17ca>
1a00464a:	f448 7381 	orr.w	r3, r8, #258	; 0x102
1a00464e:	930e      	str	r3, [sp, #56]	; 0x38
1a004650:	f026 0320 	bic.w	r3, r6, #32
1a004654:	9304      	str	r3, [sp, #16]
1a004656:	2200      	movs	r2, #0
1a004658:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a00465a:	920a      	str	r2, [sp, #40]	; 0x28
1a00465c:	46a0      	mov	r8, r4
1a00465e:	af3d      	add	r7, sp, #244	; 0xf4
1a004660:	2b00      	cmp	r3, #0
1a004662:	f2c0 81e3 	blt.w	1a004a2c <_vfprintf_r+0x164c>
1a004666:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
1a00466a:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
1a00466e:	2300      	movs	r3, #0
1a004670:	930b      	str	r3, [sp, #44]	; 0x2c
1a004672:	2e61      	cmp	r6, #97	; 0x61
1a004674:	f000 8255 	beq.w	1a004b22 <_vfprintf_r+0x1742>
1a004678:	2e41      	cmp	r6, #65	; 0x41
1a00467a:	f47f aee3 	bne.w	1a004444 <_vfprintf_r+0x1064>
1a00467e:	a824      	add	r0, sp, #144	; 0x90
1a004680:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a004684:	f003 f90c 	bl	1a0078a0 <frexp>
1a004688:	2200      	movs	r2, #0
1a00468a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a00468e:	ec51 0b10 	vmov	r0, r1, d0
1a004692:	f7fe faa3 	bl	1a002bdc <__aeabi_dmul>
1a004696:	2200      	movs	r2, #0
1a004698:	2300      	movs	r3, #0
1a00469a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a00469e:	f003 fc15 	bl	1a007ecc <__aeabi_dcmpeq>
1a0046a2:	2800      	cmp	r0, #0
1a0046a4:	f040 8305 	bne.w	1a004cb2 <_vfprintf_r+0x18d2>
1a0046a8:	4b63      	ldr	r3, [pc, #396]	; (1a004838 <_vfprintf_r+0x1458>)
1a0046aa:	9309      	str	r3, [sp, #36]	; 0x24
1a0046ac:	e9cd a60f 	strd	sl, r6, [sp, #60]	; 0x3c
1a0046b0:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
1a0046b4:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
1a0046b8:	9721      	str	r7, [sp, #132]	; 0x84
1a0046ba:	46b9      	mov	r9, r7
1a0046bc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
1a0046c0:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
1a0046c4:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
1a0046c8:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
1a0046cc:	e003      	b.n	1a0046d6 <_vfprintf_r+0x12f6>
1a0046ce:	f003 fbfd 	bl	1a007ecc <__aeabi_dcmpeq>
1a0046d2:	bb20      	cbnz	r0, 1a00471e <_vfprintf_r+0x133e>
1a0046d4:	46a9      	mov	r9, r5
1a0046d6:	2200      	movs	r2, #0
1a0046d8:	4b58      	ldr	r3, [pc, #352]	; (1a00483c <_vfprintf_r+0x145c>)
1a0046da:	4630      	mov	r0, r6
1a0046dc:	4639      	mov	r1, r7
1a0046de:	f7fe fa7d 	bl	1a002bdc <__aeabi_dmul>
1a0046e2:	460f      	mov	r7, r1
1a0046e4:	4606      	mov	r6, r0
1a0046e6:	f003 fc39 	bl	1a007f5c <__aeabi_d2iz>
1a0046ea:	4680      	mov	r8, r0
1a0046ec:	f7fe f88c 	bl	1a002808 <__aeabi_i2d>
1a0046f0:	4602      	mov	r2, r0
1a0046f2:	460b      	mov	r3, r1
1a0046f4:	4630      	mov	r0, r6
1a0046f6:	4639      	mov	r1, r7
1a0046f8:	f7fd ff38 	bl	1a00256c <__aeabi_dsub>
1a0046fc:	464d      	mov	r5, r9
1a0046fe:	f81a c008 	ldrb.w	ip, [sl, r8]
1a004702:	f805 cb01 	strb.w	ip, [r5], #1
1a004706:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a00470a:	46a3      	mov	fp, r4
1a00470c:	4606      	mov	r6, r0
1a00470e:	460f      	mov	r7, r1
1a004710:	f04f 0200 	mov.w	r2, #0
1a004714:	f04f 0300 	mov.w	r3, #0
1a004718:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
1a00471c:	d1d7      	bne.n	1a0046ce <_vfprintf_r+0x12ee>
1a00471e:	4630      	mov	r0, r6
1a004720:	4639      	mov	r1, r7
1a004722:	2200      	movs	r2, #0
1a004724:	4b46      	ldr	r3, [pc, #280]	; (1a004840 <_vfprintf_r+0x1460>)
1a004726:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
1a00472a:	9e10      	ldr	r6, [sp, #64]	; 0x40
1a00472c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
1a004730:	4644      	mov	r4, r8
1a004732:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
1a004736:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
1a00473a:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
1a00473e:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
1a004742:	9f21      	ldr	r7, [sp, #132]	; 0x84
1a004744:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a004748:	f003 fbe8 	bl	1a007f1c <__aeabi_dcmpgt>
1a00474c:	2800      	cmp	r0, #0
1a00474e:	f040 8176 	bne.w	1a004a3e <_vfprintf_r+0x165e>
1a004752:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
1a004756:	2200      	movs	r2, #0
1a004758:	4b39      	ldr	r3, [pc, #228]	; (1a004840 <_vfprintf_r+0x1460>)
1a00475a:	f003 fbb7 	bl	1a007ecc <__aeabi_dcmpeq>
1a00475e:	b110      	cbz	r0, 1a004766 <_vfprintf_r+0x1386>
1a004760:	07e2      	lsls	r2, r4, #31
1a004762:	f100 816c 	bmi.w	1a004a3e <_vfprintf_r+0x165e>
1a004766:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004768:	2b00      	cmp	r3, #0
1a00476a:	db07      	blt.n	1a00477c <_vfprintf_r+0x139c>
1a00476c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00476e:	3301      	adds	r3, #1
1a004770:	442b      	add	r3, r5
1a004772:	2230      	movs	r2, #48	; 0x30
1a004774:	f805 2b01 	strb.w	r2, [r5], #1
1a004778:	42ab      	cmp	r3, r5
1a00477a:	d1fb      	bne.n	1a004774 <_vfprintf_r+0x1394>
1a00477c:	1beb      	subs	r3, r5, r7
1a00477e:	4640      	mov	r0, r8
1a004780:	9310      	str	r3, [sp, #64]	; 0x40
1a004782:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a004786:	e683      	b.n	1a004490 <_vfprintf_r+0x10b0>
1a004788:	f8cd 9010 	str.w	r9, [sp, #16]
1a00478c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
1a004790:	9408      	str	r4, [sp, #32]
1a004792:	4681      	mov	r9, r0
1a004794:	900f      	str	r0, [sp, #60]	; 0x3c
1a004796:	9014      	str	r0, [sp, #80]	; 0x50
1a004798:	9011      	str	r0, [sp, #68]	; 0x44
1a00479a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
1a00479e:	f7fe bfac 	b.w	1a0036fa <_vfprintf_r+0x31a>
1a0047a2:	aa2a      	add	r2, sp, #168	; 0xa8
1a0047a4:	9907      	ldr	r1, [sp, #28]
1a0047a6:	9803      	ldr	r0, [sp, #12]
1a0047a8:	f003 f960 	bl	1a007a6c <__sprint_r>
1a0047ac:	2800      	cmp	r0, #0
1a0047ae:	f47f ab8f 	bne.w	1a003ed0 <_vfprintf_r+0xaf0>
1a0047b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a0047b4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a0047b6:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a0047ba:	e511      	b.n	1a0041e0 <_vfprintf_r+0xe00>
1a0047bc:	4252      	negs	r2, r2
1a0047be:	9206      	str	r2, [sp, #24]
1a0047c0:	9308      	str	r3, [sp, #32]
1a0047c2:	f7ff b96d 	b.w	1a003aa0 <_vfprintf_r+0x6c0>
1a0047c6:	4614      	mov	r4, r2
1a0047c8:	4632      	mov	r2, r6
1a0047ca:	461e      	mov	r6, r3
1a0047cc:	4613      	mov	r3, r2
1a0047ce:	462a      	mov	r2, r5
1a0047d0:	3201      	adds	r2, #1
1a0047d2:	9209      	str	r2, [sp, #36]	; 0x24
1a0047d4:	f106 0208 	add.w	r2, r6, #8
1a0047d8:	e9c6 3900 	strd	r3, r9, [r6]
1a0047dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0047de:	932b      	str	r3, [sp, #172]	; 0xac
1a0047e0:	444c      	add	r4, r9
1a0047e2:	2b07      	cmp	r3, #7
1a0047e4:	942c      	str	r4, [sp, #176]	; 0xb0
1a0047e6:	f73f acc3 	bgt.w	1a004170 <_vfprintf_r+0xd90>
1a0047ea:	3301      	adds	r3, #1
1a0047ec:	9309      	str	r3, [sp, #36]	; 0x24
1a0047ee:	f102 0b08 	add.w	fp, r2, #8
1a0047f2:	4616      	mov	r6, r2
1a0047f4:	f7ff bbca 	b.w	1a003f8c <_vfprintf_r+0xbac>
1a0047f8:	aa2a      	add	r2, sp, #168	; 0xa8
1a0047fa:	9907      	ldr	r1, [sp, #28]
1a0047fc:	9803      	ldr	r0, [sp, #12]
1a0047fe:	f003 f935 	bl	1a007a6c <__sprint_r>
1a004802:	2800      	cmp	r0, #0
1a004804:	f47f ab64 	bne.w	1a003ed0 <_vfprintf_r+0xaf0>
1a004808:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a00480a:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a00480e:	f7ff bade 	b.w	1a003dce <_vfprintf_r+0x9ee>
1a004812:	464b      	mov	r3, r9
1a004814:	2b06      	cmp	r3, #6
1a004816:	bf28      	it	cs
1a004818:	2306      	movcs	r3, #6
1a00481a:	46b9      	mov	r9, r7
1a00481c:	970f      	str	r7, [sp, #60]	; 0x3c
1a00481e:	9714      	str	r7, [sp, #80]	; 0x50
1a004820:	9711      	str	r7, [sp, #68]	; 0x44
1a004822:	970a      	str	r7, [sp, #40]	; 0x28
1a004824:	463a      	mov	r2, r7
1a004826:	9304      	str	r3, [sp, #16]
1a004828:	e9cd 4308 	strd	r4, r3, [sp, #32]
1a00482c:	4f05      	ldr	r7, [pc, #20]	; (1a004844 <_vfprintf_r+0x1464>)
1a00482e:	f7fe bf64 	b.w	1a0036fa <_vfprintf_r+0x31a>
1a004832:	bf00      	nop
1a004834:	1a008538 	.word	0x1a008538
1a004838:	1a00851c 	.word	0x1a00851c
1a00483c:	40300000 	.word	0x40300000
1a004840:	3fe00000 	.word	0x3fe00000
1a004844:	1a008530 	.word	0x1a008530
1a004848:	460c      	mov	r4, r1
1a00484a:	4639      	mov	r1, r7
1a00484c:	465f      	mov	r7, fp
1a00484e:	469b      	mov	fp, r3
1a004850:	460b      	mov	r3, r1
1a004852:	3201      	adds	r2, #1
1a004854:	442c      	add	r4, r5
1a004856:	2a07      	cmp	r2, #7
1a004858:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a00485c:	e9cb 3500 	strd	r3, r5, [fp]
1a004860:	f73f aca5 	bgt.w	1a0041ae <_vfprintf_r+0xdce>
1a004864:	f10b 0b08 	add.w	fp, fp, #8
1a004868:	e4ac      	b.n	1a0041c4 <_vfprintf_r+0xde4>
1a00486a:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a00486c:	1cda      	adds	r2, r3, #3
1a00486e:	db02      	blt.n	1a004876 <_vfprintf_r+0x1496>
1a004870:	4599      	cmp	r9, r3
1a004872:	f280 80b5 	bge.w	1a0049e0 <_vfprintf_r+0x1600>
1a004876:	3e02      	subs	r6, #2
1a004878:	f026 0320 	bic.w	r3, r6, #32
1a00487c:	9304      	str	r3, [sp, #16]
1a00487e:	e611      	b.n	1a0044a4 <_vfprintf_r+0x10c4>
1a004880:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a004882:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
1a004886:	465a      	mov	r2, fp
1a004888:	e9dd 8b1a 	ldrd	r8, fp, [sp, #104]	; 0x68
1a00488c:	18fb      	adds	r3, r7, r3
1a00488e:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a004892:	970c      	str	r7, [sp, #48]	; 0x30
1a004894:	4eaf      	ldr	r6, [pc, #700]	; (1a004b54 <_vfprintf_r+0x1774>)
1a004896:	f8dd a01c 	ldr.w	sl, [sp, #28]
1a00489a:	9309      	str	r3, [sp, #36]	; 0x24
1a00489c:	464f      	mov	r7, r9
1a00489e:	f8dd 900c 	ldr.w	r9, [sp, #12]
1a0048a2:	4621      	mov	r1, r4
1a0048a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a0048a6:	2b00      	cmp	r3, #0
1a0048a8:	d05b      	beq.n	1a004962 <_vfprintf_r+0x1582>
1a0048aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0048ac:	2b00      	cmp	r3, #0
1a0048ae:	d154      	bne.n	1a00495a <_vfprintf_r+0x157a>
1a0048b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a0048b2:	3b01      	subs	r3, #1
1a0048b4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a0048b8:	9314      	str	r3, [sp, #80]	; 0x50
1a0048ba:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a0048bc:	9818      	ldr	r0, [sp, #96]	; 0x60
1a0048be:	6010      	str	r0, [r2, #0]
1a0048c0:	3301      	adds	r3, #1
1a0048c2:	4459      	add	r1, fp
1a0048c4:	2b07      	cmp	r3, #7
1a0048c6:	912c      	str	r1, [sp, #176]	; 0xb0
1a0048c8:	f8c2 b004 	str.w	fp, [r2, #4]
1a0048cc:	932b      	str	r3, [sp, #172]	; 0xac
1a0048ce:	dc68      	bgt.n	1a0049a2 <_vfprintf_r+0x15c2>
1a0048d0:	3208      	adds	r2, #8
1a0048d2:	9809      	ldr	r0, [sp, #36]	; 0x24
1a0048d4:	f898 3000 	ldrb.w	r3, [r8]
1a0048d8:	1bc5      	subs	r5, r0, r7
1a0048da:	429d      	cmp	r5, r3
1a0048dc:	bfa8      	it	ge
1a0048de:	461d      	movge	r5, r3
1a0048e0:	2d00      	cmp	r5, #0
1a0048e2:	dd0b      	ble.n	1a0048fc <_vfprintf_r+0x151c>
1a0048e4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
1a0048e6:	6017      	str	r7, [r2, #0]
1a0048e8:	3301      	adds	r3, #1
1a0048ea:	4429      	add	r1, r5
1a0048ec:	2b07      	cmp	r3, #7
1a0048ee:	912c      	str	r1, [sp, #176]	; 0xb0
1a0048f0:	6055      	str	r5, [r2, #4]
1a0048f2:	932b      	str	r3, [sp, #172]	; 0xac
1a0048f4:	dc5e      	bgt.n	1a0049b4 <_vfprintf_r+0x15d4>
1a0048f6:	f898 3000 	ldrb.w	r3, [r8]
1a0048fa:	3208      	adds	r2, #8
1a0048fc:	2d00      	cmp	r5, #0
1a0048fe:	bfac      	ite	ge
1a004900:	1b5d      	subge	r5, r3, r5
1a004902:	461d      	movlt	r5, r3
1a004904:	2d00      	cmp	r5, #0
1a004906:	dd26      	ble.n	1a004956 <_vfprintf_r+0x1576>
1a004908:	2d10      	cmp	r5, #16
1a00490a:	982b      	ldr	r0, [sp, #172]	; 0xac
1a00490c:	dd3c      	ble.n	1a004988 <_vfprintf_r+0x15a8>
1a00490e:	2410      	movs	r4, #16
1a004910:	e003      	b.n	1a00491a <_vfprintf_r+0x153a>
1a004912:	3208      	adds	r2, #8
1a004914:	3d10      	subs	r5, #16
1a004916:	2d10      	cmp	r5, #16
1a004918:	dd36      	ble.n	1a004988 <_vfprintf_r+0x15a8>
1a00491a:	3001      	adds	r0, #1
1a00491c:	3110      	adds	r1, #16
1a00491e:	2807      	cmp	r0, #7
1a004920:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
1a004924:	e9c2 6400 	strd	r6, r4, [r2]
1a004928:	ddf3      	ble.n	1a004912 <_vfprintf_r+0x1532>
1a00492a:	aa2a      	add	r2, sp, #168	; 0xa8
1a00492c:	4651      	mov	r1, sl
1a00492e:	4648      	mov	r0, r9
1a004930:	f003 f89c 	bl	1a007a6c <__sprint_r>
1a004934:	2800      	cmp	r0, #0
1a004936:	d150      	bne.n	1a0049da <_vfprintf_r+0x15fa>
1a004938:	e9dd 012b 	ldrd	r0, r1, [sp, #172]	; 0xac
1a00493c:	aa2d      	add	r2, sp, #180	; 0xb4
1a00493e:	e7e9      	b.n	1a004914 <_vfprintf_r+0x1534>
1a004940:	aa2a      	add	r2, sp, #168	; 0xa8
1a004942:	4651      	mov	r1, sl
1a004944:	4648      	mov	r0, r9
1a004946:	f003 f891 	bl	1a007a6c <__sprint_r>
1a00494a:	2800      	cmp	r0, #0
1a00494c:	d145      	bne.n	1a0049da <_vfprintf_r+0x15fa>
1a00494e:	f898 3000 	ldrb.w	r3, [r8]
1a004952:	992c      	ldr	r1, [sp, #176]	; 0xb0
1a004954:	aa2d      	add	r2, sp, #180	; 0xb4
1a004956:	441f      	add	r7, r3
1a004958:	e7a4      	b.n	1a0048a4 <_vfprintf_r+0x14c4>
1a00495a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a00495c:	3b01      	subs	r3, #1
1a00495e:	930f      	str	r3, [sp, #60]	; 0x3c
1a004960:	e7ab      	b.n	1a0048ba <_vfprintf_r+0x14da>
1a004962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a004964:	2b00      	cmp	r3, #0
1a004966:	d1f8      	bne.n	1a00495a <_vfprintf_r+0x157a>
1a004968:	46b9      	mov	r9, r7
1a00496a:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00496c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
1a00496e:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
1a004972:	18fb      	adds	r3, r7, r3
1a004974:	4599      	cmp	r9, r3
1a004976:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
1a00497a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
1a00497e:	4693      	mov	fp, r2
1a004980:	460c      	mov	r4, r1
1a004982:	bf28      	it	cs
1a004984:	4699      	movcs	r9, r3
1a004986:	e424      	b.n	1a0041d2 <_vfprintf_r+0xdf2>
1a004988:	3001      	adds	r0, #1
1a00498a:	4429      	add	r1, r5
1a00498c:	2807      	cmp	r0, #7
1a00498e:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
1a004992:	e9c2 6500 	strd	r6, r5, [r2]
1a004996:	dcd3      	bgt.n	1a004940 <_vfprintf_r+0x1560>
1a004998:	f898 3000 	ldrb.w	r3, [r8]
1a00499c:	3208      	adds	r2, #8
1a00499e:	441f      	add	r7, r3
1a0049a0:	e780      	b.n	1a0048a4 <_vfprintf_r+0x14c4>
1a0049a2:	aa2a      	add	r2, sp, #168	; 0xa8
1a0049a4:	4651      	mov	r1, sl
1a0049a6:	4648      	mov	r0, r9
1a0049a8:	f003 f860 	bl	1a007a6c <__sprint_r>
1a0049ac:	b9a8      	cbnz	r0, 1a0049da <_vfprintf_r+0x15fa>
1a0049ae:	992c      	ldr	r1, [sp, #176]	; 0xb0
1a0049b0:	aa2d      	add	r2, sp, #180	; 0xb4
1a0049b2:	e78e      	b.n	1a0048d2 <_vfprintf_r+0x14f2>
1a0049b4:	aa2a      	add	r2, sp, #168	; 0xa8
1a0049b6:	4651      	mov	r1, sl
1a0049b8:	4648      	mov	r0, r9
1a0049ba:	f003 f857 	bl	1a007a6c <__sprint_r>
1a0049be:	b960      	cbnz	r0, 1a0049da <_vfprintf_r+0x15fa>
1a0049c0:	f898 3000 	ldrb.w	r3, [r8]
1a0049c4:	992c      	ldr	r1, [sp, #176]	; 0xb0
1a0049c6:	aa2d      	add	r2, sp, #180	; 0xb4
1a0049c8:	e798      	b.n	1a0048fc <_vfprintf_r+0x151c>
1a0049ca:	4638      	mov	r0, r7
1a0049cc:	f7fe fc98 	bl	1a003300 <strlen>
1a0049d0:	46a9      	mov	r9, r5
1a0049d2:	4603      	mov	r3, r0
1a0049d4:	9009      	str	r0, [sp, #36]	; 0x24
1a0049d6:	f7ff b8f4 	b.w	1a003bc2 <_vfprintf_r+0x7e2>
1a0049da:	46d1      	mov	r9, sl
1a0049dc:	f7ff ba7a 	b.w	1a003ed4 <_vfprintf_r+0xaf4>
1a0049e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0049e2:	4619      	mov	r1, r3
1a0049e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0049e6:	4299      	cmp	r1, r3
1a0049e8:	f300 8082 	bgt.w	1a004af0 <_vfprintf_r+0x1710>
1a0049ec:	07c4      	lsls	r4, r0, #31
1a0049ee:	f140 816b 	bpl.w	1a004cc8 <_vfprintf_r+0x18e8>
1a0049f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a0049f4:	4413      	add	r3, r2
1a0049f6:	9309      	str	r3, [sp, #36]	; 0x24
1a0049f8:	0541      	lsls	r1, r0, #21
1a0049fa:	d503      	bpl.n	1a004a04 <_vfprintf_r+0x1624>
1a0049fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0049fe:	2b00      	cmp	r3, #0
1a004a00:	f300 80e6 	bgt.w	1a004bd0 <_vfprintf_r+0x17f0>
1a004a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004a06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004a0a:	9304      	str	r3, [sp, #16]
1a004a0c:	2667      	movs	r6, #103	; 0x67
1a004a0e:	2300      	movs	r3, #0
1a004a10:	930f      	str	r3, [sp, #60]	; 0x3c
1a004a12:	9314      	str	r3, [sp, #80]	; 0x50
1a004a14:	e586      	b.n	1a004524 <_vfprintf_r+0x1144>
1a004a16:	222d      	movs	r2, #45	; 0x2d
1a004a18:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
1a004a1c:	f04f 0900 	mov.w	r9, #0
1a004a20:	f7fe be6c 	b.w	1a0036fc <_vfprintf_r+0x31c>
1a004a24:	46a1      	mov	r9, r4
1a004a26:	f7ff ba55 	b.w	1a003ed4 <_vfprintf_r+0xaf4>
1a004a2a:	900a      	str	r0, [sp, #40]	; 0x28
1a004a2c:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
1a004a30:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
1a004a34:	931f      	str	r3, [sp, #124]	; 0x7c
1a004a36:	232d      	movs	r3, #45	; 0x2d
1a004a38:	911e      	str	r1, [sp, #120]	; 0x78
1a004a3a:	930b      	str	r3, [sp, #44]	; 0x2c
1a004a3c:	e619      	b.n	1a004672 <_vfprintf_r+0x1292>
1a004a3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a004a40:	9328      	str	r3, [sp, #160]	; 0xa0
1a004a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004a44:	f815 2c01 	ldrb.w	r2, [r5, #-1]
1a004a48:	7bd9      	ldrb	r1, [r3, #15]
1a004a4a:	4291      	cmp	r1, r2
1a004a4c:	462b      	mov	r3, r5
1a004a4e:	d109      	bne.n	1a004a64 <_vfprintf_r+0x1684>
1a004a50:	2030      	movs	r0, #48	; 0x30
1a004a52:	f803 0c01 	strb.w	r0, [r3, #-1]
1a004a56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a004a58:	1e5a      	subs	r2, r3, #1
1a004a5a:	9228      	str	r2, [sp, #160]	; 0xa0
1a004a5c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a004a60:	4291      	cmp	r1, r2
1a004a62:	d0f6      	beq.n	1a004a52 <_vfprintf_r+0x1672>
1a004a64:	2a39      	cmp	r2, #57	; 0x39
1a004a66:	bf0b      	itete	eq
1a004a68:	9a09      	ldreq	r2, [sp, #36]	; 0x24
1a004a6a:	3201      	addne	r2, #1
1a004a6c:	7a92      	ldrbeq	r2, [r2, #10]
1a004a6e:	b2d2      	uxtbne	r2, r2
1a004a70:	f803 2c01 	strb.w	r2, [r3, #-1]
1a004a74:	e682      	b.n	1a00477c <_vfprintf_r+0x139c>
1a004a76:	f418 7f00 	tst.w	r8, #512	; 0x200
1a004a7a:	f43f ad9f 	beq.w	1a0045bc <_vfprintf_r+0x11dc>
1a004a7e:	9a05      	ldr	r2, [sp, #20]
1a004a80:	701a      	strb	r2, [r3, #0]
1a004a82:	4657      	mov	r7, sl
1a004a84:	f7fe bf52 	b.w	1a00392c <_vfprintf_r+0x54c>
1a004a88:	aa2a      	add	r2, sp, #168	; 0xa8
1a004a8a:	9907      	ldr	r1, [sp, #28]
1a004a8c:	9803      	ldr	r0, [sp, #12]
1a004a8e:	f002 ffed 	bl	1a007a6c <__sprint_r>
1a004a92:	2800      	cmp	r0, #0
1a004a94:	f47f aa1c 	bne.w	1a003ed0 <_vfprintf_r+0xaf0>
1a004a98:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a004a9a:	e9dd 242b 	ldrd	r2, r4, [sp, #172]	; 0xac
1a004a9e:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a004aa2:	e571      	b.n	1a004588 <_vfprintf_r+0x11a8>
1a004aa4:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a004aa6:	2b00      	cmp	r3, #0
1a004aa8:	f340 8164 	ble.w	1a004d74 <_vfprintf_r+0x1994>
1a004aac:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a004aae:	f1b9 0f00 	cmp.w	r9, #0
1a004ab2:	f040 8103 	bne.w	1a004cbc <_vfprintf_r+0x18dc>
1a004ab6:	07c6      	lsls	r6, r0, #31
1a004ab8:	f100 8100 	bmi.w	1a004cbc <_vfprintf_r+0x18dc>
1a004abc:	9309      	str	r3, [sp, #36]	; 0x24
1a004abe:	2666      	movs	r6, #102	; 0x66
1a004ac0:	0543      	lsls	r3, r0, #21
1a004ac2:	f100 8086 	bmi.w	1a004bd2 <_vfprintf_r+0x17f2>
1a004ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004ac8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004acc:	9304      	str	r3, [sp, #16]
1a004ace:	e79e      	b.n	1a004a0e <_vfprintf_r+0x162e>
1a004ad0:	aa2a      	add	r2, sp, #168	; 0xa8
1a004ad2:	9907      	ldr	r1, [sp, #28]
1a004ad4:	9803      	ldr	r0, [sp, #12]
1a004ad6:	f002 ffc9 	bl	1a007a6c <__sprint_r>
1a004ada:	2800      	cmp	r0, #0
1a004adc:	f47f a9f8 	bne.w	1a003ed0 <_vfprintf_r+0xaf0>
1a004ae0:	9b24      	ldr	r3, [sp, #144]	; 0x90
1a004ae2:	9a10      	ldr	r2, [sp, #64]	; 0x40
1a004ae4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
1a004ae6:	1ad3      	subs	r3, r2, r3
1a004ae8:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a004aec:	f7ff bb90 	b.w	1a004210 <_vfprintf_r+0xe30>
1a004af0:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a004af2:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a004af4:	4413      	add	r3, r2
1a004af6:	9309      	str	r3, [sp, #36]	; 0x24
1a004af8:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a004afa:	2b00      	cmp	r3, #0
1a004afc:	f340 8149 	ble.w	1a004d92 <_vfprintf_r+0x19b2>
1a004b00:	2667      	movs	r6, #103	; 0x67
1a004b02:	e7dd      	b.n	1a004ac0 <_vfprintf_r+0x16e0>
1a004b04:	2330      	movs	r3, #48	; 0x30
1a004b06:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
1a004b0a:	2358      	movs	r3, #88	; 0x58
1a004b0c:	e595      	b.n	1a00463a <_vfprintf_r+0x125a>
1a004b0e:	9803      	ldr	r0, [sp, #12]
1a004b10:	aa2a      	add	r2, sp, #168	; 0xa8
1a004b12:	4649      	mov	r1, r9
1a004b14:	f002 ffaa 	bl	1a007a6c <__sprint_r>
1a004b18:	2800      	cmp	r0, #0
1a004b1a:	f47f a9e0 	bne.w	1a003ede <_vfprintf_r+0xafe>
1a004b1e:	f7fe bf0f 	b.w	1a003940 <_vfprintf_r+0x560>
1a004b22:	a824      	add	r0, sp, #144	; 0x90
1a004b24:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a004b28:	f002 feba 	bl	1a0078a0 <frexp>
1a004b2c:	2200      	movs	r2, #0
1a004b2e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
1a004b32:	ec51 0b10 	vmov	r0, r1, d0
1a004b36:	f7fe f851 	bl	1a002bdc <__aeabi_dmul>
1a004b3a:	2200      	movs	r2, #0
1a004b3c:	2300      	movs	r3, #0
1a004b3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
1a004b42:	f003 f9c3 	bl	1a007ecc <__aeabi_dcmpeq>
1a004b46:	b108      	cbz	r0, 1a004b4c <_vfprintf_r+0x176c>
1a004b48:	2301      	movs	r3, #1
1a004b4a:	9324      	str	r3, [sp, #144]	; 0x90
1a004b4c:	4b02      	ldr	r3, [pc, #8]	; (1a004b58 <_vfprintf_r+0x1778>)
1a004b4e:	9309      	str	r3, [sp, #36]	; 0x24
1a004b50:	e5ac      	b.n	1a0046ac <_vfprintf_r+0x12cc>
1a004b52:	bf00      	nop
1a004b54:	1a00854c 	.word	0x1a00854c
1a004b58:	1a008508 	.word	0x1a008508
1a004b5c:	425d      	negs	r5, r3
1a004b5e:	3310      	adds	r3, #16
1a004b60:	4bb9      	ldr	r3, [pc, #740]	; (1a004e48 <_vfprintf_r+0x1a68>)
1a004b62:	f280 8097 	bge.w	1a004c94 <_vfprintf_r+0x18b4>
1a004b66:	4619      	mov	r1, r3
1a004b68:	2610      	movs	r6, #16
1a004b6a:	4623      	mov	r3, r4
1a004b6c:	f8dd 900c 	ldr.w	r9, [sp, #12]
1a004b70:	460c      	mov	r4, r1
1a004b72:	e005      	b.n	1a004b80 <_vfprintf_r+0x17a0>
1a004b74:	f10b 0b08 	add.w	fp, fp, #8
1a004b78:	3d10      	subs	r5, #16
1a004b7a:	2d10      	cmp	r5, #16
1a004b7c:	f340 8087 	ble.w	1a004c8e <_vfprintf_r+0x18ae>
1a004b80:	3201      	adds	r2, #1
1a004b82:	3310      	adds	r3, #16
1a004b84:	2a07      	cmp	r2, #7
1a004b86:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
1a004b8a:	e9cb 4600 	strd	r4, r6, [fp]
1a004b8e:	ddf1      	ble.n	1a004b74 <_vfprintf_r+0x1794>
1a004b90:	aa2a      	add	r2, sp, #168	; 0xa8
1a004b92:	9907      	ldr	r1, [sp, #28]
1a004b94:	4648      	mov	r0, r9
1a004b96:	f002 ff69 	bl	1a007a6c <__sprint_r>
1a004b9a:	2800      	cmp	r0, #0
1a004b9c:	f47f a998 	bne.w	1a003ed0 <_vfprintf_r+0xaf0>
1a004ba0:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
1a004ba4:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a004ba8:	e7e6      	b.n	1a004b78 <_vfprintf_r+0x1798>
1a004baa:	f109 0101 	add.w	r1, r9, #1
1a004bae:	9803      	ldr	r0, [sp, #12]
1a004bb0:	f001 fe56 	bl	1a006860 <_malloc_r>
1a004bb4:	4607      	mov	r7, r0
1a004bb6:	2800      	cmp	r0, #0
1a004bb8:	f000 813b 	beq.w	1a004e32 <_vfprintf_r+0x1a52>
1a004bbc:	f448 7381 	orr.w	r3, r8, #258	; 0x102
1a004bc0:	930e      	str	r3, [sp, #56]	; 0x38
1a004bc2:	f026 0320 	bic.w	r3, r6, #32
1a004bc6:	9304      	str	r3, [sp, #16]
1a004bc8:	46a0      	mov	r8, r4
1a004bca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a004bcc:	900a      	str	r0, [sp, #40]	; 0x28
1a004bce:	e547      	b.n	1a004660 <_vfprintf_r+0x1280>
1a004bd0:	2667      	movs	r6, #103	; 0x67
1a004bd2:	981a      	ldr	r0, [sp, #104]	; 0x68
1a004bd4:	2200      	movs	r2, #0
1a004bd6:	920f      	str	r2, [sp, #60]	; 0x3c
1a004bd8:	9214      	str	r2, [sp, #80]	; 0x50
1a004bda:	7803      	ldrb	r3, [r0, #0]
1a004bdc:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a004bde:	2bff      	cmp	r3, #255	; 0xff
1a004be0:	d00c      	beq.n	1a004bfc <_vfprintf_r+0x181c>
1a004be2:	4293      	cmp	r3, r2
1a004be4:	da0a      	bge.n	1a004bfc <_vfprintf_r+0x181c>
1a004be6:	7841      	ldrb	r1, [r0, #1]
1a004be8:	1ad2      	subs	r2, r2, r3
1a004bea:	b1a9      	cbz	r1, 1a004c18 <_vfprintf_r+0x1838>
1a004bec:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a004bee:	3301      	adds	r3, #1
1a004bf0:	9314      	str	r3, [sp, #80]	; 0x50
1a004bf2:	460b      	mov	r3, r1
1a004bf4:	2bff      	cmp	r3, #255	; 0xff
1a004bf6:	f100 0001 	add.w	r0, r0, #1
1a004bfa:	d1f2      	bne.n	1a004be2 <_vfprintf_r+0x1802>
1a004bfc:	9211      	str	r2, [sp, #68]	; 0x44
1a004bfe:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a004c00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a004c02:	9909      	ldr	r1, [sp, #36]	; 0x24
1a004c04:	901a      	str	r0, [sp, #104]	; 0x68
1a004c06:	4413      	add	r3, r2
1a004c08:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
1a004c0a:	fb02 1303 	mla	r3, r2, r3, r1
1a004c0e:	9309      	str	r3, [sp, #36]	; 0x24
1a004c10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004c14:	9304      	str	r3, [sp, #16]
1a004c16:	e485      	b.n	1a004524 <_vfprintf_r+0x1144>
1a004c18:	990f      	ldr	r1, [sp, #60]	; 0x3c
1a004c1a:	3101      	adds	r1, #1
1a004c1c:	910f      	str	r1, [sp, #60]	; 0x3c
1a004c1e:	e7de      	b.n	1a004bde <_vfprintf_r+0x17fe>
1a004c20:	aa28      	add	r2, sp, #160	; 0xa0
1a004c22:	ab25      	add	r3, sp, #148	; 0x94
1a004c24:	e9cd 3200 	strd	r3, r2, [sp]
1a004c28:	2103      	movs	r1, #3
1a004c2a:	ab24      	add	r3, sp, #144	; 0x90
1a004c2c:	464a      	mov	r2, r9
1a004c2e:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a004c32:	9803      	ldr	r0, [sp, #12]
1a004c34:	f000 fa4c 	bl	1a0050d0 <_dtoa_r>
1a004c38:	464d      	mov	r5, r9
1a004c3a:	4607      	mov	r7, r0
1a004c3c:	eb00 0409 	add.w	r4, r0, r9
1a004c40:	783b      	ldrb	r3, [r7, #0]
1a004c42:	2b30      	cmp	r3, #48	; 0x30
1a004c44:	f000 80be 	beq.w	1a004dc4 <_vfprintf_r+0x19e4>
1a004c48:	9d24      	ldr	r5, [sp, #144]	; 0x90
1a004c4a:	442c      	add	r4, r5
1a004c4c:	2200      	movs	r2, #0
1a004c4e:	2300      	movs	r3, #0
1a004c50:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
1a004c54:	f003 f93a 	bl	1a007ecc <__aeabi_dcmpeq>
1a004c58:	b108      	cbz	r0, 1a004c5e <_vfprintf_r+0x187e>
1a004c5a:	4623      	mov	r3, r4
1a004c5c:	e413      	b.n	1a004486 <_vfprintf_r+0x10a6>
1a004c5e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a004c60:	42a3      	cmp	r3, r4
1a004c62:	f4bf ac10 	bcs.w	1a004486 <_vfprintf_r+0x10a6>
1a004c66:	2130      	movs	r1, #48	; 0x30
1a004c68:	1c5a      	adds	r2, r3, #1
1a004c6a:	9228      	str	r2, [sp, #160]	; 0xa0
1a004c6c:	7019      	strb	r1, [r3, #0]
1a004c6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
1a004c70:	429c      	cmp	r4, r3
1a004c72:	d8f9      	bhi.n	1a004c68 <_vfprintf_r+0x1888>
1a004c74:	e407      	b.n	1a004486 <_vfprintf_r+0x10a6>
1a004c76:	197c      	adds	r4, r7, r5
1a004c78:	e7e8      	b.n	1a004c4c <_vfprintf_r+0x186c>
1a004c7a:	f1b9 0f00 	cmp.w	r9, #0
1a004c7e:	f000 8092 	beq.w	1a004da6 <_vfprintf_r+0x19c6>
1a004c82:	900a      	str	r0, [sp, #40]	; 0x28
1a004c84:	e4ec      	b.n	1a004660 <_vfprintf_r+0x1280>
1a004c86:	900a      	str	r0, [sp, #40]	; 0x28
1a004c88:	f04f 0906 	mov.w	r9, #6
1a004c8c:	e4e8      	b.n	1a004660 <_vfprintf_r+0x1280>
1a004c8e:	4621      	mov	r1, r4
1a004c90:	461c      	mov	r4, r3
1a004c92:	460b      	mov	r3, r1
1a004c94:	3201      	adds	r2, #1
1a004c96:	442c      	add	r4, r5
1a004c98:	2a07      	cmp	r2, #7
1a004c9a:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
1a004c9e:	e9cb 3500 	strd	r3, r5, [fp]
1a004ca2:	f300 80a9 	bgt.w	1a004df8 <_vfprintf_r+0x1a18>
1a004ca6:	f10b 0b08 	add.w	fp, fp, #8
1a004caa:	e470      	b.n	1a00458e <_vfprintf_r+0x11ae>
1a004cac:	469a      	mov	sl, r3
1a004cae:	f7ff bb37 	b.w	1a004320 <_vfprintf_r+0xf40>
1a004cb2:	2301      	movs	r3, #1
1a004cb4:	9324      	str	r3, [sp, #144]	; 0x90
1a004cb6:	4b65      	ldr	r3, [pc, #404]	; (1a004e4c <_vfprintf_r+0x1a6c>)
1a004cb8:	9309      	str	r3, [sp, #36]	; 0x24
1a004cba:	e4f7      	b.n	1a0046ac <_vfprintf_r+0x12cc>
1a004cbc:	9a15      	ldr	r2, [sp, #84]	; 0x54
1a004cbe:	4413      	add	r3, r2
1a004cc0:	444b      	add	r3, r9
1a004cc2:	9309      	str	r3, [sp, #36]	; 0x24
1a004cc4:	2666      	movs	r6, #102	; 0x66
1a004cc6:	e6fb      	b.n	1a004ac0 <_vfprintf_r+0x16e0>
1a004cc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a004cca:	9309      	str	r3, [sp, #36]	; 0x24
1a004ccc:	e694      	b.n	1a0049f8 <_vfprintf_r+0x1618>
1a004cce:	f10d 0ca7 	add.w	ip, sp, #167	; 0xa7
1a004cd2:	4664      	mov	r4, ip
1a004cd4:	4d5e      	ldr	r5, [pc, #376]	; (1a004e50 <_vfprintf_r+0x1a70>)
1a004cd6:	e000      	b.n	1a004cda <_vfprintf_r+0x18fa>
1a004cd8:	4614      	mov	r4, r2
1a004cda:	fba5 1203 	umull	r1, r2, r5, r3
1a004cde:	08d2      	lsrs	r2, r2, #3
1a004ce0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a004ce4:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
1a004ce8:	f103 0130 	add.w	r1, r3, #48	; 0x30
1a004cec:	4613      	mov	r3, r2
1a004cee:	2b09      	cmp	r3, #9
1a004cf0:	f804 1c01 	strb.w	r1, [r4, #-1]
1a004cf4:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a004cf8:	dcee      	bgt.n	1a004cd8 <_vfprintf_r+0x18f8>
1a004cfa:	3330      	adds	r3, #48	; 0x30
1a004cfc:	3c02      	subs	r4, #2
1a004cfe:	b2db      	uxtb	r3, r3
1a004d00:	45a4      	cmp	ip, r4
1a004d02:	f802 3c01 	strb.w	r3, [r2, #-1]
1a004d06:	f240 8090 	bls.w	1a004e2a <_vfprintf_r+0x1a4a>
1a004d0a:	f10d 049a 	add.w	r4, sp, #154	; 0x9a
1a004d0e:	4611      	mov	r1, r2
1a004d10:	e001      	b.n	1a004d16 <_vfprintf_r+0x1936>
1a004d12:	f811 3b01 	ldrb.w	r3, [r1], #1
1a004d16:	f804 3b01 	strb.w	r3, [r4], #1
1a004d1a:	458c      	cmp	ip, r1
1a004d1c:	d1f9      	bne.n	1a004d12 <_vfprintf_r+0x1932>
1a004d1e:	ab2a      	add	r3, sp, #168	; 0xa8
1a004d20:	1a9b      	subs	r3, r3, r2
1a004d22:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
1a004d26:	4413      	add	r3, r2
1a004d28:	f7ff bbe3 	b.w	1a0044f2 <_vfprintf_r+0x1112>
1a004d2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a004d2e:	4f49      	ldr	r7, [pc, #292]	; (1a004e54 <_vfprintf_r+0x1a74>)
1a004d30:	2b00      	cmp	r3, #0
1a004d32:	bfb6      	itet	lt
1a004d34:	222d      	movlt	r2, #45	; 0x2d
1a004d36:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
1a004d3a:	f88d 208b 	strblt.w	r2, [sp, #139]	; 0x8b
1a004d3e:	4b46      	ldr	r3, [pc, #280]	; (1a004e58 <_vfprintf_r+0x1a78>)
1a004d40:	f7fe bf02 	b.w	1a003b48 <_vfprintf_r+0x768>
1a004d44:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a004d48:	f7ff b8c9 	b.w	1a003ede <_vfprintf_r+0xafe>
1a004d4c:	aa28      	add	r2, sp, #160	; 0xa0
1a004d4e:	ab25      	add	r3, sp, #148	; 0x94
1a004d50:	e9cd 3200 	strd	r3, r2, [sp]
1a004d54:	2103      	movs	r1, #3
1a004d56:	ab24      	add	r3, sp, #144	; 0x90
1a004d58:	464a      	mov	r2, r9
1a004d5a:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
1a004d5e:	9803      	ldr	r0, [sp, #12]
1a004d60:	f000 f9b6 	bl	1a0050d0 <_dtoa_r>
1a004d64:	464d      	mov	r5, r9
1a004d66:	4607      	mov	r7, r0
1a004d68:	2e46      	cmp	r6, #70	; 0x46
1a004d6a:	eb07 0405 	add.w	r4, r7, r5
1a004d6e:	f43f af67 	beq.w	1a004c40 <_vfprintf_r+0x1860>
1a004d72:	e76b      	b.n	1a004c4c <_vfprintf_r+0x186c>
1a004d74:	f1b9 0f00 	cmp.w	r9, #0
1a004d78:	d131      	bne.n	1a004dde <_vfprintf_r+0x19fe>
1a004d7a:	07c5      	lsls	r5, r0, #31
1a004d7c:	d42f      	bmi.n	1a004dde <_vfprintf_r+0x19fe>
1a004d7e:	2301      	movs	r3, #1
1a004d80:	9304      	str	r3, [sp, #16]
1a004d82:	9309      	str	r3, [sp, #36]	; 0x24
1a004d84:	2666      	movs	r6, #102	; 0x66
1a004d86:	e642      	b.n	1a004a0e <_vfprintf_r+0x162e>
1a004d88:	07c3      	lsls	r3, r0, #31
1a004d8a:	f57f abbf 	bpl.w	1a00450c <_vfprintf_r+0x112c>
1a004d8e:	f7ff bbb9 	b.w	1a004504 <_vfprintf_r+0x1124>
1a004d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a004d94:	f1c3 0301 	rsb	r3, r3, #1
1a004d98:	441a      	add	r2, r3
1a004d9a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
1a004d9e:	9209      	str	r2, [sp, #36]	; 0x24
1a004da0:	9304      	str	r3, [sp, #16]
1a004da2:	2667      	movs	r6, #103	; 0x67
1a004da4:	e633      	b.n	1a004a0e <_vfprintf_r+0x162e>
1a004da6:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
1a004daa:	f04f 0901 	mov.w	r9, #1
1a004dae:	e457      	b.n	1a004660 <_vfprintf_r+0x1280>
1a004db0:	465a      	mov	r2, fp
1a004db2:	e511      	b.n	1a0047d8 <_vfprintf_r+0x13f8>
1a004db4:	2e47      	cmp	r6, #71	; 0x47
1a004db6:	f47f af5e 	bne.w	1a004c76 <_vfprintf_r+0x1896>
1a004dba:	f018 0f01 	tst.w	r8, #1
1a004dbe:	f43f ab61 	beq.w	1a004484 <_vfprintf_r+0x10a4>
1a004dc2:	e7d1      	b.n	1a004d68 <_vfprintf_r+0x1988>
1a004dc4:	2200      	movs	r2, #0
1a004dc6:	2300      	movs	r3, #0
1a004dc8:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
1a004dcc:	f003 f87e 	bl	1a007ecc <__aeabi_dcmpeq>
1a004dd0:	2800      	cmp	r0, #0
1a004dd2:	f47f af39 	bne.w	1a004c48 <_vfprintf_r+0x1868>
1a004dd6:	f1c5 0501 	rsb	r5, r5, #1
1a004dda:	9524      	str	r5, [sp, #144]	; 0x90
1a004ddc:	e735      	b.n	1a004c4a <_vfprintf_r+0x186a>
1a004dde:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a004de0:	3301      	adds	r3, #1
1a004de2:	444b      	add	r3, r9
1a004de4:	9309      	str	r3, [sp, #36]	; 0x24
1a004de6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a004dea:	9304      	str	r3, [sp, #16]
1a004dec:	2666      	movs	r6, #102	; 0x66
1a004dee:	e60e      	b.n	1a004a0e <_vfprintf_r+0x162e>
1a004df0:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
1a004df4:	f7ff bb7a 	b.w	1a0044ec <_vfprintf_r+0x110c>
1a004df8:	aa2a      	add	r2, sp, #168	; 0xa8
1a004dfa:	9907      	ldr	r1, [sp, #28]
1a004dfc:	9803      	ldr	r0, [sp, #12]
1a004dfe:	f002 fe35 	bl	1a007a6c <__sprint_r>
1a004e02:	2800      	cmp	r0, #0
1a004e04:	f47f a864 	bne.w	1a003ed0 <_vfprintf_r+0xaf0>
1a004e08:	e9dd 242b 	ldrd	r2, r4, [sp, #172]	; 0xac
1a004e0c:	f10d 0bb4 	add.w	fp, sp, #180	; 0xb4
1a004e10:	f7ff bbbd 	b.w	1a00458e <_vfprintf_r+0x11ae>
1a004e14:	9908      	ldr	r1, [sp, #32]
1a004e16:	f89a 6001 	ldrb.w	r6, [sl, #1]
1a004e1a:	680b      	ldr	r3, [r1, #0]
1a004e1c:	ea43 79e3 	orr.w	r9, r3, r3, asr #31
1a004e20:	1d0b      	adds	r3, r1, #4
1a004e22:	4692      	mov	sl, r2
1a004e24:	9308      	str	r3, [sp, #32]
1a004e26:	f7fe bb59 	b.w	1a0034dc <_vfprintf_r+0xfc>
1a004e2a:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
1a004e2e:	f7ff bb60 	b.w	1a0044f2 <_vfprintf_r+0x1112>
1a004e32:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a004e36:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a004e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004e3e:	f8a9 300c 	strh.w	r3, [r9, #12]
1a004e42:	f7ff b84c 	b.w	1a003ede <_vfprintf_r+0xafe>
1a004e46:	bf00      	nop
1a004e48:	1a00854c 	.word	0x1a00854c
1a004e4c:	1a00851c 	.word	0x1a00851c
1a004e50:	cccccccd 	.word	0xcccccccd
1a004e54:	1a008504 	.word	0x1a008504
1a004e58:	1a008500 	.word	0x1a008500

1a004e5c <__sbprintf>:
1a004e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004e60:	460c      	mov	r4, r1
1a004e62:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
1a004e66:	8989      	ldrh	r1, [r1, #12]
1a004e68:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a004e6a:	89e5      	ldrh	r5, [r4, #14]
1a004e6c:	9619      	str	r6, [sp, #100]	; 0x64
1a004e6e:	f021 0102 	bic.w	r1, r1, #2
1a004e72:	4606      	mov	r6, r0
1a004e74:	69e0      	ldr	r0, [r4, #28]
1a004e76:	f8ad 100c 	strh.w	r1, [sp, #12]
1a004e7a:	4617      	mov	r7, r2
1a004e7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
1a004e80:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a004e82:	f8ad 500e 	strh.w	r5, [sp, #14]
1a004e86:	4698      	mov	r8, r3
1a004e88:	ad1a      	add	r5, sp, #104	; 0x68
1a004e8a:	2300      	movs	r3, #0
1a004e8c:	9007      	str	r0, [sp, #28]
1a004e8e:	a816      	add	r0, sp, #88	; 0x58
1a004e90:	9209      	str	r2, [sp, #36]	; 0x24
1a004e92:	9306      	str	r3, [sp, #24]
1a004e94:	9500      	str	r5, [sp, #0]
1a004e96:	9504      	str	r5, [sp, #16]
1a004e98:	9102      	str	r1, [sp, #8]
1a004e9a:	9105      	str	r1, [sp, #20]
1a004e9c:	f001 fc60 	bl	1a006760 <__retarget_lock_init_recursive>
1a004ea0:	4643      	mov	r3, r8
1a004ea2:	463a      	mov	r2, r7
1a004ea4:	4669      	mov	r1, sp
1a004ea6:	4630      	mov	r0, r6
1a004ea8:	f7fe fa9a 	bl	1a0033e0 <_vfprintf_r>
1a004eac:	1e05      	subs	r5, r0, #0
1a004eae:	db07      	blt.n	1a004ec0 <__sbprintf+0x64>
1a004eb0:	4630      	mov	r0, r6
1a004eb2:	4669      	mov	r1, sp
1a004eb4:	f001 f8c6 	bl	1a006044 <_fflush_r>
1a004eb8:	2800      	cmp	r0, #0
1a004eba:	bf18      	it	ne
1a004ebc:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
1a004ec0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a004ec4:	065b      	lsls	r3, r3, #25
1a004ec6:	d503      	bpl.n	1a004ed0 <__sbprintf+0x74>
1a004ec8:	89a3      	ldrh	r3, [r4, #12]
1a004eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004ece:	81a3      	strh	r3, [r4, #12]
1a004ed0:	9816      	ldr	r0, [sp, #88]	; 0x58
1a004ed2:	f001 fc47 	bl	1a006764 <__retarget_lock_close_recursive>
1a004ed6:	4628      	mov	r0, r5
1a004ed8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
1a004edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a004ee0 <__swsetup_r>:
1a004ee0:	b538      	push	{r3, r4, r5, lr}
1a004ee2:	4b31      	ldr	r3, [pc, #196]	; (1a004fa8 <__swsetup_r+0xc8>)
1a004ee4:	681b      	ldr	r3, [r3, #0]
1a004ee6:	4605      	mov	r5, r0
1a004ee8:	460c      	mov	r4, r1
1a004eea:	b113      	cbz	r3, 1a004ef2 <__swsetup_r+0x12>
1a004eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a004eee:	2a00      	cmp	r2, #0
1a004ef0:	d03a      	beq.n	1a004f68 <__swsetup_r+0x88>
1a004ef2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a004ef6:	b293      	uxth	r3, r2
1a004ef8:	0718      	lsls	r0, r3, #28
1a004efa:	d50c      	bpl.n	1a004f16 <__swsetup_r+0x36>
1a004efc:	6920      	ldr	r0, [r4, #16]
1a004efe:	b1a8      	cbz	r0, 1a004f2c <__swsetup_r+0x4c>
1a004f00:	f013 0201 	ands.w	r2, r3, #1
1a004f04:	d020      	beq.n	1a004f48 <__swsetup_r+0x68>
1a004f06:	6963      	ldr	r3, [r4, #20]
1a004f08:	2200      	movs	r2, #0
1a004f0a:	425b      	negs	r3, r3
1a004f0c:	61a3      	str	r3, [r4, #24]
1a004f0e:	60a2      	str	r2, [r4, #8]
1a004f10:	b300      	cbz	r0, 1a004f54 <__swsetup_r+0x74>
1a004f12:	2000      	movs	r0, #0
1a004f14:	bd38      	pop	{r3, r4, r5, pc}
1a004f16:	06d9      	lsls	r1, r3, #27
1a004f18:	d53e      	bpl.n	1a004f98 <__swsetup_r+0xb8>
1a004f1a:	0758      	lsls	r0, r3, #29
1a004f1c:	d428      	bmi.n	1a004f70 <__swsetup_r+0x90>
1a004f1e:	6920      	ldr	r0, [r4, #16]
1a004f20:	f042 0308 	orr.w	r3, r2, #8
1a004f24:	81a3      	strh	r3, [r4, #12]
1a004f26:	b29b      	uxth	r3, r3
1a004f28:	2800      	cmp	r0, #0
1a004f2a:	d1e9      	bne.n	1a004f00 <__swsetup_r+0x20>
1a004f2c:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a004f30:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a004f34:	d0e4      	beq.n	1a004f00 <__swsetup_r+0x20>
1a004f36:	4628      	mov	r0, r5
1a004f38:	4621      	mov	r1, r4
1a004f3a:	f001 fc47 	bl	1a0067cc <__smakebuf_r>
1a004f3e:	89a3      	ldrh	r3, [r4, #12]
1a004f40:	6920      	ldr	r0, [r4, #16]
1a004f42:	f013 0201 	ands.w	r2, r3, #1
1a004f46:	d1de      	bne.n	1a004f06 <__swsetup_r+0x26>
1a004f48:	0799      	lsls	r1, r3, #30
1a004f4a:	bf58      	it	pl
1a004f4c:	6962      	ldrpl	r2, [r4, #20]
1a004f4e:	60a2      	str	r2, [r4, #8]
1a004f50:	2800      	cmp	r0, #0
1a004f52:	d1de      	bne.n	1a004f12 <__swsetup_r+0x32>
1a004f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a004f58:	061a      	lsls	r2, r3, #24
1a004f5a:	d5db      	bpl.n	1a004f14 <__swsetup_r+0x34>
1a004f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004f60:	81a3      	strh	r3, [r4, #12]
1a004f62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004f66:	bd38      	pop	{r3, r4, r5, pc}
1a004f68:	4618      	mov	r0, r3
1a004f6a:	f001 f8c7 	bl	1a0060fc <__sinit>
1a004f6e:	e7c0      	b.n	1a004ef2 <__swsetup_r+0x12>
1a004f70:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a004f72:	b151      	cbz	r1, 1a004f8a <__swsetup_r+0xaa>
1a004f74:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a004f78:	4299      	cmp	r1, r3
1a004f7a:	d004      	beq.n	1a004f86 <__swsetup_r+0xa6>
1a004f7c:	4628      	mov	r0, r5
1a004f7e:	f001 f945 	bl	1a00620c <_free_r>
1a004f82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a004f86:	2300      	movs	r3, #0
1a004f88:	6323      	str	r3, [r4, #48]	; 0x30
1a004f8a:	2300      	movs	r3, #0
1a004f8c:	6920      	ldr	r0, [r4, #16]
1a004f8e:	6063      	str	r3, [r4, #4]
1a004f90:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a004f94:	6020      	str	r0, [r4, #0]
1a004f96:	e7c3      	b.n	1a004f20 <__swsetup_r+0x40>
1a004f98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a004f9c:	2309      	movs	r3, #9
1a004f9e:	602b      	str	r3, [r5, #0]
1a004fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a004fa4:	81a2      	strh	r2, [r4, #12]
1a004fa6:	bd38      	pop	{r3, r4, r5, pc}
1a004fa8:	100000cc 	.word	0x100000cc

1a004fac <quorem>:
1a004fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004fb0:	6903      	ldr	r3, [r0, #16]
1a004fb2:	690f      	ldr	r7, [r1, #16]
1a004fb4:	42bb      	cmp	r3, r7
1a004fb6:	b083      	sub	sp, #12
1a004fb8:	f2c0 8086 	blt.w	1a0050c8 <quorem+0x11c>
1a004fbc:	3f01      	subs	r7, #1
1a004fbe:	f101 0914 	add.w	r9, r1, #20
1a004fc2:	f100 0a14 	add.w	sl, r0, #20
1a004fc6:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
1a004fca:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
1a004fce:	00bc      	lsls	r4, r7, #2
1a004fd0:	3201      	adds	r2, #1
1a004fd2:	fbb3 f8f2 	udiv	r8, r3, r2
1a004fd6:	eb0a 0304 	add.w	r3, sl, r4
1a004fda:	9400      	str	r4, [sp, #0]
1a004fdc:	eb09 0b04 	add.w	fp, r9, r4
1a004fe0:	9301      	str	r3, [sp, #4]
1a004fe2:	f1b8 0f00 	cmp.w	r8, #0
1a004fe6:	d038      	beq.n	1a00505a <quorem+0xae>
1a004fe8:	2500      	movs	r5, #0
1a004fea:	462e      	mov	r6, r5
1a004fec:	46ce      	mov	lr, r9
1a004fee:	46d4      	mov	ip, sl
1a004ff0:	f85e 4b04 	ldr.w	r4, [lr], #4
1a004ff4:	f8dc 3000 	ldr.w	r3, [ip]
1a004ff8:	b2a2      	uxth	r2, r4
1a004ffa:	fb08 5502 	mla	r5, r8, r2, r5
1a004ffe:	0c22      	lsrs	r2, r4, #16
1a005000:	0c2c      	lsrs	r4, r5, #16
1a005002:	fb08 4202 	mla	r2, r8, r2, r4
1a005006:	b2ad      	uxth	r5, r5
1a005008:	1b75      	subs	r5, r6, r5
1a00500a:	b296      	uxth	r6, r2
1a00500c:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
1a005010:	fa15 f383 	uxtah	r3, r5, r3
1a005014:	eb06 4623 	add.w	r6, r6, r3, asr #16
1a005018:	b29b      	uxth	r3, r3
1a00501a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
1a00501e:	45f3      	cmp	fp, lr
1a005020:	ea4f 4512 	mov.w	r5, r2, lsr #16
1a005024:	f84c 3b04 	str.w	r3, [ip], #4
1a005028:	ea4f 4626 	mov.w	r6, r6, asr #16
1a00502c:	d2e0      	bcs.n	1a004ff0 <quorem+0x44>
1a00502e:	9b00      	ldr	r3, [sp, #0]
1a005030:	f85a 3003 	ldr.w	r3, [sl, r3]
1a005034:	b98b      	cbnz	r3, 1a00505a <quorem+0xae>
1a005036:	9a01      	ldr	r2, [sp, #4]
1a005038:	1f13      	subs	r3, r2, #4
1a00503a:	459a      	cmp	sl, r3
1a00503c:	d20c      	bcs.n	1a005058 <quorem+0xac>
1a00503e:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a005042:	b94b      	cbnz	r3, 1a005058 <quorem+0xac>
1a005044:	f1a2 0308 	sub.w	r3, r2, #8
1a005048:	e002      	b.n	1a005050 <quorem+0xa4>
1a00504a:	681a      	ldr	r2, [r3, #0]
1a00504c:	3b04      	subs	r3, #4
1a00504e:	b91a      	cbnz	r2, 1a005058 <quorem+0xac>
1a005050:	459a      	cmp	sl, r3
1a005052:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a005056:	d3f8      	bcc.n	1a00504a <quorem+0x9e>
1a005058:	6107      	str	r7, [r0, #16]
1a00505a:	4604      	mov	r4, r0
1a00505c:	f002 f97e 	bl	1a00735c <__mcmp>
1a005060:	2800      	cmp	r0, #0
1a005062:	db2d      	blt.n	1a0050c0 <quorem+0x114>
1a005064:	f108 0801 	add.w	r8, r8, #1
1a005068:	4655      	mov	r5, sl
1a00506a:	2300      	movs	r3, #0
1a00506c:	f859 1b04 	ldr.w	r1, [r9], #4
1a005070:	6828      	ldr	r0, [r5, #0]
1a005072:	b28a      	uxth	r2, r1
1a005074:	1a9a      	subs	r2, r3, r2
1a005076:	0c0b      	lsrs	r3, r1, #16
1a005078:	fa12 f280 	uxtah	r2, r2, r0
1a00507c:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
1a005080:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a005084:	b292      	uxth	r2, r2
1a005086:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a00508a:	45cb      	cmp	fp, r9
1a00508c:	f845 2b04 	str.w	r2, [r5], #4
1a005090:	ea4f 4323 	mov.w	r3, r3, asr #16
1a005094:	d2ea      	bcs.n	1a00506c <quorem+0xc0>
1a005096:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
1a00509a:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
1a00509e:	b97a      	cbnz	r2, 1a0050c0 <quorem+0x114>
1a0050a0:	1f1a      	subs	r2, r3, #4
1a0050a2:	4592      	cmp	sl, r2
1a0050a4:	d20b      	bcs.n	1a0050be <quorem+0x112>
1a0050a6:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a0050aa:	b942      	cbnz	r2, 1a0050be <quorem+0x112>
1a0050ac:	3b08      	subs	r3, #8
1a0050ae:	e002      	b.n	1a0050b6 <quorem+0x10a>
1a0050b0:	681a      	ldr	r2, [r3, #0]
1a0050b2:	3b04      	subs	r3, #4
1a0050b4:	b91a      	cbnz	r2, 1a0050be <quorem+0x112>
1a0050b6:	459a      	cmp	sl, r3
1a0050b8:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
1a0050bc:	d3f8      	bcc.n	1a0050b0 <quorem+0x104>
1a0050be:	6127      	str	r7, [r4, #16]
1a0050c0:	4640      	mov	r0, r8
1a0050c2:	b003      	add	sp, #12
1a0050c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0050c8:	2000      	movs	r0, #0
1a0050ca:	b003      	add	sp, #12
1a0050cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a0050d0 <_dtoa_r>:
1a0050d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0050d4:	ec55 4b10 	vmov	r4, r5, d0
1a0050d8:	b09b      	sub	sp, #108	; 0x6c
1a0050da:	6c06      	ldr	r6, [r0, #64]	; 0x40
1a0050dc:	9102      	str	r1, [sp, #8]
1a0050de:	4681      	mov	r9, r0
1a0050e0:	9207      	str	r2, [sp, #28]
1a0050e2:	9305      	str	r3, [sp, #20]
1a0050e4:	e9cd 4500 	strd	r4, r5, [sp]
1a0050e8:	b156      	cbz	r6, 1a005100 <_dtoa_r+0x30>
1a0050ea:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a0050ec:	6072      	str	r2, [r6, #4]
1a0050ee:	2301      	movs	r3, #1
1a0050f0:	4093      	lsls	r3, r2
1a0050f2:	60b3      	str	r3, [r6, #8]
1a0050f4:	4631      	mov	r1, r6
1a0050f6:	f001 ff41 	bl	1a006f7c <_Bfree>
1a0050fa:	2300      	movs	r3, #0
1a0050fc:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
1a005100:	f1b5 0800 	subs.w	r8, r5, #0
1a005104:	9a24      	ldr	r2, [sp, #144]	; 0x90
1a005106:	bfb4      	ite	lt
1a005108:	2301      	movlt	r3, #1
1a00510a:	2300      	movge	r3, #0
1a00510c:	6013      	str	r3, [r2, #0]
1a00510e:	4b76      	ldr	r3, [pc, #472]	; (1a0052e8 <_dtoa_r+0x218>)
1a005110:	bfbc      	itt	lt
1a005112:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
1a005116:	f8cd 8004 	strlt.w	r8, [sp, #4]
1a00511a:	ea33 0308 	bics.w	r3, r3, r8
1a00511e:	f000 80a6 	beq.w	1a00526e <_dtoa_r+0x19e>
1a005122:	e9dd 6700 	ldrd	r6, r7, [sp]
1a005126:	2200      	movs	r2, #0
1a005128:	2300      	movs	r3, #0
1a00512a:	4630      	mov	r0, r6
1a00512c:	4639      	mov	r1, r7
1a00512e:	f002 fecd 	bl	1a007ecc <__aeabi_dcmpeq>
1a005132:	4605      	mov	r5, r0
1a005134:	b178      	cbz	r0, 1a005156 <_dtoa_r+0x86>
1a005136:	9a05      	ldr	r2, [sp, #20]
1a005138:	2301      	movs	r3, #1
1a00513a:	6013      	str	r3, [r2, #0]
1a00513c:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a00513e:	2b00      	cmp	r3, #0
1a005140:	f000 80c0 	beq.w	1a0052c4 <_dtoa_r+0x1f4>
1a005144:	4b69      	ldr	r3, [pc, #420]	; (1a0052ec <_dtoa_r+0x21c>)
1a005146:	9a25      	ldr	r2, [sp, #148]	; 0x94
1a005148:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
1a00514c:	6013      	str	r3, [r2, #0]
1a00514e:	4658      	mov	r0, fp
1a005150:	b01b      	add	sp, #108	; 0x6c
1a005152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005156:	aa18      	add	r2, sp, #96	; 0x60
1a005158:	a919      	add	r1, sp, #100	; 0x64
1a00515a:	ec47 6b10 	vmov	d0, r6, r7
1a00515e:	4648      	mov	r0, r9
1a005160:	f002 f98e 	bl	1a007480 <__d2b>
1a005164:	ea5f 5418 	movs.w	r4, r8, lsr #20
1a005168:	4682      	mov	sl, r0
1a00516a:	f040 80a0 	bne.w	1a0052ae <_dtoa_r+0x1de>
1a00516e:	e9dd 5418 	ldrd	r5, r4, [sp, #96]	; 0x60
1a005172:	442c      	add	r4, r5
1a005174:	f204 4332 	addw	r3, r4, #1074	; 0x432
1a005178:	2b20      	cmp	r3, #32
1a00517a:	f340 842c 	ble.w	1a0059d6 <_dtoa_r+0x906>
1a00517e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
1a005182:	fa08 f803 	lsl.w	r8, r8, r3
1a005186:	9b00      	ldr	r3, [sp, #0]
1a005188:	f204 4012 	addw	r0, r4, #1042	; 0x412
1a00518c:	fa23 f000 	lsr.w	r0, r3, r0
1a005190:	ea48 0000 	orr.w	r0, r8, r0
1a005194:	f7fd fb28 	bl	1a0027e8 <__aeabi_ui2d>
1a005198:	2301      	movs	r3, #1
1a00519a:	4606      	mov	r6, r0
1a00519c:	3c01      	subs	r4, #1
1a00519e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
1a0051a2:	930f      	str	r3, [sp, #60]	; 0x3c
1a0051a4:	4630      	mov	r0, r6
1a0051a6:	4639      	mov	r1, r7
1a0051a8:	2200      	movs	r2, #0
1a0051aa:	4b51      	ldr	r3, [pc, #324]	; (1a0052f0 <_dtoa_r+0x220>)
1a0051ac:	f7fd f9de 	bl	1a00256c <__aeabi_dsub>
1a0051b0:	a347      	add	r3, pc, #284	; (adr r3, 1a0052d0 <_dtoa_r+0x200>)
1a0051b2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0051b6:	f7fd fd11 	bl	1a002bdc <__aeabi_dmul>
1a0051ba:	a347      	add	r3, pc, #284	; (adr r3, 1a0052d8 <_dtoa_r+0x208>)
1a0051bc:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0051c0:	f7fd f9d6 	bl	1a002570 <__adddf3>
1a0051c4:	4606      	mov	r6, r0
1a0051c6:	4620      	mov	r0, r4
1a0051c8:	460f      	mov	r7, r1
1a0051ca:	f7fd fb1d 	bl	1a002808 <__aeabi_i2d>
1a0051ce:	a344      	add	r3, pc, #272	; (adr r3, 1a0052e0 <_dtoa_r+0x210>)
1a0051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0051d4:	f7fd fd02 	bl	1a002bdc <__aeabi_dmul>
1a0051d8:	4602      	mov	r2, r0
1a0051da:	460b      	mov	r3, r1
1a0051dc:	4630      	mov	r0, r6
1a0051de:	4639      	mov	r1, r7
1a0051e0:	f7fd f9c6 	bl	1a002570 <__adddf3>
1a0051e4:	4606      	mov	r6, r0
1a0051e6:	460f      	mov	r7, r1
1a0051e8:	f002 feb8 	bl	1a007f5c <__aeabi_d2iz>
1a0051ec:	2200      	movs	r2, #0
1a0051ee:	9006      	str	r0, [sp, #24]
1a0051f0:	2300      	movs	r3, #0
1a0051f2:	4630      	mov	r0, r6
1a0051f4:	4639      	mov	r1, r7
1a0051f6:	f002 fe73 	bl	1a007ee0 <__aeabi_dcmplt>
1a0051fa:	2800      	cmp	r0, #0
1a0051fc:	f040 8273 	bne.w	1a0056e6 <_dtoa_r+0x616>
1a005200:	9e06      	ldr	r6, [sp, #24]
1a005202:	2e16      	cmp	r6, #22
1a005204:	f200 825d 	bhi.w	1a0056c2 <_dtoa_r+0x5f2>
1a005208:	4b3a      	ldr	r3, [pc, #232]	; (1a0052f4 <_dtoa_r+0x224>)
1a00520a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
1a00520e:	e9d3 0100 	ldrd	r0, r1, [r3]
1a005212:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005216:	f002 fe81 	bl	1a007f1c <__aeabi_dcmpgt>
1a00521a:	2800      	cmp	r0, #0
1a00521c:	f000 83d7 	beq.w	1a0059ce <_dtoa_r+0x8fe>
1a005220:	1e73      	subs	r3, r6, #1
1a005222:	9306      	str	r3, [sp, #24]
1a005224:	2300      	movs	r3, #0
1a005226:	930d      	str	r3, [sp, #52]	; 0x34
1a005228:	1b2c      	subs	r4, r5, r4
1a00522a:	f1b4 0801 	subs.w	r8, r4, #1
1a00522e:	f100 8254 	bmi.w	1a0056da <_dtoa_r+0x60a>
1a005232:	2300      	movs	r3, #0
1a005234:	9308      	str	r3, [sp, #32]
1a005236:	9b06      	ldr	r3, [sp, #24]
1a005238:	2b00      	cmp	r3, #0
1a00523a:	f2c0 8245 	blt.w	1a0056c8 <_dtoa_r+0x5f8>
1a00523e:	4498      	add	r8, r3
1a005240:	930c      	str	r3, [sp, #48]	; 0x30
1a005242:	2300      	movs	r3, #0
1a005244:	930b      	str	r3, [sp, #44]	; 0x2c
1a005246:	9b02      	ldr	r3, [sp, #8]
1a005248:	2b09      	cmp	r3, #9
1a00524a:	d85b      	bhi.n	1a005304 <_dtoa_r+0x234>
1a00524c:	2b05      	cmp	r3, #5
1a00524e:	f340 83c0 	ble.w	1a0059d2 <_dtoa_r+0x902>
1a005252:	3b04      	subs	r3, #4
1a005254:	9302      	str	r3, [sp, #8]
1a005256:	2500      	movs	r5, #0
1a005258:	9b02      	ldr	r3, [sp, #8]
1a00525a:	3b02      	subs	r3, #2
1a00525c:	2b03      	cmp	r3, #3
1a00525e:	f200 8498 	bhi.w	1a005b92 <_dtoa_r+0xac2>
1a005262:	e8df f013 	tbh	[pc, r3, lsl #1]
1a005266:	03df      	.short	0x03df
1a005268:	03e803bf 	.word	0x03e803bf
1a00526c:	04f5      	.short	0x04f5
1a00526e:	9a05      	ldr	r2, [sp, #20]
1a005270:	f242 730f 	movw	r3, #9999	; 0x270f
1a005274:	6013      	str	r3, [r2, #0]
1a005276:	9b00      	ldr	r3, [sp, #0]
1a005278:	b983      	cbnz	r3, 1a00529c <_dtoa_r+0x1cc>
1a00527a:	f3c8 0313 	ubfx	r3, r8, #0, #20
1a00527e:	b96b      	cbnz	r3, 1a00529c <_dtoa_r+0x1cc>
1a005280:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a005282:	f8df b074 	ldr.w	fp, [pc, #116]	; 1a0052f8 <_dtoa_r+0x228>
1a005286:	2b00      	cmp	r3, #0
1a005288:	f43f af61 	beq.w	1a00514e <_dtoa_r+0x7e>
1a00528c:	f10b 0308 	add.w	r3, fp, #8
1a005290:	9a25      	ldr	r2, [sp, #148]	; 0x94
1a005292:	4658      	mov	r0, fp
1a005294:	6013      	str	r3, [r2, #0]
1a005296:	b01b      	add	sp, #108	; 0x6c
1a005298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00529c:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a00529e:	f8df b05c 	ldr.w	fp, [pc, #92]	; 1a0052fc <_dtoa_r+0x22c>
1a0052a2:	2b00      	cmp	r3, #0
1a0052a4:	f43f af53 	beq.w	1a00514e <_dtoa_r+0x7e>
1a0052a8:	f10b 0303 	add.w	r3, fp, #3
1a0052ac:	e7f0      	b.n	1a005290 <_dtoa_r+0x1c0>
1a0052ae:	f3c7 0313 	ubfx	r3, r7, #0, #20
1a0052b2:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
1a0052b6:	950f      	str	r5, [sp, #60]	; 0x3c
1a0052b8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a0052bc:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
1a0052c0:	9d18      	ldr	r5, [sp, #96]	; 0x60
1a0052c2:	e76f      	b.n	1a0051a4 <_dtoa_r+0xd4>
1a0052c4:	f8df b038 	ldr.w	fp, [pc, #56]	; 1a005300 <_dtoa_r+0x230>
1a0052c8:	4658      	mov	r0, fp
1a0052ca:	b01b      	add	sp, #108	; 0x6c
1a0052cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0052d0:	636f4361 	.word	0x636f4361
1a0052d4:	3fd287a7 	.word	0x3fd287a7
1a0052d8:	8b60c8b3 	.word	0x8b60c8b3
1a0052dc:	3fc68a28 	.word	0x3fc68a28
1a0052e0:	509f79fb 	.word	0x509f79fb
1a0052e4:	3fd34413 	.word	0x3fd34413
1a0052e8:	7ff00000 	.word	0x7ff00000
1a0052ec:	1a008539 	.word	0x1a008539
1a0052f0:	3ff80000 	.word	0x3ff80000
1a0052f4:	1a008598 	.word	0x1a008598
1a0052f8:	1a00855c 	.word	0x1a00855c
1a0052fc:	1a008568 	.word	0x1a008568
1a005300:	1a008538 	.word	0x1a008538
1a005304:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
1a005308:	2501      	movs	r5, #1
1a00530a:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
1a00530e:	2300      	movs	r3, #0
1a005310:	9302      	str	r3, [sp, #8]
1a005312:	9307      	str	r3, [sp, #28]
1a005314:	2100      	movs	r1, #0
1a005316:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
1a00531a:	940e      	str	r4, [sp, #56]	; 0x38
1a00531c:	4648      	mov	r0, r9
1a00531e:	f001 fe07 	bl	1a006f30 <_Balloc>
1a005322:	2c0e      	cmp	r4, #14
1a005324:	4683      	mov	fp, r0
1a005326:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
1a00532a:	f200 80fb 	bhi.w	1a005524 <_dtoa_r+0x454>
1a00532e:	2d00      	cmp	r5, #0
1a005330:	f000 80f8 	beq.w	1a005524 <_dtoa_r+0x454>
1a005334:	ed9d 7b00 	vldr	d7, [sp]
1a005338:	9906      	ldr	r1, [sp, #24]
1a00533a:	2900      	cmp	r1, #0
1a00533c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a005340:	f340 83e5 	ble.w	1a005b0e <_dtoa_r+0xa3e>
1a005344:	4b9d      	ldr	r3, [pc, #628]	; (1a0055bc <_dtoa_r+0x4ec>)
1a005346:	f001 020f 	and.w	r2, r1, #15
1a00534a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a00534e:	ed93 7b00 	vldr	d7, [r3]
1a005352:	110c      	asrs	r4, r1, #4
1a005354:	06e2      	lsls	r2, r4, #27
1a005356:	ed8d 7b00 	vstr	d7, [sp]
1a00535a:	f140 849e 	bpl.w	1a005c9a <_dtoa_r+0xbca>
1a00535e:	4b98      	ldr	r3, [pc, #608]	; (1a0055c0 <_dtoa_r+0x4f0>)
1a005360:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a005364:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a005368:	f7fd fd62 	bl	1a002e30 <__aeabi_ddiv>
1a00536c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
1a005370:	f004 040f 	and.w	r4, r4, #15
1a005374:	2603      	movs	r6, #3
1a005376:	b17c      	cbz	r4, 1a005398 <_dtoa_r+0x2c8>
1a005378:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00537c:	4d90      	ldr	r5, [pc, #576]	; (1a0055c0 <_dtoa_r+0x4f0>)
1a00537e:	07e3      	lsls	r3, r4, #31
1a005380:	d504      	bpl.n	1a00538c <_dtoa_r+0x2bc>
1a005382:	e9d5 2300 	ldrd	r2, r3, [r5]
1a005386:	f7fd fc29 	bl	1a002bdc <__aeabi_dmul>
1a00538a:	3601      	adds	r6, #1
1a00538c:	1064      	asrs	r4, r4, #1
1a00538e:	f105 0508 	add.w	r5, r5, #8
1a005392:	d1f4      	bne.n	1a00537e <_dtoa_r+0x2ae>
1a005394:	e9cd 0100 	strd	r0, r1, [sp]
1a005398:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00539c:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a0053a0:	f7fd fd46 	bl	1a002e30 <__aeabi_ddiv>
1a0053a4:	e9cd 0100 	strd	r0, r1, [sp]
1a0053a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0053aa:	b143      	cbz	r3, 1a0053be <_dtoa_r+0x2ee>
1a0053ac:	2200      	movs	r2, #0
1a0053ae:	4b85      	ldr	r3, [pc, #532]	; (1a0055c4 <_dtoa_r+0x4f4>)
1a0053b0:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0053b4:	f002 fd94 	bl	1a007ee0 <__aeabi_dcmplt>
1a0053b8:	2800      	cmp	r0, #0
1a0053ba:	f040 84ff 	bne.w	1a005dbc <_dtoa_r+0xcec>
1a0053be:	4630      	mov	r0, r6
1a0053c0:	f7fd fa22 	bl	1a002808 <__aeabi_i2d>
1a0053c4:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0053c8:	f7fd fc08 	bl	1a002bdc <__aeabi_dmul>
1a0053cc:	4b7e      	ldr	r3, [pc, #504]	; (1a0055c8 <_dtoa_r+0x4f8>)
1a0053ce:	2200      	movs	r2, #0
1a0053d0:	f7fd f8ce 	bl	1a002570 <__adddf3>
1a0053d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0053d6:	4606      	mov	r6, r0
1a0053d8:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a0053dc:	2b00      	cmp	r3, #0
1a0053de:	f000 841c 	beq.w	1a005c1a <_dtoa_r+0xb4a>
1a0053e2:	9b06      	ldr	r3, [sp, #24]
1a0053e4:	9316      	str	r3, [sp, #88]	; 0x58
1a0053e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0053e8:	9312      	str	r3, [sp, #72]	; 0x48
1a0053ea:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0053ee:	f002 fdb5 	bl	1a007f5c <__aeabi_d2iz>
1a0053f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a0053f4:	4b71      	ldr	r3, [pc, #452]	; (1a0055bc <_dtoa_r+0x4ec>)
1a0053f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a0053fa:	ed13 7b02 	vldr	d7, [r3, #-8]
1a0053fe:	f100 0530 	add.w	r5, r0, #48	; 0x30
1a005402:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
1a005406:	f7fd f9ff 	bl	1a002808 <__aeabi_i2d>
1a00540a:	460b      	mov	r3, r1
1a00540c:	4602      	mov	r2, r0
1a00540e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005412:	e9cd 6700 	strd	r6, r7, [sp]
1a005416:	f7fd f8a9 	bl	1a00256c <__aeabi_dsub>
1a00541a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00541c:	b2ed      	uxtb	r5, r5
1a00541e:	4606      	mov	r6, r0
1a005420:	460f      	mov	r7, r1
1a005422:	f10b 0401 	add.w	r4, fp, #1
1a005426:	2b00      	cmp	r3, #0
1a005428:	f000 8458 	beq.w	1a005cdc <_dtoa_r+0xc0c>
1a00542c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
1a005430:	2000      	movs	r0, #0
1a005432:	4966      	ldr	r1, [pc, #408]	; (1a0055cc <_dtoa_r+0x4fc>)
1a005434:	f7fd fcfc 	bl	1a002e30 <__aeabi_ddiv>
1a005438:	e9dd 2300 	ldrd	r2, r3, [sp]
1a00543c:	f7fd f896 	bl	1a00256c <__aeabi_dsub>
1a005440:	f88b 5000 	strb.w	r5, [fp]
1a005444:	4632      	mov	r2, r6
1a005446:	463b      	mov	r3, r7
1a005448:	e9cd 0100 	strd	r0, r1, [sp]
1a00544c:	f002 fd66 	bl	1a007f1c <__aeabi_dcmpgt>
1a005450:	2800      	cmp	r0, #0
1a005452:	f040 8502 	bne.w	1a005e5a <_dtoa_r+0xd8a>
1a005456:	4632      	mov	r2, r6
1a005458:	463b      	mov	r3, r7
1a00545a:	2000      	movs	r0, #0
1a00545c:	4959      	ldr	r1, [pc, #356]	; (1a0055c4 <_dtoa_r+0x4f4>)
1a00545e:	f7fd f885 	bl	1a00256c <__aeabi_dsub>
1a005462:	4602      	mov	r2, r0
1a005464:	460b      	mov	r3, r1
1a005466:	e9dd 0100 	ldrd	r0, r1, [sp]
1a00546a:	f002 fd57 	bl	1a007f1c <__aeabi_dcmpgt>
1a00546e:	2800      	cmp	r0, #0
1a005470:	f040 84fb 	bne.w	1a005e6a <_dtoa_r+0xd9a>
1a005474:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a005476:	2a01      	cmp	r2, #1
1a005478:	d050      	beq.n	1a00551c <_dtoa_r+0x44c>
1a00547a:	445a      	add	r2, fp
1a00547c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
1a005480:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
1a005484:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
1a005488:	4692      	mov	sl, r2
1a00548a:	46cb      	mov	fp, r9
1a00548c:	e9dd 8900 	ldrd	r8, r9, [sp]
1a005490:	e00c      	b.n	1a0054ac <_dtoa_r+0x3dc>
1a005492:	2000      	movs	r0, #0
1a005494:	494b      	ldr	r1, [pc, #300]	; (1a0055c4 <_dtoa_r+0x4f4>)
1a005496:	f7fd f869 	bl	1a00256c <__aeabi_dsub>
1a00549a:	4642      	mov	r2, r8
1a00549c:	464b      	mov	r3, r9
1a00549e:	f002 fd1f 	bl	1a007ee0 <__aeabi_dcmplt>
1a0054a2:	2800      	cmp	r0, #0
1a0054a4:	f040 84dc 	bne.w	1a005e60 <_dtoa_r+0xd90>
1a0054a8:	4554      	cmp	r4, sl
1a0054aa:	d030      	beq.n	1a00550e <_dtoa_r+0x43e>
1a0054ac:	4640      	mov	r0, r8
1a0054ae:	4649      	mov	r1, r9
1a0054b0:	2200      	movs	r2, #0
1a0054b2:	4b47      	ldr	r3, [pc, #284]	; (1a0055d0 <_dtoa_r+0x500>)
1a0054b4:	f7fd fb92 	bl	1a002bdc <__aeabi_dmul>
1a0054b8:	2200      	movs	r2, #0
1a0054ba:	4b45      	ldr	r3, [pc, #276]	; (1a0055d0 <_dtoa_r+0x500>)
1a0054bc:	4680      	mov	r8, r0
1a0054be:	4689      	mov	r9, r1
1a0054c0:	4630      	mov	r0, r6
1a0054c2:	4639      	mov	r1, r7
1a0054c4:	f7fd fb8a 	bl	1a002bdc <__aeabi_dmul>
1a0054c8:	460f      	mov	r7, r1
1a0054ca:	4606      	mov	r6, r0
1a0054cc:	f002 fd46 	bl	1a007f5c <__aeabi_d2iz>
1a0054d0:	4605      	mov	r5, r0
1a0054d2:	f7fd f999 	bl	1a002808 <__aeabi_i2d>
1a0054d6:	4602      	mov	r2, r0
1a0054d8:	460b      	mov	r3, r1
1a0054da:	4630      	mov	r0, r6
1a0054dc:	4639      	mov	r1, r7
1a0054de:	f7fd f845 	bl	1a00256c <__aeabi_dsub>
1a0054e2:	3530      	adds	r5, #48	; 0x30
1a0054e4:	b2ed      	uxtb	r5, r5
1a0054e6:	4642      	mov	r2, r8
1a0054e8:	464b      	mov	r3, r9
1a0054ea:	f804 5b01 	strb.w	r5, [r4], #1
1a0054ee:	4606      	mov	r6, r0
1a0054f0:	460f      	mov	r7, r1
1a0054f2:	f002 fcf5 	bl	1a007ee0 <__aeabi_dcmplt>
1a0054f6:	4632      	mov	r2, r6
1a0054f8:	463b      	mov	r3, r7
1a0054fa:	2800      	cmp	r0, #0
1a0054fc:	d0c9      	beq.n	1a005492 <_dtoa_r+0x3c2>
1a0054fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a005500:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a005504:	9306      	str	r3, [sp, #24]
1a005506:	46d9      	mov	r9, fp
1a005508:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
1a00550c:	e236      	b.n	1a00597c <_dtoa_r+0x8ac>
1a00550e:	46d9      	mov	r9, fp
1a005510:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
1a005514:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a005518:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
1a00551c:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
1a005520:	e9cd 3400 	strd	r3, r4, [sp]
1a005524:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a005526:	2b00      	cmp	r3, #0
1a005528:	f2c0 80ae 	blt.w	1a005688 <_dtoa_r+0x5b8>
1a00552c:	9a06      	ldr	r2, [sp, #24]
1a00552e:	2a0e      	cmp	r2, #14
1a005530:	f300 80aa 	bgt.w	1a005688 <_dtoa_r+0x5b8>
1a005534:	4b21      	ldr	r3, [pc, #132]	; (1a0055bc <_dtoa_r+0x4ec>)
1a005536:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a00553a:	ed93 7b00 	vldr	d7, [r3]
1a00553e:	9b07      	ldr	r3, [sp, #28]
1a005540:	2b00      	cmp	r3, #0
1a005542:	ed8d 7b02 	vstr	d7, [sp, #8]
1a005546:	f2c0 82be 	blt.w	1a005ac6 <_dtoa_r+0x9f6>
1a00554a:	e9dd 6700 	ldrd	r6, r7, [sp]
1a00554e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a005552:	4630      	mov	r0, r6
1a005554:	4639      	mov	r1, r7
1a005556:	f7fd fc6b 	bl	1a002e30 <__aeabi_ddiv>
1a00555a:	f002 fcff 	bl	1a007f5c <__aeabi_d2iz>
1a00555e:	4605      	mov	r5, r0
1a005560:	f7fd f952 	bl	1a002808 <__aeabi_i2d>
1a005564:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a005568:	f7fd fb38 	bl	1a002bdc <__aeabi_dmul>
1a00556c:	460b      	mov	r3, r1
1a00556e:	4602      	mov	r2, r0
1a005570:	4639      	mov	r1, r7
1a005572:	4630      	mov	r0, r6
1a005574:	f7fc fffa 	bl	1a00256c <__aeabi_dsub>
1a005578:	f105 0330 	add.w	r3, r5, #48	; 0x30
1a00557c:	f88b 3000 	strb.w	r3, [fp]
1a005580:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005582:	2b01      	cmp	r3, #1
1a005584:	4606      	mov	r6, r0
1a005586:	460f      	mov	r7, r1
1a005588:	f10b 0401 	add.w	r4, fp, #1
1a00558c:	d053      	beq.n	1a005636 <_dtoa_r+0x566>
1a00558e:	2200      	movs	r2, #0
1a005590:	4b0f      	ldr	r3, [pc, #60]	; (1a0055d0 <_dtoa_r+0x500>)
1a005592:	f7fd fb23 	bl	1a002bdc <__aeabi_dmul>
1a005596:	2200      	movs	r2, #0
1a005598:	2300      	movs	r3, #0
1a00559a:	4606      	mov	r6, r0
1a00559c:	460f      	mov	r7, r1
1a00559e:	f002 fc95 	bl	1a007ecc <__aeabi_dcmpeq>
1a0055a2:	2800      	cmp	r0, #0
1a0055a4:	f040 81ea 	bne.w	1a00597c <_dtoa_r+0x8ac>
1a0055a8:	f8cd a000 	str.w	sl, [sp]
1a0055ac:	f8cd 901c 	str.w	r9, [sp, #28]
1a0055b0:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0055b4:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
1a0055b8:	e017      	b.n	1a0055ea <_dtoa_r+0x51a>
1a0055ba:	bf00      	nop
1a0055bc:	1a008598 	.word	0x1a008598
1a0055c0:	1a008570 	.word	0x1a008570
1a0055c4:	3ff00000 	.word	0x3ff00000
1a0055c8:	401c0000 	.word	0x401c0000
1a0055cc:	3fe00000 	.word	0x3fe00000
1a0055d0:	40240000 	.word	0x40240000
1a0055d4:	f7fd fb02 	bl	1a002bdc <__aeabi_dmul>
1a0055d8:	2200      	movs	r2, #0
1a0055da:	2300      	movs	r3, #0
1a0055dc:	4606      	mov	r6, r0
1a0055de:	460f      	mov	r7, r1
1a0055e0:	f002 fc74 	bl	1a007ecc <__aeabi_dcmpeq>
1a0055e4:	2800      	cmp	r0, #0
1a0055e6:	f040 833d 	bne.w	1a005c64 <_dtoa_r+0xb94>
1a0055ea:	464a      	mov	r2, r9
1a0055ec:	4653      	mov	r3, sl
1a0055ee:	4630      	mov	r0, r6
1a0055f0:	4639      	mov	r1, r7
1a0055f2:	f7fd fc1d 	bl	1a002e30 <__aeabi_ddiv>
1a0055f6:	f002 fcb1 	bl	1a007f5c <__aeabi_d2iz>
1a0055fa:	4605      	mov	r5, r0
1a0055fc:	f7fd f904 	bl	1a002808 <__aeabi_i2d>
1a005600:	464a      	mov	r2, r9
1a005602:	4653      	mov	r3, sl
1a005604:	f7fd faea 	bl	1a002bdc <__aeabi_dmul>
1a005608:	4602      	mov	r2, r0
1a00560a:	460b      	mov	r3, r1
1a00560c:	4630      	mov	r0, r6
1a00560e:	4639      	mov	r1, r7
1a005610:	f7fc ffac 	bl	1a00256c <__aeabi_dsub>
1a005614:	f105 0c30 	add.w	ip, r5, #48	; 0x30
1a005618:	f804 cb01 	strb.w	ip, [r4], #1
1a00561c:	eba4 0c0b 	sub.w	ip, r4, fp
1a005620:	45e0      	cmp	r8, ip
1a005622:	4606      	mov	r6, r0
1a005624:	460f      	mov	r7, r1
1a005626:	f04f 0200 	mov.w	r2, #0
1a00562a:	4bc1      	ldr	r3, [pc, #772]	; (1a005930 <_dtoa_r+0x860>)
1a00562c:	d1d2      	bne.n	1a0055d4 <_dtoa_r+0x504>
1a00562e:	f8dd a000 	ldr.w	sl, [sp]
1a005632:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a005636:	4632      	mov	r2, r6
1a005638:	463b      	mov	r3, r7
1a00563a:	4630      	mov	r0, r6
1a00563c:	4639      	mov	r1, r7
1a00563e:	f7fc ff97 	bl	1a002570 <__adddf3>
1a005642:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a005646:	4606      	mov	r6, r0
1a005648:	460f      	mov	r7, r1
1a00564a:	f002 fc67 	bl	1a007f1c <__aeabi_dcmpgt>
1a00564e:	b958      	cbnz	r0, 1a005668 <_dtoa_r+0x598>
1a005650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a005654:	4630      	mov	r0, r6
1a005656:	4639      	mov	r1, r7
1a005658:	f002 fc38 	bl	1a007ecc <__aeabi_dcmpeq>
1a00565c:	2800      	cmp	r0, #0
1a00565e:	f000 818d 	beq.w	1a00597c <_dtoa_r+0x8ac>
1a005662:	07e9      	lsls	r1, r5, #31
1a005664:	f140 818a 	bpl.w	1a00597c <_dtoa_r+0x8ac>
1a005668:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a00566c:	e005      	b.n	1a00567a <_dtoa_r+0x5aa>
1a00566e:	459b      	cmp	fp, r3
1a005670:	f000 8373 	beq.w	1a005d5a <_dtoa_r+0xc8a>
1a005674:	f813 5c01 	ldrb.w	r5, [r3, #-1]
1a005678:	461c      	mov	r4, r3
1a00567a:	2d39      	cmp	r5, #57	; 0x39
1a00567c:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
1a005680:	d0f5      	beq.n	1a00566e <_dtoa_r+0x59e>
1a005682:	3501      	adds	r5, #1
1a005684:	701d      	strb	r5, [r3, #0]
1a005686:	e179      	b.n	1a00597c <_dtoa_r+0x8ac>
1a005688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00568a:	2a00      	cmp	r2, #0
1a00568c:	d03b      	beq.n	1a005706 <_dtoa_r+0x636>
1a00568e:	9a02      	ldr	r2, [sp, #8]
1a005690:	2a01      	cmp	r2, #1
1a005692:	f340 820b 	ble.w	1a005aac <_dtoa_r+0x9dc>
1a005696:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005698:	1e5f      	subs	r7, r3, #1
1a00569a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00569c:	42bb      	cmp	r3, r7
1a00569e:	f2c0 82e6 	blt.w	1a005c6e <_dtoa_r+0xb9e>
1a0056a2:	1bdf      	subs	r7, r3, r7
1a0056a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0056a6:	2b00      	cmp	r3, #0
1a0056a8:	f2c0 830b 	blt.w	1a005cc2 <_dtoa_r+0xbf2>
1a0056ac:	9a08      	ldr	r2, [sp, #32]
1a0056ae:	4614      	mov	r4, r2
1a0056b0:	441a      	add	r2, r3
1a0056b2:	4498      	add	r8, r3
1a0056b4:	9208      	str	r2, [sp, #32]
1a0056b6:	2101      	movs	r1, #1
1a0056b8:	4648      	mov	r0, r9
1a0056ba:	f001 fcf9 	bl	1a0070b0 <__i2b>
1a0056be:	4605      	mov	r5, r0
1a0056c0:	e024      	b.n	1a00570c <_dtoa_r+0x63c>
1a0056c2:	2301      	movs	r3, #1
1a0056c4:	930d      	str	r3, [sp, #52]	; 0x34
1a0056c6:	e5af      	b.n	1a005228 <_dtoa_r+0x158>
1a0056c8:	9a08      	ldr	r2, [sp, #32]
1a0056ca:	9b06      	ldr	r3, [sp, #24]
1a0056cc:	1ad2      	subs	r2, r2, r3
1a0056ce:	425b      	negs	r3, r3
1a0056d0:	930b      	str	r3, [sp, #44]	; 0x2c
1a0056d2:	2300      	movs	r3, #0
1a0056d4:	9208      	str	r2, [sp, #32]
1a0056d6:	930c      	str	r3, [sp, #48]	; 0x30
1a0056d8:	e5b5      	b.n	1a005246 <_dtoa_r+0x176>
1a0056da:	f1c4 0301 	rsb	r3, r4, #1
1a0056de:	9308      	str	r3, [sp, #32]
1a0056e0:	f04f 0800 	mov.w	r8, #0
1a0056e4:	e5a7      	b.n	1a005236 <_dtoa_r+0x166>
1a0056e6:	f8dd 8018 	ldr.w	r8, [sp, #24]
1a0056ea:	4640      	mov	r0, r8
1a0056ec:	f7fd f88c 	bl	1a002808 <__aeabi_i2d>
1a0056f0:	4632      	mov	r2, r6
1a0056f2:	463b      	mov	r3, r7
1a0056f4:	f002 fbea 	bl	1a007ecc <__aeabi_dcmpeq>
1a0056f8:	2800      	cmp	r0, #0
1a0056fa:	f47f ad81 	bne.w	1a005200 <_dtoa_r+0x130>
1a0056fe:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a005702:	9306      	str	r3, [sp, #24]
1a005704:	e57c      	b.n	1a005200 <_dtoa_r+0x130>
1a005706:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1a005708:	9c08      	ldr	r4, [sp, #32]
1a00570a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a00570c:	2c00      	cmp	r4, #0
1a00570e:	dd0c      	ble.n	1a00572a <_dtoa_r+0x65a>
1a005710:	f1b8 0f00 	cmp.w	r8, #0
1a005714:	dd09      	ble.n	1a00572a <_dtoa_r+0x65a>
1a005716:	4544      	cmp	r4, r8
1a005718:	9a08      	ldr	r2, [sp, #32]
1a00571a:	4623      	mov	r3, r4
1a00571c:	bfa8      	it	ge
1a00571e:	4643      	movge	r3, r8
1a005720:	1ad2      	subs	r2, r2, r3
1a005722:	9208      	str	r2, [sp, #32]
1a005724:	1ae4      	subs	r4, r4, r3
1a005726:	eba8 0803 	sub.w	r8, r8, r3
1a00572a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a00572c:	b16b      	cbz	r3, 1a00574a <_dtoa_r+0x67a>
1a00572e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a005730:	2a00      	cmp	r2, #0
1a005732:	f000 8290 	beq.w	1a005c56 <_dtoa_r+0xb86>
1a005736:	1bde      	subs	r6, r3, r7
1a005738:	2f00      	cmp	r7, #0
1a00573a:	f040 819b 	bne.w	1a005a74 <_dtoa_r+0x9a4>
1a00573e:	4651      	mov	r1, sl
1a005740:	4632      	mov	r2, r6
1a005742:	4648      	mov	r0, r9
1a005744:	f001 fd64 	bl	1a007210 <__pow5mult>
1a005748:	4682      	mov	sl, r0
1a00574a:	2101      	movs	r1, #1
1a00574c:	4648      	mov	r0, r9
1a00574e:	f001 fcaf 	bl	1a0070b0 <__i2b>
1a005752:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005754:	4606      	mov	r6, r0
1a005756:	2a00      	cmp	r2, #0
1a005758:	f040 8125 	bne.w	1a0059a6 <_dtoa_r+0x8d6>
1a00575c:	9b02      	ldr	r3, [sp, #8]
1a00575e:	2b01      	cmp	r3, #1
1a005760:	f340 816c 	ble.w	1a005a3c <_dtoa_r+0x96c>
1a005764:	2001      	movs	r0, #1
1a005766:	4440      	add	r0, r8
1a005768:	f010 001f 	ands.w	r0, r0, #31
1a00576c:	f000 8119 	beq.w	1a0059a2 <_dtoa_r+0x8d2>
1a005770:	f1c0 0320 	rsb	r3, r0, #32
1a005774:	2b04      	cmp	r3, #4
1a005776:	f340 83ac 	ble.w	1a005ed2 <_dtoa_r+0xe02>
1a00577a:	f1c0 001c 	rsb	r0, r0, #28
1a00577e:	9b08      	ldr	r3, [sp, #32]
1a005780:	4403      	add	r3, r0
1a005782:	9308      	str	r3, [sp, #32]
1a005784:	4404      	add	r4, r0
1a005786:	4480      	add	r8, r0
1a005788:	9b08      	ldr	r3, [sp, #32]
1a00578a:	2b00      	cmp	r3, #0
1a00578c:	dd05      	ble.n	1a00579a <_dtoa_r+0x6ca>
1a00578e:	4651      	mov	r1, sl
1a005790:	461a      	mov	r2, r3
1a005792:	4648      	mov	r0, r9
1a005794:	f001 fd8c 	bl	1a0072b0 <__lshift>
1a005798:	4682      	mov	sl, r0
1a00579a:	f1b8 0f00 	cmp.w	r8, #0
1a00579e:	dd05      	ble.n	1a0057ac <_dtoa_r+0x6dc>
1a0057a0:	4631      	mov	r1, r6
1a0057a2:	4642      	mov	r2, r8
1a0057a4:	4648      	mov	r0, r9
1a0057a6:	f001 fd83 	bl	1a0072b0 <__lshift>
1a0057aa:	4606      	mov	r6, r0
1a0057ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0057ae:	2b00      	cmp	r3, #0
1a0057b0:	d177      	bne.n	1a0058a2 <_dtoa_r+0x7d2>
1a0057b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0057b4:	2b00      	cmp	r3, #0
1a0057b6:	f340 8209 	ble.w	1a005bcc <_dtoa_r+0xafc>
1a0057ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0057bc:	2b00      	cmp	r3, #0
1a0057be:	f000 8089 	beq.w	1a0058d4 <_dtoa_r+0x804>
1a0057c2:	2c00      	cmp	r4, #0
1a0057c4:	f300 816b 	bgt.w	1a005a9e <_dtoa_r+0x9ce>
1a0057c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0057ca:	2b00      	cmp	r3, #0
1a0057cc:	f040 81cd 	bne.w	1a005b6a <_dtoa_r+0xa9a>
1a0057d0:	46a8      	mov	r8, r5
1a0057d2:	9a00      	ldr	r2, [sp, #0]
1a0057d4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
1a0057d8:	f002 0201 	and.w	r2, r2, #1
1a0057dc:	920a      	str	r2, [sp, #40]	; 0x28
1a0057de:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0057e0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
1a0057e4:	441a      	add	r2, r3
1a0057e6:	465f      	mov	r7, fp
1a0057e8:	9209      	str	r2, [sp, #36]	; 0x24
1a0057ea:	46b3      	mov	fp, r6
1a0057ec:	4659      	mov	r1, fp
1a0057ee:	4650      	mov	r0, sl
1a0057f0:	f7ff fbdc 	bl	1a004fac <quorem>
1a0057f4:	4629      	mov	r1, r5
1a0057f6:	4604      	mov	r4, r0
1a0057f8:	4650      	mov	r0, sl
1a0057fa:	f001 fdaf 	bl	1a00735c <__mcmp>
1a0057fe:	4659      	mov	r1, fp
1a005800:	4606      	mov	r6, r0
1a005802:	4642      	mov	r2, r8
1a005804:	4648      	mov	r0, r9
1a005806:	f001 fdc5 	bl	1a007394 <__mdiff>
1a00580a:	f104 0330 	add.w	r3, r4, #48	; 0x30
1a00580e:	9300      	str	r3, [sp, #0]
1a005810:	68c3      	ldr	r3, [r0, #12]
1a005812:	4601      	mov	r1, r0
1a005814:	2b00      	cmp	r3, #0
1a005816:	f040 81d4 	bne.w	1a005bc2 <_dtoa_r+0xaf2>
1a00581a:	9008      	str	r0, [sp, #32]
1a00581c:	4650      	mov	r0, sl
1a00581e:	f001 fd9d 	bl	1a00735c <__mcmp>
1a005822:	9a08      	ldr	r2, [sp, #32]
1a005824:	9007      	str	r0, [sp, #28]
1a005826:	4611      	mov	r1, r2
1a005828:	4648      	mov	r0, r9
1a00582a:	f001 fba7 	bl	1a006f7c <_Bfree>
1a00582e:	9b07      	ldr	r3, [sp, #28]
1a005830:	b933      	cbnz	r3, 1a005840 <_dtoa_r+0x770>
1a005832:	9a02      	ldr	r2, [sp, #8]
1a005834:	b922      	cbnz	r2, 1a005840 <_dtoa_r+0x770>
1a005836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a005838:	2b00      	cmp	r3, #0
1a00583a:	f000 8319 	beq.w	1a005e70 <_dtoa_r+0xda0>
1a00583e:	9b02      	ldr	r3, [sp, #8]
1a005840:	2e00      	cmp	r6, #0
1a005842:	f2c0 821c 	blt.w	1a005c7e <_dtoa_r+0xbae>
1a005846:	d105      	bne.n	1a005854 <_dtoa_r+0x784>
1a005848:	9a02      	ldr	r2, [sp, #8]
1a00584a:	b91a      	cbnz	r2, 1a005854 <_dtoa_r+0x784>
1a00584c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00584e:	2a00      	cmp	r2, #0
1a005850:	f000 8215 	beq.w	1a005c7e <_dtoa_r+0xbae>
1a005854:	2b00      	cmp	r3, #0
1a005856:	f107 0401 	add.w	r4, r7, #1
1a00585a:	f300 8225 	bgt.w	1a005ca8 <_dtoa_r+0xbd8>
1a00585e:	9b00      	ldr	r3, [sp, #0]
1a005860:	703b      	strb	r3, [r7, #0]
1a005862:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005864:	42bb      	cmp	r3, r7
1a005866:	f000 8230 	beq.w	1a005cca <_dtoa_r+0xbfa>
1a00586a:	4651      	mov	r1, sl
1a00586c:	2300      	movs	r3, #0
1a00586e:	220a      	movs	r2, #10
1a005870:	4648      	mov	r0, r9
1a005872:	f001 fb8d 	bl	1a006f90 <__multadd>
1a005876:	4545      	cmp	r5, r8
1a005878:	4682      	mov	sl, r0
1a00587a:	4629      	mov	r1, r5
1a00587c:	f04f 0300 	mov.w	r3, #0
1a005880:	f04f 020a 	mov.w	r2, #10
1a005884:	4648      	mov	r0, r9
1a005886:	f000 8196 	beq.w	1a005bb6 <_dtoa_r+0xae6>
1a00588a:	f001 fb81 	bl	1a006f90 <__multadd>
1a00588e:	4641      	mov	r1, r8
1a005890:	4605      	mov	r5, r0
1a005892:	2300      	movs	r3, #0
1a005894:	220a      	movs	r2, #10
1a005896:	4648      	mov	r0, r9
1a005898:	f001 fb7a 	bl	1a006f90 <__multadd>
1a00589c:	4627      	mov	r7, r4
1a00589e:	4680      	mov	r8, r0
1a0058a0:	e7a4      	b.n	1a0057ec <_dtoa_r+0x71c>
1a0058a2:	4631      	mov	r1, r6
1a0058a4:	4650      	mov	r0, sl
1a0058a6:	f001 fd59 	bl	1a00735c <__mcmp>
1a0058aa:	2800      	cmp	r0, #0
1a0058ac:	da81      	bge.n	1a0057b2 <_dtoa_r+0x6e2>
1a0058ae:	9f06      	ldr	r7, [sp, #24]
1a0058b0:	4651      	mov	r1, sl
1a0058b2:	2300      	movs	r3, #0
1a0058b4:	220a      	movs	r2, #10
1a0058b6:	4648      	mov	r0, r9
1a0058b8:	3f01      	subs	r7, #1
1a0058ba:	9706      	str	r7, [sp, #24]
1a0058bc:	f001 fb68 	bl	1a006f90 <__multadd>
1a0058c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0058c2:	4682      	mov	sl, r0
1a0058c4:	2b00      	cmp	r3, #0
1a0058c6:	f040 82eb 	bne.w	1a005ea0 <_dtoa_r+0xdd0>
1a0058ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0058cc:	2b00      	cmp	r3, #0
1a0058ce:	f340 82f3 	ble.w	1a005eb8 <_dtoa_r+0xde8>
1a0058d2:	9309      	str	r3, [sp, #36]	; 0x24
1a0058d4:	465c      	mov	r4, fp
1a0058d6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a0058da:	e002      	b.n	1a0058e2 <_dtoa_r+0x812>
1a0058dc:	f001 fb58 	bl	1a006f90 <__multadd>
1a0058e0:	4682      	mov	sl, r0
1a0058e2:	4631      	mov	r1, r6
1a0058e4:	4650      	mov	r0, sl
1a0058e6:	f7ff fb61 	bl	1a004fac <quorem>
1a0058ea:	f100 0730 	add.w	r7, r0, #48	; 0x30
1a0058ee:	f804 7b01 	strb.w	r7, [r4], #1
1a0058f2:	eba4 030b 	sub.w	r3, r4, fp
1a0058f6:	4598      	cmp	r8, r3
1a0058f8:	f04f 020a 	mov.w	r2, #10
1a0058fc:	f04f 0300 	mov.w	r3, #0
1a005900:	4651      	mov	r1, sl
1a005902:	4648      	mov	r0, r9
1a005904:	dcea      	bgt.n	1a0058dc <_dtoa_r+0x80c>
1a005906:	2300      	movs	r3, #0
1a005908:	9700      	str	r7, [sp, #0]
1a00590a:	9302      	str	r3, [sp, #8]
1a00590c:	4651      	mov	r1, sl
1a00590e:	2201      	movs	r2, #1
1a005910:	4648      	mov	r0, r9
1a005912:	f001 fccd 	bl	1a0072b0 <__lshift>
1a005916:	4631      	mov	r1, r6
1a005918:	4682      	mov	sl, r0
1a00591a:	f001 fd1f 	bl	1a00735c <__mcmp>
1a00591e:	2800      	cmp	r0, #0
1a005920:	f814 2c01 	ldrb.w	r2, [r4, #-1]
1a005924:	dc14      	bgt.n	1a005950 <_dtoa_r+0x880>
1a005926:	d108      	bne.n	1a00593a <_dtoa_r+0x86a>
1a005928:	9b00      	ldr	r3, [sp, #0]
1a00592a:	07db      	lsls	r3, r3, #31
1a00592c:	d410      	bmi.n	1a005950 <_dtoa_r+0x880>
1a00592e:	e004      	b.n	1a00593a <_dtoa_r+0x86a>
1a005930:	40240000 	.word	0x40240000
1a005934:	f814 2c02 	ldrb.w	r2, [r4, #-2]
1a005938:	461c      	mov	r4, r3
1a00593a:	2a30      	cmp	r2, #48	; 0x30
1a00593c:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
1a005940:	d0f8      	beq.n	1a005934 <_dtoa_r+0x864>
1a005942:	e00b      	b.n	1a00595c <_dtoa_r+0x88c>
1a005944:	459b      	cmp	fp, r3
1a005946:	f000 814e 	beq.w	1a005be6 <_dtoa_r+0xb16>
1a00594a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
1a00594e:	461c      	mov	r4, r3
1a005950:	2a39      	cmp	r2, #57	; 0x39
1a005952:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
1a005956:	d0f5      	beq.n	1a005944 <_dtoa_r+0x874>
1a005958:	3201      	adds	r2, #1
1a00595a:	701a      	strb	r2, [r3, #0]
1a00595c:	4631      	mov	r1, r6
1a00595e:	4648      	mov	r0, r9
1a005960:	f001 fb0c 	bl	1a006f7c <_Bfree>
1a005964:	b155      	cbz	r5, 1a00597c <_dtoa_r+0x8ac>
1a005966:	9902      	ldr	r1, [sp, #8]
1a005968:	b121      	cbz	r1, 1a005974 <_dtoa_r+0x8a4>
1a00596a:	42a9      	cmp	r1, r5
1a00596c:	d002      	beq.n	1a005974 <_dtoa_r+0x8a4>
1a00596e:	4648      	mov	r0, r9
1a005970:	f001 fb04 	bl	1a006f7c <_Bfree>
1a005974:	4629      	mov	r1, r5
1a005976:	4648      	mov	r0, r9
1a005978:	f001 fb00 	bl	1a006f7c <_Bfree>
1a00597c:	4651      	mov	r1, sl
1a00597e:	4648      	mov	r0, r9
1a005980:	f001 fafc 	bl	1a006f7c <_Bfree>
1a005984:	2200      	movs	r2, #0
1a005986:	9b06      	ldr	r3, [sp, #24]
1a005988:	7022      	strb	r2, [r4, #0]
1a00598a:	9a05      	ldr	r2, [sp, #20]
1a00598c:	3301      	adds	r3, #1
1a00598e:	6013      	str	r3, [r2, #0]
1a005990:	9b25      	ldr	r3, [sp, #148]	; 0x94
1a005992:	2b00      	cmp	r3, #0
1a005994:	f43f abdb 	beq.w	1a00514e <_dtoa_r+0x7e>
1a005998:	4658      	mov	r0, fp
1a00599a:	601c      	str	r4, [r3, #0]
1a00599c:	b01b      	add	sp, #108	; 0x6c
1a00599e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0059a2:	201c      	movs	r0, #28
1a0059a4:	e6eb      	b.n	1a00577e <_dtoa_r+0x6ae>
1a0059a6:	4601      	mov	r1, r0
1a0059a8:	4648      	mov	r0, r9
1a0059aa:	f001 fc31 	bl	1a007210 <__pow5mult>
1a0059ae:	9b02      	ldr	r3, [sp, #8]
1a0059b0:	2b01      	cmp	r3, #1
1a0059b2:	4606      	mov	r6, r0
1a0059b4:	f340 80d4 	ble.w	1a005b60 <_dtoa_r+0xa90>
1a0059b8:	2300      	movs	r3, #0
1a0059ba:	930c      	str	r3, [sp, #48]	; 0x30
1a0059bc:	6933      	ldr	r3, [r6, #16]
1a0059be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1a0059c2:	6918      	ldr	r0, [r3, #16]
1a0059c4:	f001 fb24 	bl	1a007010 <__hi0bits>
1a0059c8:	f1c0 0020 	rsb	r0, r0, #32
1a0059cc:	e6cb      	b.n	1a005766 <_dtoa_r+0x696>
1a0059ce:	900d      	str	r0, [sp, #52]	; 0x34
1a0059d0:	e42a      	b.n	1a005228 <_dtoa_r+0x158>
1a0059d2:	2501      	movs	r5, #1
1a0059d4:	e440      	b.n	1a005258 <_dtoa_r+0x188>
1a0059d6:	f1c3 0820 	rsb	r8, r3, #32
1a0059da:	9b00      	ldr	r3, [sp, #0]
1a0059dc:	fa03 f008 	lsl.w	r0, r3, r8
1a0059e0:	f7ff bbd8 	b.w	1a005194 <_dtoa_r+0xc4>
1a0059e4:	2300      	movs	r3, #0
1a0059e6:	930a      	str	r3, [sp, #40]	; 0x28
1a0059e8:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
1a0059ec:	4413      	add	r3, r2
1a0059ee:	930e      	str	r3, [sp, #56]	; 0x38
1a0059f0:	3301      	adds	r3, #1
1a0059f2:	2b01      	cmp	r3, #1
1a0059f4:	461e      	mov	r6, r3
1a0059f6:	9309      	str	r3, [sp, #36]	; 0x24
1a0059f8:	bfb8      	it	lt
1a0059fa:	2601      	movlt	r6, #1
1a0059fc:	2100      	movs	r1, #0
1a0059fe:	2e17      	cmp	r6, #23
1a005a00:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
1a005a04:	9c09      	ldr	r4, [sp, #36]	; 0x24
1a005a06:	f77f ac89 	ble.w	1a00531c <_dtoa_r+0x24c>
1a005a0a:	2201      	movs	r2, #1
1a005a0c:	2304      	movs	r3, #4
1a005a0e:	005b      	lsls	r3, r3, #1
1a005a10:	f103 0014 	add.w	r0, r3, #20
1a005a14:	42b0      	cmp	r0, r6
1a005a16:	4611      	mov	r1, r2
1a005a18:	f102 0201 	add.w	r2, r2, #1
1a005a1c:	d9f7      	bls.n	1a005a0e <_dtoa_r+0x93e>
1a005a1e:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
1a005a22:	e47b      	b.n	1a00531c <_dtoa_r+0x24c>
1a005a24:	2300      	movs	r3, #0
1a005a26:	930a      	str	r3, [sp, #40]	; 0x28
1a005a28:	9e07      	ldr	r6, [sp, #28]
1a005a2a:	2e00      	cmp	r6, #0
1a005a2c:	f340 80e2 	ble.w	1a005bf4 <_dtoa_r+0xb24>
1a005a30:	960e      	str	r6, [sp, #56]	; 0x38
1a005a32:	9609      	str	r6, [sp, #36]	; 0x24
1a005a34:	e7e2      	b.n	1a0059fc <_dtoa_r+0x92c>
1a005a36:	2301      	movs	r3, #1
1a005a38:	930a      	str	r3, [sp, #40]	; 0x28
1a005a3a:	e7f5      	b.n	1a005a28 <_dtoa_r+0x958>
1a005a3c:	9b00      	ldr	r3, [sp, #0]
1a005a3e:	2b00      	cmp	r3, #0
1a005a40:	f47f ae90 	bne.w	1a005764 <_dtoa_r+0x694>
1a005a44:	e9dd 1200 	ldrd	r1, r2, [sp]
1a005a48:	f3c2 0313 	ubfx	r3, r2, #0, #20
1a005a4c:	2b00      	cmp	r3, #0
1a005a4e:	f040 8192 	bne.w	1a005d76 <_dtoa_r+0xca6>
1a005a52:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
1a005a56:	0d1b      	lsrs	r3, r3, #20
1a005a58:	051b      	lsls	r3, r3, #20
1a005a5a:	b12b      	cbz	r3, 1a005a68 <_dtoa_r+0x998>
1a005a5c:	9b08      	ldr	r3, [sp, #32]
1a005a5e:	3301      	adds	r3, #1
1a005a60:	9308      	str	r3, [sp, #32]
1a005a62:	f108 0801 	add.w	r8, r8, #1
1a005a66:	2301      	movs	r3, #1
1a005a68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005a6a:	930c      	str	r3, [sp, #48]	; 0x30
1a005a6c:	2a00      	cmp	r2, #0
1a005a6e:	f43f ae79 	beq.w	1a005764 <_dtoa_r+0x694>
1a005a72:	e7a3      	b.n	1a0059bc <_dtoa_r+0x8ec>
1a005a74:	463a      	mov	r2, r7
1a005a76:	4629      	mov	r1, r5
1a005a78:	4648      	mov	r0, r9
1a005a7a:	f001 fbc9 	bl	1a007210 <__pow5mult>
1a005a7e:	4652      	mov	r2, sl
1a005a80:	4601      	mov	r1, r0
1a005a82:	4605      	mov	r5, r0
1a005a84:	4648      	mov	r0, r9
1a005a86:	f001 fb1d 	bl	1a0070c4 <__multiply>
1a005a8a:	4651      	mov	r1, sl
1a005a8c:	4607      	mov	r7, r0
1a005a8e:	4648      	mov	r0, r9
1a005a90:	f001 fa74 	bl	1a006f7c <_Bfree>
1a005a94:	46ba      	mov	sl, r7
1a005a96:	2e00      	cmp	r6, #0
1a005a98:	f43f ae57 	beq.w	1a00574a <_dtoa_r+0x67a>
1a005a9c:	e64f      	b.n	1a00573e <_dtoa_r+0x66e>
1a005a9e:	4629      	mov	r1, r5
1a005aa0:	4622      	mov	r2, r4
1a005aa2:	4648      	mov	r0, r9
1a005aa4:	f001 fc04 	bl	1a0072b0 <__lshift>
1a005aa8:	4605      	mov	r5, r0
1a005aaa:	e68d      	b.n	1a0057c8 <_dtoa_r+0x6f8>
1a005aac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a005aae:	2a00      	cmp	r2, #0
1a005ab0:	f000 815d 	beq.w	1a005d6e <_dtoa_r+0xc9e>
1a005ab4:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a005ab8:	9a08      	ldr	r2, [sp, #32]
1a005aba:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
1a005abc:	4614      	mov	r4, r2
1a005abe:	441a      	add	r2, r3
1a005ac0:	4498      	add	r8, r3
1a005ac2:	9208      	str	r2, [sp, #32]
1a005ac4:	e5f7      	b.n	1a0056b6 <_dtoa_r+0x5e6>
1a005ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005ac8:	2b00      	cmp	r3, #0
1a005aca:	f73f ad3e 	bgt.w	1a00554a <_dtoa_r+0x47a>
1a005ace:	f040 80bc 	bne.w	1a005c4a <_dtoa_r+0xb7a>
1a005ad2:	ec51 0b17 	vmov	r0, r1, d7
1a005ad6:	2200      	movs	r2, #0
1a005ad8:	4bb2      	ldr	r3, [pc, #712]	; (1a005da4 <_dtoa_r+0xcd4>)
1a005ada:	f7fd f87f 	bl	1a002bdc <__aeabi_dmul>
1a005ade:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005ae2:	f002 fa11 	bl	1a007f08 <__aeabi_dcmpge>
1a005ae6:	9e09      	ldr	r6, [sp, #36]	; 0x24
1a005ae8:	4635      	mov	r5, r6
1a005aea:	2800      	cmp	r0, #0
1a005aec:	d176      	bne.n	1a005bdc <_dtoa_r+0xb0c>
1a005aee:	9a06      	ldr	r2, [sp, #24]
1a005af0:	2331      	movs	r3, #49	; 0x31
1a005af2:	3201      	adds	r2, #1
1a005af4:	9206      	str	r2, [sp, #24]
1a005af6:	f88b 3000 	strb.w	r3, [fp]
1a005afa:	f10b 0401 	add.w	r4, fp, #1
1a005afe:	4631      	mov	r1, r6
1a005b00:	4648      	mov	r0, r9
1a005b02:	f001 fa3b 	bl	1a006f7c <_Bfree>
1a005b06:	2d00      	cmp	r5, #0
1a005b08:	f47f af34 	bne.w	1a005974 <_dtoa_r+0x8a4>
1a005b0c:	e736      	b.n	1a00597c <_dtoa_r+0x8ac>
1a005b0e:	f000 8142 	beq.w	1a005d96 <_dtoa_r+0xcc6>
1a005b12:	9b06      	ldr	r3, [sp, #24]
1a005b14:	425c      	negs	r4, r3
1a005b16:	4ba4      	ldr	r3, [pc, #656]	; (1a005da8 <_dtoa_r+0xcd8>)
1a005b18:	f004 020f 	and.w	r2, r4, #15
1a005b1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a005b20:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005b24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a005b28:	f7fd f858 	bl	1a002bdc <__aeabi_dmul>
1a005b2c:	1124      	asrs	r4, r4, #4
1a005b2e:	e9cd 0100 	strd	r0, r1, [sp]
1a005b32:	f000 81c6 	beq.w	1a005ec2 <_dtoa_r+0xdf2>
1a005b36:	4d9d      	ldr	r5, [pc, #628]	; (1a005dac <_dtoa_r+0xcdc>)
1a005b38:	2300      	movs	r3, #0
1a005b3a:	2602      	movs	r6, #2
1a005b3c:	07e7      	lsls	r7, r4, #31
1a005b3e:	d505      	bpl.n	1a005b4c <_dtoa_r+0xa7c>
1a005b40:	e9d5 2300 	ldrd	r2, r3, [r5]
1a005b44:	f7fd f84a 	bl	1a002bdc <__aeabi_dmul>
1a005b48:	3601      	adds	r6, #1
1a005b4a:	2301      	movs	r3, #1
1a005b4c:	1064      	asrs	r4, r4, #1
1a005b4e:	f105 0508 	add.w	r5, r5, #8
1a005b52:	d1f3      	bne.n	1a005b3c <_dtoa_r+0xa6c>
1a005b54:	2b00      	cmp	r3, #0
1a005b56:	f43f ac27 	beq.w	1a0053a8 <_dtoa_r+0x2d8>
1a005b5a:	e9cd 0100 	strd	r0, r1, [sp]
1a005b5e:	e423      	b.n	1a0053a8 <_dtoa_r+0x2d8>
1a005b60:	9b00      	ldr	r3, [sp, #0]
1a005b62:	2b00      	cmp	r3, #0
1a005b64:	f43f af6e 	beq.w	1a005a44 <_dtoa_r+0x974>
1a005b68:	e726      	b.n	1a0059b8 <_dtoa_r+0x8e8>
1a005b6a:	6869      	ldr	r1, [r5, #4]
1a005b6c:	4648      	mov	r0, r9
1a005b6e:	f001 f9df 	bl	1a006f30 <_Balloc>
1a005b72:	692b      	ldr	r3, [r5, #16]
1a005b74:	3302      	adds	r3, #2
1a005b76:	009a      	lsls	r2, r3, #2
1a005b78:	4604      	mov	r4, r0
1a005b7a:	f105 010c 	add.w	r1, r5, #12
1a005b7e:	300c      	adds	r0, #12
1a005b80:	f7fd fa62 	bl	1a003048 <memcpy>
1a005b84:	4621      	mov	r1, r4
1a005b86:	2201      	movs	r2, #1
1a005b88:	4648      	mov	r0, r9
1a005b8a:	f001 fb91 	bl	1a0072b0 <__lshift>
1a005b8e:	4680      	mov	r8, r0
1a005b90:	e61f      	b.n	1a0057d2 <_dtoa_r+0x702>
1a005b92:	2400      	movs	r4, #0
1a005b94:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
1a005b98:	4621      	mov	r1, r4
1a005b9a:	4648      	mov	r0, r9
1a005b9c:	f001 f9c8 	bl	1a006f30 <_Balloc>
1a005ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a005ba4:	930e      	str	r3, [sp, #56]	; 0x38
1a005ba6:	9309      	str	r3, [sp, #36]	; 0x24
1a005ba8:	2301      	movs	r3, #1
1a005baa:	4683      	mov	fp, r0
1a005bac:	9407      	str	r4, [sp, #28]
1a005bae:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
1a005bb2:	930a      	str	r3, [sp, #40]	; 0x28
1a005bb4:	e4b6      	b.n	1a005524 <_dtoa_r+0x454>
1a005bb6:	f001 f9eb 	bl	1a006f90 <__multadd>
1a005bba:	4627      	mov	r7, r4
1a005bbc:	4605      	mov	r5, r0
1a005bbe:	4680      	mov	r8, r0
1a005bc0:	e614      	b.n	1a0057ec <_dtoa_r+0x71c>
1a005bc2:	4648      	mov	r0, r9
1a005bc4:	f001 f9da 	bl	1a006f7c <_Bfree>
1a005bc8:	2301      	movs	r3, #1
1a005bca:	e639      	b.n	1a005840 <_dtoa_r+0x770>
1a005bcc:	9b02      	ldr	r3, [sp, #8]
1a005bce:	2b02      	cmp	r3, #2
1a005bd0:	f77f adf3 	ble.w	1a0057ba <_dtoa_r+0x6ea>
1a005bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005bd6:	2b00      	cmp	r3, #0
1a005bd8:	f000 80cf 	beq.w	1a005d7a <_dtoa_r+0xcaa>
1a005bdc:	9b07      	ldr	r3, [sp, #28]
1a005bde:	43db      	mvns	r3, r3
1a005be0:	9306      	str	r3, [sp, #24]
1a005be2:	465c      	mov	r4, fp
1a005be4:	e78b      	b.n	1a005afe <_dtoa_r+0xa2e>
1a005be6:	9a06      	ldr	r2, [sp, #24]
1a005be8:	2331      	movs	r3, #49	; 0x31
1a005bea:	3201      	adds	r2, #1
1a005bec:	9206      	str	r2, [sp, #24]
1a005bee:	f88b 3000 	strb.w	r3, [fp]
1a005bf2:	e6b3      	b.n	1a00595c <_dtoa_r+0x88c>
1a005bf4:	2401      	movs	r4, #1
1a005bf6:	9409      	str	r4, [sp, #36]	; 0x24
1a005bf8:	9407      	str	r4, [sp, #28]
1a005bfa:	f7ff bb8b 	b.w	1a005314 <_dtoa_r+0x244>
1a005bfe:	4630      	mov	r0, r6
1a005c00:	f7fc fe02 	bl	1a002808 <__aeabi_i2d>
1a005c04:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005c08:	f7fc ffe8 	bl	1a002bdc <__aeabi_dmul>
1a005c0c:	2200      	movs	r2, #0
1a005c0e:	4b68      	ldr	r3, [pc, #416]	; (1a005db0 <_dtoa_r+0xce0>)
1a005c10:	f7fc fcae 	bl	1a002570 <__adddf3>
1a005c14:	4606      	mov	r6, r0
1a005c16:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a005c1a:	2200      	movs	r2, #0
1a005c1c:	4b61      	ldr	r3, [pc, #388]	; (1a005da4 <_dtoa_r+0xcd4>)
1a005c1e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005c22:	f7fc fca3 	bl	1a00256c <__aeabi_dsub>
1a005c26:	4632      	mov	r2, r6
1a005c28:	463b      	mov	r3, r7
1a005c2a:	4604      	mov	r4, r0
1a005c2c:	460d      	mov	r5, r1
1a005c2e:	f002 f975 	bl	1a007f1c <__aeabi_dcmpgt>
1a005c32:	2800      	cmp	r0, #0
1a005c34:	d14f      	bne.n	1a005cd6 <_dtoa_r+0xc06>
1a005c36:	4632      	mov	r2, r6
1a005c38:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
1a005c3c:	4620      	mov	r0, r4
1a005c3e:	4629      	mov	r1, r5
1a005c40:	f002 f94e 	bl	1a007ee0 <__aeabi_dcmplt>
1a005c44:	2800      	cmp	r0, #0
1a005c46:	f43f ac69 	beq.w	1a00551c <_dtoa_r+0x44c>
1a005c4a:	2600      	movs	r6, #0
1a005c4c:	4635      	mov	r5, r6
1a005c4e:	e7c5      	b.n	1a005bdc <_dtoa_r+0xb0c>
1a005c50:	2301      	movs	r3, #1
1a005c52:	930a      	str	r3, [sp, #40]	; 0x28
1a005c54:	e6c8      	b.n	1a0059e8 <_dtoa_r+0x918>
1a005c56:	4651      	mov	r1, sl
1a005c58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a005c5a:	4648      	mov	r0, r9
1a005c5c:	f001 fad8 	bl	1a007210 <__pow5mult>
1a005c60:	4682      	mov	sl, r0
1a005c62:	e572      	b.n	1a00574a <_dtoa_r+0x67a>
1a005c64:	f8dd a000 	ldr.w	sl, [sp]
1a005c68:	f8dd 901c 	ldr.w	r9, [sp, #28]
1a005c6c:	e686      	b.n	1a00597c <_dtoa_r+0x8ac>
1a005c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a005c70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a005c72:	1afb      	subs	r3, r7, r3
1a005c74:	441a      	add	r2, r3
1a005c76:	e9cd 720b 	strd	r7, r2, [sp, #44]	; 0x2c
1a005c7a:	2700      	movs	r7, #0
1a005c7c:	e512      	b.n	1a0056a4 <_dtoa_r+0x5d4>
1a005c7e:	2b00      	cmp	r3, #0
1a005c80:	9402      	str	r4, [sp, #8]
1a005c82:	465e      	mov	r6, fp
1a005c84:	f107 0401 	add.w	r4, r7, #1
1a005c88:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a005c8c:	f300 80ba 	bgt.w	1a005e04 <_dtoa_r+0xd34>
1a005c90:	9b00      	ldr	r3, [sp, #0]
1a005c92:	9502      	str	r5, [sp, #8]
1a005c94:	703b      	strb	r3, [r7, #0]
1a005c96:	4645      	mov	r5, r8
1a005c98:	e660      	b.n	1a00595c <_dtoa_r+0x88c>
1a005c9a:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a005c9e:	2602      	movs	r6, #2
1a005ca0:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
1a005ca4:	f7ff bb67 	b.w	1a005376 <_dtoa_r+0x2a6>
1a005ca8:	9b00      	ldr	r3, [sp, #0]
1a005caa:	2b39      	cmp	r3, #57	; 0x39
1a005cac:	465e      	mov	r6, fp
1a005cae:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a005cb2:	f000 80b9 	beq.w	1a005e28 <_dtoa_r+0xd58>
1a005cb6:	9b00      	ldr	r3, [sp, #0]
1a005cb8:	9502      	str	r5, [sp, #8]
1a005cba:	3301      	adds	r3, #1
1a005cbc:	703b      	strb	r3, [r7, #0]
1a005cbe:	4645      	mov	r5, r8
1a005cc0:	e64c      	b.n	1a00595c <_dtoa_r+0x88c>
1a005cc2:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
1a005cc6:	1a9c      	subs	r4, r3, r2
1a005cc8:	e4f5      	b.n	1a0056b6 <_dtoa_r+0x5e6>
1a005cca:	465e      	mov	r6, fp
1a005ccc:	9502      	str	r5, [sp, #8]
1a005cce:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a005cd2:	4645      	mov	r5, r8
1a005cd4:	e61a      	b.n	1a00590c <_dtoa_r+0x83c>
1a005cd6:	2600      	movs	r6, #0
1a005cd8:	4635      	mov	r5, r6
1a005cda:	e708      	b.n	1a005aee <_dtoa_r+0xa1e>
1a005cdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
1a005ce0:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005ce4:	f7fc ff7a 	bl	1a002bdc <__aeabi_dmul>
1a005ce8:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005cea:	f88b 5000 	strb.w	r5, [fp]
1a005cee:	2b01      	cmp	r3, #1
1a005cf0:	e9cd 0100 	strd	r0, r1, [sp]
1a005cf4:	d020      	beq.n	1a005d38 <_dtoa_r+0xc68>
1a005cf6:	9b12      	ldr	r3, [sp, #72]	; 0x48
1a005cf8:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
1a005cfc:	445b      	add	r3, fp
1a005cfe:	4698      	mov	r8, r3
1a005d00:	2200      	movs	r2, #0
1a005d02:	4b2c      	ldr	r3, [pc, #176]	; (1a005db4 <_dtoa_r+0xce4>)
1a005d04:	4630      	mov	r0, r6
1a005d06:	4639      	mov	r1, r7
1a005d08:	f7fc ff68 	bl	1a002bdc <__aeabi_dmul>
1a005d0c:	460f      	mov	r7, r1
1a005d0e:	4606      	mov	r6, r0
1a005d10:	f002 f924 	bl	1a007f5c <__aeabi_d2iz>
1a005d14:	4605      	mov	r5, r0
1a005d16:	f7fc fd77 	bl	1a002808 <__aeabi_i2d>
1a005d1a:	3530      	adds	r5, #48	; 0x30
1a005d1c:	4602      	mov	r2, r0
1a005d1e:	460b      	mov	r3, r1
1a005d20:	4630      	mov	r0, r6
1a005d22:	4639      	mov	r1, r7
1a005d24:	f7fc fc22 	bl	1a00256c <__aeabi_dsub>
1a005d28:	f804 5b01 	strb.w	r5, [r4], #1
1a005d2c:	4544      	cmp	r4, r8
1a005d2e:	4606      	mov	r6, r0
1a005d30:	460f      	mov	r7, r1
1a005d32:	d1e5      	bne.n	1a005d00 <_dtoa_r+0xc30>
1a005d34:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
1a005d38:	4b1f      	ldr	r3, [pc, #124]	; (1a005db8 <_dtoa_r+0xce8>)
1a005d3a:	2200      	movs	r2, #0
1a005d3c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005d40:	f7fc fc16 	bl	1a002570 <__adddf3>
1a005d44:	4632      	mov	r2, r6
1a005d46:	463b      	mov	r3, r7
1a005d48:	f002 f8ca 	bl	1a007ee0 <__aeabi_dcmplt>
1a005d4c:	2800      	cmp	r0, #0
1a005d4e:	d070      	beq.n	1a005e32 <_dtoa_r+0xd62>
1a005d50:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a005d52:	9306      	str	r3, [sp, #24]
1a005d54:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a005d58:	e48f      	b.n	1a00567a <_dtoa_r+0x5aa>
1a005d5a:	2330      	movs	r3, #48	; 0x30
1a005d5c:	f88b 3000 	strb.w	r3, [fp]
1a005d60:	9b06      	ldr	r3, [sp, #24]
1a005d62:	f814 5c01 	ldrb.w	r5, [r4, #-1]
1a005d66:	3301      	adds	r3, #1
1a005d68:	9306      	str	r3, [sp, #24]
1a005d6a:	465b      	mov	r3, fp
1a005d6c:	e489      	b.n	1a005682 <_dtoa_r+0x5b2>
1a005d6e:	9b18      	ldr	r3, [sp, #96]	; 0x60
1a005d70:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a005d74:	e6a0      	b.n	1a005ab8 <_dtoa_r+0x9e8>
1a005d76:	2300      	movs	r3, #0
1a005d78:	e676      	b.n	1a005a68 <_dtoa_r+0x998>
1a005d7a:	4631      	mov	r1, r6
1a005d7c:	2205      	movs	r2, #5
1a005d7e:	4648      	mov	r0, r9
1a005d80:	f001 f906 	bl	1a006f90 <__multadd>
1a005d84:	4601      	mov	r1, r0
1a005d86:	4606      	mov	r6, r0
1a005d88:	4650      	mov	r0, sl
1a005d8a:	f001 fae7 	bl	1a00735c <__mcmp>
1a005d8e:	2800      	cmp	r0, #0
1a005d90:	f73f aead 	bgt.w	1a005aee <_dtoa_r+0xa1e>
1a005d94:	e722      	b.n	1a005bdc <_dtoa_r+0xb0c>
1a005d96:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a005d9a:	2602      	movs	r6, #2
1a005d9c:	ed8d 7b00 	vstr	d7, [sp]
1a005da0:	f7ff bb02 	b.w	1a0053a8 <_dtoa_r+0x2d8>
1a005da4:	40140000 	.word	0x40140000
1a005da8:	1a008598 	.word	0x1a008598
1a005dac:	1a008570 	.word	0x1a008570
1a005db0:	401c0000 	.word	0x401c0000
1a005db4:	40240000 	.word	0x40240000
1a005db8:	3fe00000 	.word	0x3fe00000
1a005dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a005dbe:	2b00      	cmp	r3, #0
1a005dc0:	f43f af1d 	beq.w	1a005bfe <_dtoa_r+0xb2e>
1a005dc4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1a005dc6:	2c00      	cmp	r4, #0
1a005dc8:	f77f aba8 	ble.w	1a00551c <_dtoa_r+0x44c>
1a005dcc:	2200      	movs	r2, #0
1a005dce:	4b45      	ldr	r3, [pc, #276]	; (1a005ee4 <_dtoa_r+0xe14>)
1a005dd0:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005dd4:	f7fc ff02 	bl	1a002bdc <__aeabi_dmul>
1a005dd8:	e9cd 0100 	strd	r0, r1, [sp]
1a005ddc:	1c70      	adds	r0, r6, #1
1a005dde:	f7fc fd13 	bl	1a002808 <__aeabi_i2d>
1a005de2:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005de6:	f7fc fef9 	bl	1a002bdc <__aeabi_dmul>
1a005dea:	4b3f      	ldr	r3, [pc, #252]	; (1a005ee8 <_dtoa_r+0xe18>)
1a005dec:	2200      	movs	r2, #0
1a005dee:	f7fc fbbf 	bl	1a002570 <__adddf3>
1a005df2:	9b06      	ldr	r3, [sp, #24]
1a005df4:	9412      	str	r4, [sp, #72]	; 0x48
1a005df6:	3b01      	subs	r3, #1
1a005df8:	4606      	mov	r6, r0
1a005dfa:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a005dfe:	9316      	str	r3, [sp, #88]	; 0x58
1a005e00:	f7ff baf3 	b.w	1a0053ea <_dtoa_r+0x31a>
1a005e04:	4651      	mov	r1, sl
1a005e06:	2201      	movs	r2, #1
1a005e08:	4648      	mov	r0, r9
1a005e0a:	f001 fa51 	bl	1a0072b0 <__lshift>
1a005e0e:	4631      	mov	r1, r6
1a005e10:	4682      	mov	sl, r0
1a005e12:	f001 faa3 	bl	1a00735c <__mcmp>
1a005e16:	2800      	cmp	r0, #0
1a005e18:	dd3b      	ble.n	1a005e92 <_dtoa_r+0xdc2>
1a005e1a:	9b00      	ldr	r3, [sp, #0]
1a005e1c:	2b39      	cmp	r3, #57	; 0x39
1a005e1e:	d003      	beq.n	1a005e28 <_dtoa_r+0xd58>
1a005e20:	9b02      	ldr	r3, [sp, #8]
1a005e22:	3331      	adds	r3, #49	; 0x31
1a005e24:	9300      	str	r3, [sp, #0]
1a005e26:	e733      	b.n	1a005c90 <_dtoa_r+0xbc0>
1a005e28:	2239      	movs	r2, #57	; 0x39
1a005e2a:	9502      	str	r5, [sp, #8]
1a005e2c:	703a      	strb	r2, [r7, #0]
1a005e2e:	4645      	mov	r5, r8
1a005e30:	e58e      	b.n	1a005950 <_dtoa_r+0x880>
1a005e32:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005e36:	2000      	movs	r0, #0
1a005e38:	492c      	ldr	r1, [pc, #176]	; (1a005eec <_dtoa_r+0xe1c>)
1a005e3a:	f7fc fb97 	bl	1a00256c <__aeabi_dsub>
1a005e3e:	4632      	mov	r2, r6
1a005e40:	463b      	mov	r3, r7
1a005e42:	f002 f86b 	bl	1a007f1c <__aeabi_dcmpgt>
1a005e46:	b910      	cbnz	r0, 1a005e4e <_dtoa_r+0xd7e>
1a005e48:	f7ff bb68 	b.w	1a00551c <_dtoa_r+0x44c>
1a005e4c:	4614      	mov	r4, r2
1a005e4e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
1a005e52:	2b30      	cmp	r3, #48	; 0x30
1a005e54:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
1a005e58:	d0f8      	beq.n	1a005e4c <_dtoa_r+0xd7c>
1a005e5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a005e5c:	9306      	str	r3, [sp, #24]
1a005e5e:	e58d      	b.n	1a00597c <_dtoa_r+0x8ac>
1a005e60:	46d9      	mov	r9, fp
1a005e62:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
1a005e66:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
1a005e6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a005e6c:	9306      	str	r3, [sp, #24]
1a005e6e:	e404      	b.n	1a00567a <_dtoa_r+0x5aa>
1a005e70:	9b00      	ldr	r3, [sp, #0]
1a005e72:	2b39      	cmp	r3, #57	; 0x39
1a005e74:	4621      	mov	r1, r4
1a005e76:	4632      	mov	r2, r6
1a005e78:	f107 0401 	add.w	r4, r7, #1
1a005e7c:	465e      	mov	r6, fp
1a005e7e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
1a005e82:	d0d1      	beq.n	1a005e28 <_dtoa_r+0xd58>
1a005e84:	2a00      	cmp	r2, #0
1a005e86:	f77f af03 	ble.w	1a005c90 <_dtoa_r+0xbc0>
1a005e8a:	460b      	mov	r3, r1
1a005e8c:	3331      	adds	r3, #49	; 0x31
1a005e8e:	9300      	str	r3, [sp, #0]
1a005e90:	e6fe      	b.n	1a005c90 <_dtoa_r+0xbc0>
1a005e92:	f47f aefd 	bne.w	1a005c90 <_dtoa_r+0xbc0>
1a005e96:	9b00      	ldr	r3, [sp, #0]
1a005e98:	07da      	lsls	r2, r3, #31
1a005e9a:	f57f aef9 	bpl.w	1a005c90 <_dtoa_r+0xbc0>
1a005e9e:	e7bc      	b.n	1a005e1a <_dtoa_r+0xd4a>
1a005ea0:	4629      	mov	r1, r5
1a005ea2:	2300      	movs	r3, #0
1a005ea4:	220a      	movs	r2, #10
1a005ea6:	4648      	mov	r0, r9
1a005ea8:	f001 f872 	bl	1a006f90 <__multadd>
1a005eac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005eae:	2b00      	cmp	r3, #0
1a005eb0:	4605      	mov	r5, r0
1a005eb2:	dd09      	ble.n	1a005ec8 <_dtoa_r+0xdf8>
1a005eb4:	9309      	str	r3, [sp, #36]	; 0x24
1a005eb6:	e484      	b.n	1a0057c2 <_dtoa_r+0x6f2>
1a005eb8:	9b02      	ldr	r3, [sp, #8]
1a005eba:	2b02      	cmp	r3, #2
1a005ebc:	dc0e      	bgt.n	1a005edc <_dtoa_r+0xe0c>
1a005ebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005ec0:	e507      	b.n	1a0058d2 <_dtoa_r+0x802>
1a005ec2:	2602      	movs	r6, #2
1a005ec4:	f7ff ba70 	b.w	1a0053a8 <_dtoa_r+0x2d8>
1a005ec8:	9b02      	ldr	r3, [sp, #8]
1a005eca:	2b02      	cmp	r3, #2
1a005ecc:	dc06      	bgt.n	1a005edc <_dtoa_r+0xe0c>
1a005ece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005ed0:	e7f0      	b.n	1a005eb4 <_dtoa_r+0xde4>
1a005ed2:	f43f ac59 	beq.w	1a005788 <_dtoa_r+0x6b8>
1a005ed6:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a005eda:	e450      	b.n	1a00577e <_dtoa_r+0x6ae>
1a005edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005ede:	9309      	str	r3, [sp, #36]	; 0x24
1a005ee0:	e678      	b.n	1a005bd4 <_dtoa_r+0xb04>
1a005ee2:	bf00      	nop
1a005ee4:	40240000 	.word	0x40240000
1a005ee8:	401c0000 	.word	0x401c0000
1a005eec:	3fe00000 	.word	0x3fe00000

1a005ef0 <__sflush_r>:
1a005ef0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a005ef4:	b29a      	uxth	r2, r3
1a005ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a005efa:	460c      	mov	r4, r1
1a005efc:	0711      	lsls	r1, r2, #28
1a005efe:	4680      	mov	r8, r0
1a005f00:	d444      	bmi.n	1a005f8c <__sflush_r+0x9c>
1a005f02:	6862      	ldr	r2, [r4, #4]
1a005f04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a005f08:	2a00      	cmp	r2, #0
1a005f0a:	81a3      	strh	r3, [r4, #12]
1a005f0c:	dd59      	ble.n	1a005fc2 <__sflush_r+0xd2>
1a005f0e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a005f10:	2d00      	cmp	r5, #0
1a005f12:	d053      	beq.n	1a005fbc <__sflush_r+0xcc>
1a005f14:	2200      	movs	r2, #0
1a005f16:	b29b      	uxth	r3, r3
1a005f18:	f8d8 6000 	ldr.w	r6, [r8]
1a005f1c:	69e1      	ldr	r1, [r4, #28]
1a005f1e:	f8c8 2000 	str.w	r2, [r8]
1a005f22:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
1a005f26:	f040 8083 	bne.w	1a006030 <__sflush_r+0x140>
1a005f2a:	2301      	movs	r3, #1
1a005f2c:	4640      	mov	r0, r8
1a005f2e:	47a8      	blx	r5
1a005f30:	1c42      	adds	r2, r0, #1
1a005f32:	d04a      	beq.n	1a005fca <__sflush_r+0xda>
1a005f34:	89a3      	ldrh	r3, [r4, #12]
1a005f36:	6aa5      	ldr	r5, [r4, #40]	; 0x28
1a005f38:	69e1      	ldr	r1, [r4, #28]
1a005f3a:	075b      	lsls	r3, r3, #29
1a005f3c:	d505      	bpl.n	1a005f4a <__sflush_r+0x5a>
1a005f3e:	6862      	ldr	r2, [r4, #4]
1a005f40:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a005f42:	1a80      	subs	r0, r0, r2
1a005f44:	b10b      	cbz	r3, 1a005f4a <__sflush_r+0x5a>
1a005f46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a005f48:	1ac0      	subs	r0, r0, r3
1a005f4a:	4602      	mov	r2, r0
1a005f4c:	2300      	movs	r3, #0
1a005f4e:	4640      	mov	r0, r8
1a005f50:	47a8      	blx	r5
1a005f52:	1c47      	adds	r7, r0, #1
1a005f54:	d045      	beq.n	1a005fe2 <__sflush_r+0xf2>
1a005f56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a005f5a:	6922      	ldr	r2, [r4, #16]
1a005f5c:	6022      	str	r2, [r4, #0]
1a005f5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a005f62:	2200      	movs	r2, #0
1a005f64:	81a3      	strh	r3, [r4, #12]
1a005f66:	04db      	lsls	r3, r3, #19
1a005f68:	6062      	str	r2, [r4, #4]
1a005f6a:	d500      	bpl.n	1a005f6e <__sflush_r+0x7e>
1a005f6c:	6520      	str	r0, [r4, #80]	; 0x50
1a005f6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a005f70:	f8c8 6000 	str.w	r6, [r8]
1a005f74:	b311      	cbz	r1, 1a005fbc <__sflush_r+0xcc>
1a005f76:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a005f7a:	4299      	cmp	r1, r3
1a005f7c:	d002      	beq.n	1a005f84 <__sflush_r+0x94>
1a005f7e:	4640      	mov	r0, r8
1a005f80:	f000 f944 	bl	1a00620c <_free_r>
1a005f84:	2000      	movs	r0, #0
1a005f86:	6320      	str	r0, [r4, #48]	; 0x30
1a005f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005f8c:	6926      	ldr	r6, [r4, #16]
1a005f8e:	b1ae      	cbz	r6, 1a005fbc <__sflush_r+0xcc>
1a005f90:	6825      	ldr	r5, [r4, #0]
1a005f92:	6026      	str	r6, [r4, #0]
1a005f94:	0792      	lsls	r2, r2, #30
1a005f96:	bf0c      	ite	eq
1a005f98:	6963      	ldreq	r3, [r4, #20]
1a005f9a:	2300      	movne	r3, #0
1a005f9c:	1bad      	subs	r5, r5, r6
1a005f9e:	60a3      	str	r3, [r4, #8]
1a005fa0:	e00a      	b.n	1a005fb8 <__sflush_r+0xc8>
1a005fa2:	462b      	mov	r3, r5
1a005fa4:	4632      	mov	r2, r6
1a005fa6:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a005fa8:	69e1      	ldr	r1, [r4, #28]
1a005faa:	4640      	mov	r0, r8
1a005fac:	47b8      	blx	r7
1a005fae:	2800      	cmp	r0, #0
1a005fb0:	eba5 0500 	sub.w	r5, r5, r0
1a005fb4:	4406      	add	r6, r0
1a005fb6:	dd2b      	ble.n	1a006010 <__sflush_r+0x120>
1a005fb8:	2d00      	cmp	r5, #0
1a005fba:	dcf2      	bgt.n	1a005fa2 <__sflush_r+0xb2>
1a005fbc:	2000      	movs	r0, #0
1a005fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005fc2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a005fc4:	2a00      	cmp	r2, #0
1a005fc6:	dca2      	bgt.n	1a005f0e <__sflush_r+0x1e>
1a005fc8:	e7f8      	b.n	1a005fbc <__sflush_r+0xcc>
1a005fca:	f8d8 3000 	ldr.w	r3, [r8]
1a005fce:	2b00      	cmp	r3, #0
1a005fd0:	d0b0      	beq.n	1a005f34 <__sflush_r+0x44>
1a005fd2:	2b1d      	cmp	r3, #29
1a005fd4:	d001      	beq.n	1a005fda <__sflush_r+0xea>
1a005fd6:	2b16      	cmp	r3, #22
1a005fd8:	d12c      	bne.n	1a006034 <__sflush_r+0x144>
1a005fda:	f8c8 6000 	str.w	r6, [r8]
1a005fde:	2000      	movs	r0, #0
1a005fe0:	e7ed      	b.n	1a005fbe <__sflush_r+0xce>
1a005fe2:	f8d8 1000 	ldr.w	r1, [r8]
1a005fe6:	291d      	cmp	r1, #29
1a005fe8:	d81a      	bhi.n	1a006020 <__sflush_r+0x130>
1a005fea:	4b15      	ldr	r3, [pc, #84]	; (1a006040 <__sflush_r+0x150>)
1a005fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a005ff0:	40cb      	lsrs	r3, r1
1a005ff2:	43db      	mvns	r3, r3
1a005ff4:	f013 0301 	ands.w	r3, r3, #1
1a005ff8:	d114      	bne.n	1a006024 <__sflush_r+0x134>
1a005ffa:	6925      	ldr	r5, [r4, #16]
1a005ffc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
1a006000:	e9c4 5300 	strd	r5, r3, [r4]
1a006004:	04d5      	lsls	r5, r2, #19
1a006006:	81a2      	strh	r2, [r4, #12]
1a006008:	d5b1      	bpl.n	1a005f6e <__sflush_r+0x7e>
1a00600a:	2900      	cmp	r1, #0
1a00600c:	d1af      	bne.n	1a005f6e <__sflush_r+0x7e>
1a00600e:	e7ad      	b.n	1a005f6c <__sflush_r+0x7c>
1a006010:	89a3      	ldrh	r3, [r4, #12]
1a006012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a006016:	81a3      	strh	r3, [r4, #12]
1a006018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00601c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a006024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a006028:	81a2      	strh	r2, [r4, #12]
1a00602a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00602e:	e7c6      	b.n	1a005fbe <__sflush_r+0xce>
1a006030:	6d20      	ldr	r0, [r4, #80]	; 0x50
1a006032:	e782      	b.n	1a005f3a <__sflush_r+0x4a>
1a006034:	89a3      	ldrh	r3, [r4, #12]
1a006036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00603a:	81a3      	strh	r3, [r4, #12]
1a00603c:	e7bf      	b.n	1a005fbe <__sflush_r+0xce>
1a00603e:	bf00      	nop
1a006040:	20400001 	.word	0x20400001

1a006044 <_fflush_r>:
1a006044:	b538      	push	{r3, r4, r5, lr}
1a006046:	460d      	mov	r5, r1
1a006048:	4604      	mov	r4, r0
1a00604a:	b108      	cbz	r0, 1a006050 <_fflush_r+0xc>
1a00604c:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a00604e:	b1a3      	cbz	r3, 1a00607a <_fflush_r+0x36>
1a006050:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a006054:	b1b8      	cbz	r0, 1a006086 <_fflush_r+0x42>
1a006056:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a006058:	07db      	lsls	r3, r3, #31
1a00605a:	d401      	bmi.n	1a006060 <_fflush_r+0x1c>
1a00605c:	0581      	lsls	r1, r0, #22
1a00605e:	d51a      	bpl.n	1a006096 <_fflush_r+0x52>
1a006060:	4620      	mov	r0, r4
1a006062:	4629      	mov	r1, r5
1a006064:	f7ff ff44 	bl	1a005ef0 <__sflush_r>
1a006068:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a00606a:	07da      	lsls	r2, r3, #31
1a00606c:	4604      	mov	r4, r0
1a00606e:	d402      	bmi.n	1a006076 <_fflush_r+0x32>
1a006070:	89ab      	ldrh	r3, [r5, #12]
1a006072:	059b      	lsls	r3, r3, #22
1a006074:	d50a      	bpl.n	1a00608c <_fflush_r+0x48>
1a006076:	4620      	mov	r0, r4
1a006078:	bd38      	pop	{r3, r4, r5, pc}
1a00607a:	f000 f83f 	bl	1a0060fc <__sinit>
1a00607e:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
1a006082:	2800      	cmp	r0, #0
1a006084:	d1e7      	bne.n	1a006056 <_fflush_r+0x12>
1a006086:	4604      	mov	r4, r0
1a006088:	4620      	mov	r0, r4
1a00608a:	bd38      	pop	{r3, r4, r5, pc}
1a00608c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a00608e:	f000 fb6d 	bl	1a00676c <__retarget_lock_release_recursive>
1a006092:	4620      	mov	r0, r4
1a006094:	bd38      	pop	{r3, r4, r5, pc}
1a006096:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a006098:	f000 fb66 	bl	1a006768 <__retarget_lock_acquire_recursive>
1a00609c:	e7e0      	b.n	1a006060 <_fflush_r+0x1c>
1a00609e:	bf00      	nop

1a0060a0 <std>:
1a0060a0:	b510      	push	{r4, lr}
1a0060a2:	2300      	movs	r3, #0
1a0060a4:	4604      	mov	r4, r0
1a0060a6:	8181      	strh	r1, [r0, #12]
1a0060a8:	81c2      	strh	r2, [r0, #14]
1a0060aa:	e9c0 3300 	strd	r3, r3, [r0]
1a0060ae:	6083      	str	r3, [r0, #8]
1a0060b0:	6643      	str	r3, [r0, #100]	; 0x64
1a0060b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a0060b6:	6183      	str	r3, [r0, #24]
1a0060b8:	4619      	mov	r1, r3
1a0060ba:	2208      	movs	r2, #8
1a0060bc:	305c      	adds	r0, #92	; 0x5c
1a0060be:	f7fd f85d 	bl	1a00317c <memset>
1a0060c2:	4807      	ldr	r0, [pc, #28]	; (1a0060e0 <std+0x40>)
1a0060c4:	4907      	ldr	r1, [pc, #28]	; (1a0060e4 <std+0x44>)
1a0060c6:	4a08      	ldr	r2, [pc, #32]	; (1a0060e8 <std+0x48>)
1a0060c8:	4b08      	ldr	r3, [pc, #32]	; (1a0060ec <std+0x4c>)
1a0060ca:	62e3      	str	r3, [r4, #44]	; 0x2c
1a0060cc:	e9c4 4007 	strd	r4, r0, [r4, #28]
1a0060d0:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
1a0060d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a0060d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0060dc:	f000 bb40 	b.w	1a006760 <__retarget_lock_init_recursive>
1a0060e0:	1a007909 	.word	0x1a007909
1a0060e4:	1a00792d 	.word	0x1a00792d
1a0060e8:	1a007969 	.word	0x1a007969
1a0060ec:	1a007989 	.word	0x1a007989

1a0060f0 <_cleanup_r>:
1a0060f0:	4901      	ldr	r1, [pc, #4]	; (1a0060f8 <_cleanup_r+0x8>)
1a0060f2:	f000 bafd 	b.w	1a0066f0 <_fwalk_reent>
1a0060f6:	bf00      	nop
1a0060f8:	1a007b99 	.word	0x1a007b99

1a0060fc <__sinit>:
1a0060fc:	b510      	push	{r4, lr}
1a0060fe:	4604      	mov	r4, r0
1a006100:	4812      	ldr	r0, [pc, #72]	; (1a00614c <__sinit+0x50>)
1a006102:	f000 fb31 	bl	1a006768 <__retarget_lock_acquire_recursive>
1a006106:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a006108:	b9d2      	cbnz	r2, 1a006140 <__sinit+0x44>
1a00610a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
1a00610e:	4810      	ldr	r0, [pc, #64]	; (1a006150 <__sinit+0x54>)
1a006110:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
1a006114:	2103      	movs	r1, #3
1a006116:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
1a00611a:	63e0      	str	r0, [r4, #60]	; 0x3c
1a00611c:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
1a006120:	6860      	ldr	r0, [r4, #4]
1a006122:	2104      	movs	r1, #4
1a006124:	f7ff ffbc 	bl	1a0060a0 <std>
1a006128:	2201      	movs	r2, #1
1a00612a:	2109      	movs	r1, #9
1a00612c:	68a0      	ldr	r0, [r4, #8]
1a00612e:	f7ff ffb7 	bl	1a0060a0 <std>
1a006132:	2202      	movs	r2, #2
1a006134:	2112      	movs	r1, #18
1a006136:	68e0      	ldr	r0, [r4, #12]
1a006138:	f7ff ffb2 	bl	1a0060a0 <std>
1a00613c:	2301      	movs	r3, #1
1a00613e:	63a3      	str	r3, [r4, #56]	; 0x38
1a006140:	4802      	ldr	r0, [pc, #8]	; (1a00614c <__sinit+0x50>)
1a006142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a006146:	f000 bb11 	b.w	1a00676c <__retarget_lock_release_recursive>
1a00614a:	bf00      	nop
1a00614c:	10000b08 	.word	0x10000b08
1a006150:	1a0060f1 	.word	0x1a0060f1

1a006154 <__sfp_lock_acquire>:
1a006154:	4801      	ldr	r0, [pc, #4]	; (1a00615c <__sfp_lock_acquire+0x8>)
1a006156:	f000 bb07 	b.w	1a006768 <__retarget_lock_acquire_recursive>
1a00615a:	bf00      	nop
1a00615c:	10000b1c 	.word	0x10000b1c

1a006160 <__sfp_lock_release>:
1a006160:	4801      	ldr	r0, [pc, #4]	; (1a006168 <__sfp_lock_release+0x8>)
1a006162:	f000 bb03 	b.w	1a00676c <__retarget_lock_release_recursive>
1a006166:	bf00      	nop
1a006168:	10000b1c 	.word	0x10000b1c

1a00616c <_malloc_trim_r>:
1a00616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00616e:	4f24      	ldr	r7, [pc, #144]	; (1a006200 <_malloc_trim_r+0x94>)
1a006170:	460c      	mov	r4, r1
1a006172:	4606      	mov	r6, r0
1a006174:	f000 fed0 	bl	1a006f18 <__malloc_lock>
1a006178:	68bb      	ldr	r3, [r7, #8]
1a00617a:	685d      	ldr	r5, [r3, #4]
1a00617c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
1a006180:	310f      	adds	r1, #15
1a006182:	f025 0503 	bic.w	r5, r5, #3
1a006186:	4429      	add	r1, r5
1a006188:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a00618c:	f021 010f 	bic.w	r1, r1, #15
1a006190:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a006194:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a006198:	db07      	blt.n	1a0061aa <_malloc_trim_r+0x3e>
1a00619a:	2100      	movs	r1, #0
1a00619c:	4630      	mov	r0, r6
1a00619e:	f7fb fb0b 	bl	1a0017b8 <_sbrk_r>
1a0061a2:	68bb      	ldr	r3, [r7, #8]
1a0061a4:	442b      	add	r3, r5
1a0061a6:	4298      	cmp	r0, r3
1a0061a8:	d004      	beq.n	1a0061b4 <_malloc_trim_r+0x48>
1a0061aa:	4630      	mov	r0, r6
1a0061ac:	f000 feba 	bl	1a006f24 <__malloc_unlock>
1a0061b0:	2000      	movs	r0, #0
1a0061b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0061b4:	4261      	negs	r1, r4
1a0061b6:	4630      	mov	r0, r6
1a0061b8:	f7fb fafe 	bl	1a0017b8 <_sbrk_r>
1a0061bc:	3001      	adds	r0, #1
1a0061be:	d00d      	beq.n	1a0061dc <_malloc_trim_r+0x70>
1a0061c0:	4b10      	ldr	r3, [pc, #64]	; (1a006204 <_malloc_trim_r+0x98>)
1a0061c2:	68ba      	ldr	r2, [r7, #8]
1a0061c4:	6819      	ldr	r1, [r3, #0]
1a0061c6:	1b2d      	subs	r5, r5, r4
1a0061c8:	f045 0501 	orr.w	r5, r5, #1
1a0061cc:	4630      	mov	r0, r6
1a0061ce:	1b09      	subs	r1, r1, r4
1a0061d0:	6055      	str	r5, [r2, #4]
1a0061d2:	6019      	str	r1, [r3, #0]
1a0061d4:	f000 fea6 	bl	1a006f24 <__malloc_unlock>
1a0061d8:	2001      	movs	r0, #1
1a0061da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0061dc:	2100      	movs	r1, #0
1a0061de:	4630      	mov	r0, r6
1a0061e0:	f7fb faea 	bl	1a0017b8 <_sbrk_r>
1a0061e4:	68ba      	ldr	r2, [r7, #8]
1a0061e6:	1a83      	subs	r3, r0, r2
1a0061e8:	2b0f      	cmp	r3, #15
1a0061ea:	ddde      	ble.n	1a0061aa <_malloc_trim_r+0x3e>
1a0061ec:	4c06      	ldr	r4, [pc, #24]	; (1a006208 <_malloc_trim_r+0x9c>)
1a0061ee:	4905      	ldr	r1, [pc, #20]	; (1a006204 <_malloc_trim_r+0x98>)
1a0061f0:	6824      	ldr	r4, [r4, #0]
1a0061f2:	f043 0301 	orr.w	r3, r3, #1
1a0061f6:	1b00      	subs	r0, r0, r4
1a0061f8:	6053      	str	r3, [r2, #4]
1a0061fa:	6008      	str	r0, [r1, #0]
1a0061fc:	e7d5      	b.n	1a0061aa <_malloc_trim_r+0x3e>
1a0061fe:	bf00      	nop
1a006200:	100004f8 	.word	0x100004f8
1a006204:	10000ab0 	.word	0x10000ab0
1a006208:	10000900 	.word	0x10000900

1a00620c <_free_r>:
1a00620c:	2900      	cmp	r1, #0
1a00620e:	d053      	beq.n	1a0062b8 <_free_r+0xac>
1a006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a006212:	460c      	mov	r4, r1
1a006214:	4606      	mov	r6, r0
1a006216:	f000 fe7f 	bl	1a006f18 <__malloc_lock>
1a00621a:	f854 cc04 	ldr.w	ip, [r4, #-4]
1a00621e:	4f71      	ldr	r7, [pc, #452]	; (1a0063e4 <_free_r+0x1d8>)
1a006220:	f02c 0101 	bic.w	r1, ip, #1
1a006224:	f1a4 0508 	sub.w	r5, r4, #8
1a006228:	186b      	adds	r3, r5, r1
1a00622a:	68b8      	ldr	r0, [r7, #8]
1a00622c:	685a      	ldr	r2, [r3, #4]
1a00622e:	4298      	cmp	r0, r3
1a006230:	f022 0203 	bic.w	r2, r2, #3
1a006234:	d053      	beq.n	1a0062de <_free_r+0xd2>
1a006236:	f01c 0f01 	tst.w	ip, #1
1a00623a:	605a      	str	r2, [r3, #4]
1a00623c:	eb03 0002 	add.w	r0, r3, r2
1a006240:	d13b      	bne.n	1a0062ba <_free_r+0xae>
1a006242:	f854 cc08 	ldr.w	ip, [r4, #-8]
1a006246:	6840      	ldr	r0, [r0, #4]
1a006248:	eba5 050c 	sub.w	r5, r5, ip
1a00624c:	f107 0e08 	add.w	lr, r7, #8
1a006250:	68ac      	ldr	r4, [r5, #8]
1a006252:	4574      	cmp	r4, lr
1a006254:	4461      	add	r1, ip
1a006256:	f000 0001 	and.w	r0, r0, #1
1a00625a:	d075      	beq.n	1a006348 <_free_r+0x13c>
1a00625c:	f8d5 c00c 	ldr.w	ip, [r5, #12]
1a006260:	f8c4 c00c 	str.w	ip, [r4, #12]
1a006264:	f8cc 4008 	str.w	r4, [ip, #8]
1a006268:	b360      	cbz	r0, 1a0062c4 <_free_r+0xb8>
1a00626a:	f041 0301 	orr.w	r3, r1, #1
1a00626e:	606b      	str	r3, [r5, #4]
1a006270:	5069      	str	r1, [r5, r1]
1a006272:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
1a006276:	d350      	bcc.n	1a00631a <_free_r+0x10e>
1a006278:	0a4b      	lsrs	r3, r1, #9
1a00627a:	2b04      	cmp	r3, #4
1a00627c:	d870      	bhi.n	1a006360 <_free_r+0x154>
1a00627e:	098b      	lsrs	r3, r1, #6
1a006280:	f103 0439 	add.w	r4, r3, #57	; 0x39
1a006284:	00e4      	lsls	r4, r4, #3
1a006286:	f103 0238 	add.w	r2, r3, #56	; 0x38
1a00628a:	1938      	adds	r0, r7, r4
1a00628c:	593b      	ldr	r3, [r7, r4]
1a00628e:	3808      	subs	r0, #8
1a006290:	4298      	cmp	r0, r3
1a006292:	d078      	beq.n	1a006386 <_free_r+0x17a>
1a006294:	685a      	ldr	r2, [r3, #4]
1a006296:	f022 0203 	bic.w	r2, r2, #3
1a00629a:	428a      	cmp	r2, r1
1a00629c:	d971      	bls.n	1a006382 <_free_r+0x176>
1a00629e:	689b      	ldr	r3, [r3, #8]
1a0062a0:	4298      	cmp	r0, r3
1a0062a2:	d1f7      	bne.n	1a006294 <_free_r+0x88>
1a0062a4:	68c3      	ldr	r3, [r0, #12]
1a0062a6:	e9c5 0302 	strd	r0, r3, [r5, #8]
1a0062aa:	609d      	str	r5, [r3, #8]
1a0062ac:	60c5      	str	r5, [r0, #12]
1a0062ae:	4630      	mov	r0, r6
1a0062b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a0062b4:	f000 be36 	b.w	1a006f24 <__malloc_unlock>
1a0062b8:	4770      	bx	lr
1a0062ba:	6840      	ldr	r0, [r0, #4]
1a0062bc:	f000 0001 	and.w	r0, r0, #1
1a0062c0:	2800      	cmp	r0, #0
1a0062c2:	d1d2      	bne.n	1a00626a <_free_r+0x5e>
1a0062c4:	6898      	ldr	r0, [r3, #8]
1a0062c6:	4c48      	ldr	r4, [pc, #288]	; (1a0063e8 <_free_r+0x1dc>)
1a0062c8:	4411      	add	r1, r2
1a0062ca:	42a0      	cmp	r0, r4
1a0062cc:	f041 0201 	orr.w	r2, r1, #1
1a0062d0:	d062      	beq.n	1a006398 <_free_r+0x18c>
1a0062d2:	68db      	ldr	r3, [r3, #12]
1a0062d4:	60c3      	str	r3, [r0, #12]
1a0062d6:	6098      	str	r0, [r3, #8]
1a0062d8:	606a      	str	r2, [r5, #4]
1a0062da:	5069      	str	r1, [r5, r1]
1a0062dc:	e7c9      	b.n	1a006272 <_free_r+0x66>
1a0062de:	f01c 0f01 	tst.w	ip, #1
1a0062e2:	440a      	add	r2, r1
1a0062e4:	d107      	bne.n	1a0062f6 <_free_r+0xea>
1a0062e6:	f854 3c08 	ldr.w	r3, [r4, #-8]
1a0062ea:	1aed      	subs	r5, r5, r3
1a0062ec:	441a      	add	r2, r3
1a0062ee:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
1a0062f2:	60cb      	str	r3, [r1, #12]
1a0062f4:	6099      	str	r1, [r3, #8]
1a0062f6:	4b3d      	ldr	r3, [pc, #244]	; (1a0063ec <_free_r+0x1e0>)
1a0062f8:	681b      	ldr	r3, [r3, #0]
1a0062fa:	f042 0101 	orr.w	r1, r2, #1
1a0062fe:	4293      	cmp	r3, r2
1a006300:	6069      	str	r1, [r5, #4]
1a006302:	60bd      	str	r5, [r7, #8]
1a006304:	d804      	bhi.n	1a006310 <_free_r+0x104>
1a006306:	4b3a      	ldr	r3, [pc, #232]	; (1a0063f0 <_free_r+0x1e4>)
1a006308:	4630      	mov	r0, r6
1a00630a:	6819      	ldr	r1, [r3, #0]
1a00630c:	f7ff ff2e 	bl	1a00616c <_malloc_trim_r>
1a006310:	4630      	mov	r0, r6
1a006312:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a006316:	f000 be05 	b.w	1a006f24 <__malloc_unlock>
1a00631a:	08c9      	lsrs	r1, r1, #3
1a00631c:	6878      	ldr	r0, [r7, #4]
1a00631e:	1c4a      	adds	r2, r1, #1
1a006320:	2301      	movs	r3, #1
1a006322:	1089      	asrs	r1, r1, #2
1a006324:	408b      	lsls	r3, r1
1a006326:	4303      	orrs	r3, r0
1a006328:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
1a00632c:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
1a006330:	607b      	str	r3, [r7, #4]
1a006332:	3908      	subs	r1, #8
1a006334:	e9c5 0102 	strd	r0, r1, [r5, #8]
1a006338:	f847 5032 	str.w	r5, [r7, r2, lsl #3]
1a00633c:	60c5      	str	r5, [r0, #12]
1a00633e:	4630      	mov	r0, r6
1a006340:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a006344:	f000 bdee 	b.w	1a006f24 <__malloc_unlock>
1a006348:	2800      	cmp	r0, #0
1a00634a:	d145      	bne.n	1a0063d8 <_free_r+0x1cc>
1a00634c:	440a      	add	r2, r1
1a00634e:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
1a006352:	f042 0001 	orr.w	r0, r2, #1
1a006356:	60cb      	str	r3, [r1, #12]
1a006358:	6099      	str	r1, [r3, #8]
1a00635a:	6068      	str	r0, [r5, #4]
1a00635c:	50aa      	str	r2, [r5, r2]
1a00635e:	e7d7      	b.n	1a006310 <_free_r+0x104>
1a006360:	2b14      	cmp	r3, #20
1a006362:	d908      	bls.n	1a006376 <_free_r+0x16a>
1a006364:	2b54      	cmp	r3, #84	; 0x54
1a006366:	d81e      	bhi.n	1a0063a6 <_free_r+0x19a>
1a006368:	0b0b      	lsrs	r3, r1, #12
1a00636a:	f103 046f 	add.w	r4, r3, #111	; 0x6f
1a00636e:	00e4      	lsls	r4, r4, #3
1a006370:	f103 026e 	add.w	r2, r3, #110	; 0x6e
1a006374:	e789      	b.n	1a00628a <_free_r+0x7e>
1a006376:	f103 045c 	add.w	r4, r3, #92	; 0x5c
1a00637a:	00e4      	lsls	r4, r4, #3
1a00637c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
1a006380:	e783      	b.n	1a00628a <_free_r+0x7e>
1a006382:	4618      	mov	r0, r3
1a006384:	e78e      	b.n	1a0062a4 <_free_r+0x98>
1a006386:	1093      	asrs	r3, r2, #2
1a006388:	6879      	ldr	r1, [r7, #4]
1a00638a:	2201      	movs	r2, #1
1a00638c:	fa02 f303 	lsl.w	r3, r2, r3
1a006390:	430b      	orrs	r3, r1
1a006392:	607b      	str	r3, [r7, #4]
1a006394:	4603      	mov	r3, r0
1a006396:	e786      	b.n	1a0062a6 <_free_r+0x9a>
1a006398:	e9c7 5504 	strd	r5, r5, [r7, #16]
1a00639c:	e9c5 0002 	strd	r0, r0, [r5, #8]
1a0063a0:	606a      	str	r2, [r5, #4]
1a0063a2:	5069      	str	r1, [r5, r1]
1a0063a4:	e7b4      	b.n	1a006310 <_free_r+0x104>
1a0063a6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a0063aa:	d806      	bhi.n	1a0063ba <_free_r+0x1ae>
1a0063ac:	0bcb      	lsrs	r3, r1, #15
1a0063ae:	f103 0478 	add.w	r4, r3, #120	; 0x78
1a0063b2:	00e4      	lsls	r4, r4, #3
1a0063b4:	f103 0277 	add.w	r2, r3, #119	; 0x77
1a0063b8:	e767      	b.n	1a00628a <_free_r+0x7e>
1a0063ba:	f240 5254 	movw	r2, #1364	; 0x554
1a0063be:	4293      	cmp	r3, r2
1a0063c0:	d806      	bhi.n	1a0063d0 <_free_r+0x1c4>
1a0063c2:	0c8b      	lsrs	r3, r1, #18
1a0063c4:	f103 047d 	add.w	r4, r3, #125	; 0x7d
1a0063c8:	00e4      	lsls	r4, r4, #3
1a0063ca:	f103 027c 	add.w	r2, r3, #124	; 0x7c
1a0063ce:	e75c      	b.n	1a00628a <_free_r+0x7e>
1a0063d0:	f44f 747e 	mov.w	r4, #1016	; 0x3f8
1a0063d4:	227e      	movs	r2, #126	; 0x7e
1a0063d6:	e758      	b.n	1a00628a <_free_r+0x7e>
1a0063d8:	f041 0201 	orr.w	r2, r1, #1
1a0063dc:	606a      	str	r2, [r5, #4]
1a0063de:	6019      	str	r1, [r3, #0]
1a0063e0:	e796      	b.n	1a006310 <_free_r+0x104>
1a0063e2:	bf00      	nop
1a0063e4:	100004f8 	.word	0x100004f8
1a0063e8:	10000500 	.word	0x10000500
1a0063ec:	10000904 	.word	0x10000904
1a0063f0:	10000ae0 	.word	0x10000ae0

1a0063f4 <__sfvwrite_r>:
1a0063f4:	6893      	ldr	r3, [r2, #8]
1a0063f6:	2b00      	cmp	r3, #0
1a0063f8:	f000 80e4 	beq.w	1a0065c4 <__sfvwrite_r+0x1d0>
1a0063fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006400:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a006404:	b29b      	uxth	r3, r3
1a006406:	460c      	mov	r4, r1
1a006408:	0719      	lsls	r1, r3, #28
1a00640a:	b083      	sub	sp, #12
1a00640c:	4682      	mov	sl, r0
1a00640e:	4690      	mov	r8, r2
1a006410:	d535      	bpl.n	1a00647e <__sfvwrite_r+0x8a>
1a006412:	6922      	ldr	r2, [r4, #16]
1a006414:	b39a      	cbz	r2, 1a00647e <__sfvwrite_r+0x8a>
1a006416:	f013 0202 	ands.w	r2, r3, #2
1a00641a:	f8d8 6000 	ldr.w	r6, [r8]
1a00641e:	d03d      	beq.n	1a00649c <__sfvwrite_r+0xa8>
1a006420:	2700      	movs	r7, #0
1a006422:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a006426:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a00642a:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 1a0066ec <__sfvwrite_r+0x2f8>
1a00642e:	463d      	mov	r5, r7
1a006430:	454d      	cmp	r5, r9
1a006432:	462b      	mov	r3, r5
1a006434:	463a      	mov	r2, r7
1a006436:	bf28      	it	cs
1a006438:	464b      	movcs	r3, r9
1a00643a:	4661      	mov	r1, ip
1a00643c:	4650      	mov	r0, sl
1a00643e:	b1d5      	cbz	r5, 1a006476 <__sfvwrite_r+0x82>
1a006440:	47d8      	blx	fp
1a006442:	2800      	cmp	r0, #0
1a006444:	f340 80c6 	ble.w	1a0065d4 <__sfvwrite_r+0x1e0>
1a006448:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00644c:	1a1b      	subs	r3, r3, r0
1a00644e:	4407      	add	r7, r0
1a006450:	1a2d      	subs	r5, r5, r0
1a006452:	f8c8 3008 	str.w	r3, [r8, #8]
1a006456:	2b00      	cmp	r3, #0
1a006458:	f000 80b0 	beq.w	1a0065bc <__sfvwrite_r+0x1c8>
1a00645c:	f8d4 c01c 	ldr.w	ip, [r4, #28]
1a006460:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
1a006464:	454d      	cmp	r5, r9
1a006466:	462b      	mov	r3, r5
1a006468:	463a      	mov	r2, r7
1a00646a:	bf28      	it	cs
1a00646c:	464b      	movcs	r3, r9
1a00646e:	4661      	mov	r1, ip
1a006470:	4650      	mov	r0, sl
1a006472:	2d00      	cmp	r5, #0
1a006474:	d1e4      	bne.n	1a006440 <__sfvwrite_r+0x4c>
1a006476:	e9d6 7500 	ldrd	r7, r5, [r6]
1a00647a:	3608      	adds	r6, #8
1a00647c:	e7d8      	b.n	1a006430 <__sfvwrite_r+0x3c>
1a00647e:	4621      	mov	r1, r4
1a006480:	4650      	mov	r0, sl
1a006482:	f7fe fd2d 	bl	1a004ee0 <__swsetup_r>
1a006486:	2800      	cmp	r0, #0
1a006488:	f040 812a 	bne.w	1a0066e0 <__sfvwrite_r+0x2ec>
1a00648c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006490:	f8d8 6000 	ldr.w	r6, [r8]
1a006494:	b29b      	uxth	r3, r3
1a006496:	f013 0202 	ands.w	r2, r3, #2
1a00649a:	d1c1      	bne.n	1a006420 <__sfvwrite_r+0x2c>
1a00649c:	f013 0901 	ands.w	r9, r3, #1
1a0064a0:	d15d      	bne.n	1a00655e <__sfvwrite_r+0x16a>
1a0064a2:	68a7      	ldr	r7, [r4, #8]
1a0064a4:	6820      	ldr	r0, [r4, #0]
1a0064a6:	464d      	mov	r5, r9
1a0064a8:	2d00      	cmp	r5, #0
1a0064aa:	d054      	beq.n	1a006556 <__sfvwrite_r+0x162>
1a0064ac:	059a      	lsls	r2, r3, #22
1a0064ae:	f140 809b 	bpl.w	1a0065e8 <__sfvwrite_r+0x1f4>
1a0064b2:	42af      	cmp	r7, r5
1a0064b4:	46bb      	mov	fp, r7
1a0064b6:	f200 80d8 	bhi.w	1a00666a <__sfvwrite_r+0x276>
1a0064ba:	f413 6f90 	tst.w	r3, #1152	; 0x480
1a0064be:	d02f      	beq.n	1a006520 <__sfvwrite_r+0x12c>
1a0064c0:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
1a0064c4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1a0064c8:	eba0 0b01 	sub.w	fp, r0, r1
1a0064cc:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1a0064d0:	1c68      	adds	r0, r5, #1
1a0064d2:	107f      	asrs	r7, r7, #1
1a0064d4:	4458      	add	r0, fp
1a0064d6:	42b8      	cmp	r0, r7
1a0064d8:	463a      	mov	r2, r7
1a0064da:	bf84      	itt	hi
1a0064dc:	4607      	movhi	r7, r0
1a0064de:	463a      	movhi	r2, r7
1a0064e0:	055b      	lsls	r3, r3, #21
1a0064e2:	f140 80d3 	bpl.w	1a00668c <__sfvwrite_r+0x298>
1a0064e6:	4611      	mov	r1, r2
1a0064e8:	4650      	mov	r0, sl
1a0064ea:	f000 f9b9 	bl	1a006860 <_malloc_r>
1a0064ee:	2800      	cmp	r0, #0
1a0064f0:	f000 80f0 	beq.w	1a0066d4 <__sfvwrite_r+0x2e0>
1a0064f4:	465a      	mov	r2, fp
1a0064f6:	6921      	ldr	r1, [r4, #16]
1a0064f8:	9001      	str	r0, [sp, #4]
1a0064fa:	f7fc fda5 	bl	1a003048 <memcpy>
1a0064fe:	89a2      	ldrh	r2, [r4, #12]
1a006500:	9b01      	ldr	r3, [sp, #4]
1a006502:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a006506:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00650a:	81a2      	strh	r2, [r4, #12]
1a00650c:	eba7 020b 	sub.w	r2, r7, fp
1a006510:	eb03 000b 	add.w	r0, r3, fp
1a006514:	6167      	str	r7, [r4, #20]
1a006516:	6123      	str	r3, [r4, #16]
1a006518:	6020      	str	r0, [r4, #0]
1a00651a:	60a2      	str	r2, [r4, #8]
1a00651c:	462f      	mov	r7, r5
1a00651e:	46ab      	mov	fp, r5
1a006520:	465a      	mov	r2, fp
1a006522:	4649      	mov	r1, r9
1a006524:	f000 fc94 	bl	1a006e50 <memmove>
1a006528:	68a2      	ldr	r2, [r4, #8]
1a00652a:	6823      	ldr	r3, [r4, #0]
1a00652c:	1bd2      	subs	r2, r2, r7
1a00652e:	445b      	add	r3, fp
1a006530:	462f      	mov	r7, r5
1a006532:	60a2      	str	r2, [r4, #8]
1a006534:	6023      	str	r3, [r4, #0]
1a006536:	2500      	movs	r5, #0
1a006538:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00653c:	1bdb      	subs	r3, r3, r7
1a00653e:	44b9      	add	r9, r7
1a006540:	f8c8 3008 	str.w	r3, [r8, #8]
1a006544:	2b00      	cmp	r3, #0
1a006546:	d039      	beq.n	1a0065bc <__sfvwrite_r+0x1c8>
1a006548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00654c:	68a7      	ldr	r7, [r4, #8]
1a00654e:	6820      	ldr	r0, [r4, #0]
1a006550:	b29b      	uxth	r3, r3
1a006552:	2d00      	cmp	r5, #0
1a006554:	d1aa      	bne.n	1a0064ac <__sfvwrite_r+0xb8>
1a006556:	e9d6 9500 	ldrd	r9, r5, [r6]
1a00655a:	3608      	adds	r6, #8
1a00655c:	e7a4      	b.n	1a0064a8 <__sfvwrite_r+0xb4>
1a00655e:	4633      	mov	r3, r6
1a006560:	4691      	mov	r9, r2
1a006562:	4610      	mov	r0, r2
1a006564:	4617      	mov	r7, r2
1a006566:	464e      	mov	r6, r9
1a006568:	469b      	mov	fp, r3
1a00656a:	2f00      	cmp	r7, #0
1a00656c:	d06b      	beq.n	1a006646 <__sfvwrite_r+0x252>
1a00656e:	2800      	cmp	r0, #0
1a006570:	d071      	beq.n	1a006656 <__sfvwrite_r+0x262>
1a006572:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
1a006576:	6820      	ldr	r0, [r4, #0]
1a006578:	45b9      	cmp	r9, r7
1a00657a:	464b      	mov	r3, r9
1a00657c:	bf28      	it	cs
1a00657e:	463b      	movcs	r3, r7
1a006580:	4288      	cmp	r0, r1
1a006582:	d903      	bls.n	1a00658c <__sfvwrite_r+0x198>
1a006584:	68a5      	ldr	r5, [r4, #8]
1a006586:	4415      	add	r5, r2
1a006588:	42ab      	cmp	r3, r5
1a00658a:	dc71      	bgt.n	1a006670 <__sfvwrite_r+0x27c>
1a00658c:	429a      	cmp	r2, r3
1a00658e:	f300 8093 	bgt.w	1a0066b8 <__sfvwrite_r+0x2c4>
1a006592:	4613      	mov	r3, r2
1a006594:	6a65      	ldr	r5, [r4, #36]	; 0x24
1a006596:	69e1      	ldr	r1, [r4, #28]
1a006598:	4632      	mov	r2, r6
1a00659a:	4650      	mov	r0, sl
1a00659c:	47a8      	blx	r5
1a00659e:	1e05      	subs	r5, r0, #0
1a0065a0:	dd18      	ble.n	1a0065d4 <__sfvwrite_r+0x1e0>
1a0065a2:	ebb9 0905 	subs.w	r9, r9, r5
1a0065a6:	d00f      	beq.n	1a0065c8 <__sfvwrite_r+0x1d4>
1a0065a8:	2001      	movs	r0, #1
1a0065aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a0065ae:	1b5b      	subs	r3, r3, r5
1a0065b0:	442e      	add	r6, r5
1a0065b2:	1b7f      	subs	r7, r7, r5
1a0065b4:	f8c8 3008 	str.w	r3, [r8, #8]
1a0065b8:	2b00      	cmp	r3, #0
1a0065ba:	d1d6      	bne.n	1a00656a <__sfvwrite_r+0x176>
1a0065bc:	2000      	movs	r0, #0
1a0065be:	b003      	add	sp, #12
1a0065c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0065c4:	2000      	movs	r0, #0
1a0065c6:	4770      	bx	lr
1a0065c8:	4621      	mov	r1, r4
1a0065ca:	4650      	mov	r0, sl
1a0065cc:	f7ff fd3a 	bl	1a006044 <_fflush_r>
1a0065d0:	2800      	cmp	r0, #0
1a0065d2:	d0ea      	beq.n	1a0065aa <__sfvwrite_r+0x1b6>
1a0065d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0065d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0065dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0065e0:	81a3      	strh	r3, [r4, #12]
1a0065e2:	b003      	add	sp, #12
1a0065e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0065e8:	6923      	ldr	r3, [r4, #16]
1a0065ea:	4283      	cmp	r3, r0
1a0065ec:	d315      	bcc.n	1a00661a <__sfvwrite_r+0x226>
1a0065ee:	6961      	ldr	r1, [r4, #20]
1a0065f0:	42a9      	cmp	r1, r5
1a0065f2:	d812      	bhi.n	1a00661a <__sfvwrite_r+0x226>
1a0065f4:	4b3c      	ldr	r3, [pc, #240]	; (1a0066e8 <__sfvwrite_r+0x2f4>)
1a0065f6:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a0065f8:	429d      	cmp	r5, r3
1a0065fa:	bf94      	ite	ls
1a0065fc:	462b      	movls	r3, r5
1a0065fe:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
1a006602:	464a      	mov	r2, r9
1a006604:	fb93 f3f1 	sdiv	r3, r3, r1
1a006608:	4650      	mov	r0, sl
1a00660a:	fb01 f303 	mul.w	r3, r1, r3
1a00660e:	69e1      	ldr	r1, [r4, #28]
1a006610:	47b8      	blx	r7
1a006612:	1e07      	subs	r7, r0, #0
1a006614:	ddde      	ble.n	1a0065d4 <__sfvwrite_r+0x1e0>
1a006616:	1bed      	subs	r5, r5, r7
1a006618:	e78e      	b.n	1a006538 <__sfvwrite_r+0x144>
1a00661a:	42af      	cmp	r7, r5
1a00661c:	bf28      	it	cs
1a00661e:	462f      	movcs	r7, r5
1a006620:	463a      	mov	r2, r7
1a006622:	4649      	mov	r1, r9
1a006624:	f000 fc14 	bl	1a006e50 <memmove>
1a006628:	68a3      	ldr	r3, [r4, #8]
1a00662a:	6822      	ldr	r2, [r4, #0]
1a00662c:	1bdb      	subs	r3, r3, r7
1a00662e:	443a      	add	r2, r7
1a006630:	60a3      	str	r3, [r4, #8]
1a006632:	6022      	str	r2, [r4, #0]
1a006634:	2b00      	cmp	r3, #0
1a006636:	d1ee      	bne.n	1a006616 <__sfvwrite_r+0x222>
1a006638:	4621      	mov	r1, r4
1a00663a:	4650      	mov	r0, sl
1a00663c:	f7ff fd02 	bl	1a006044 <_fflush_r>
1a006640:	2800      	cmp	r0, #0
1a006642:	d0e8      	beq.n	1a006616 <__sfvwrite_r+0x222>
1a006644:	e7c6      	b.n	1a0065d4 <__sfvwrite_r+0x1e0>
1a006646:	f10b 0308 	add.w	r3, fp, #8
1a00664a:	e953 6702 	ldrd	r6, r7, [r3, #-8]
1a00664e:	469b      	mov	fp, r3
1a006650:	3308      	adds	r3, #8
1a006652:	2f00      	cmp	r7, #0
1a006654:	d0f9      	beq.n	1a00664a <__sfvwrite_r+0x256>
1a006656:	463a      	mov	r2, r7
1a006658:	210a      	movs	r1, #10
1a00665a:	4630      	mov	r0, r6
1a00665c:	f000 fba8 	bl	1a006db0 <memchr>
1a006660:	b338      	cbz	r0, 1a0066b2 <__sfvwrite_r+0x2be>
1a006662:	3001      	adds	r0, #1
1a006664:	eba0 0906 	sub.w	r9, r0, r6
1a006668:	e783      	b.n	1a006572 <__sfvwrite_r+0x17e>
1a00666a:	462f      	mov	r7, r5
1a00666c:	46ab      	mov	fp, r5
1a00666e:	e757      	b.n	1a006520 <__sfvwrite_r+0x12c>
1a006670:	4631      	mov	r1, r6
1a006672:	462a      	mov	r2, r5
1a006674:	f000 fbec 	bl	1a006e50 <memmove>
1a006678:	6823      	ldr	r3, [r4, #0]
1a00667a:	442b      	add	r3, r5
1a00667c:	6023      	str	r3, [r4, #0]
1a00667e:	4621      	mov	r1, r4
1a006680:	4650      	mov	r0, sl
1a006682:	f7ff fcdf 	bl	1a006044 <_fflush_r>
1a006686:	2800      	cmp	r0, #0
1a006688:	d08b      	beq.n	1a0065a2 <__sfvwrite_r+0x1ae>
1a00668a:	e7a3      	b.n	1a0065d4 <__sfvwrite_r+0x1e0>
1a00668c:	4650      	mov	r0, sl
1a00668e:	f000 ff59 	bl	1a007544 <_realloc_r>
1a006692:	4603      	mov	r3, r0
1a006694:	2800      	cmp	r0, #0
1a006696:	f47f af39 	bne.w	1a00650c <__sfvwrite_r+0x118>
1a00669a:	6921      	ldr	r1, [r4, #16]
1a00669c:	4650      	mov	r0, sl
1a00669e:	f7ff fdb5 	bl	1a00620c <_free_r>
1a0066a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0066a6:	220c      	movs	r2, #12
1a0066a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0066ac:	f8ca 2000 	str.w	r2, [sl]
1a0066b0:	e792      	b.n	1a0065d8 <__sfvwrite_r+0x1e4>
1a0066b2:	f107 0901 	add.w	r9, r7, #1
1a0066b6:	e75c      	b.n	1a006572 <__sfvwrite_r+0x17e>
1a0066b8:	461a      	mov	r2, r3
1a0066ba:	4631      	mov	r1, r6
1a0066bc:	9301      	str	r3, [sp, #4]
1a0066be:	f000 fbc7 	bl	1a006e50 <memmove>
1a0066c2:	9b01      	ldr	r3, [sp, #4]
1a0066c4:	68a1      	ldr	r1, [r4, #8]
1a0066c6:	6822      	ldr	r2, [r4, #0]
1a0066c8:	1ac9      	subs	r1, r1, r3
1a0066ca:	441a      	add	r2, r3
1a0066cc:	60a1      	str	r1, [r4, #8]
1a0066ce:	6022      	str	r2, [r4, #0]
1a0066d0:	461d      	mov	r5, r3
1a0066d2:	e766      	b.n	1a0065a2 <__sfvwrite_r+0x1ae>
1a0066d4:	230c      	movs	r3, #12
1a0066d6:	f8ca 3000 	str.w	r3, [sl]
1a0066da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0066de:	e77b      	b.n	1a0065d8 <__sfvwrite_r+0x1e4>
1a0066e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0066e4:	e76b      	b.n	1a0065be <__sfvwrite_r+0x1ca>
1a0066e6:	bf00      	nop
1a0066e8:	7ffffffe 	.word	0x7ffffffe
1a0066ec:	7ffffc00 	.word	0x7ffffc00

1a0066f0 <_fwalk_reent>:
1a0066f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0066f4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a0066f8:	d01f      	beq.n	1a00673a <_fwalk_reent+0x4a>
1a0066fa:	4688      	mov	r8, r1
1a0066fc:	4606      	mov	r6, r0
1a0066fe:	f04f 0900 	mov.w	r9, #0
1a006702:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
1a006706:	3d01      	subs	r5, #1
1a006708:	d411      	bmi.n	1a00672e <_fwalk_reent+0x3e>
1a00670a:	89a3      	ldrh	r3, [r4, #12]
1a00670c:	2b01      	cmp	r3, #1
1a00670e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
1a006712:	4621      	mov	r1, r4
1a006714:	4630      	mov	r0, r6
1a006716:	d906      	bls.n	1a006726 <_fwalk_reent+0x36>
1a006718:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a00671c:	3301      	adds	r3, #1
1a00671e:	d002      	beq.n	1a006726 <_fwalk_reent+0x36>
1a006720:	47c0      	blx	r8
1a006722:	ea49 0900 	orr.w	r9, r9, r0
1a006726:	1c6b      	adds	r3, r5, #1
1a006728:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a00672c:	d1ed      	bne.n	1a00670a <_fwalk_reent+0x1a>
1a00672e:	683f      	ldr	r7, [r7, #0]
1a006730:	2f00      	cmp	r7, #0
1a006732:	d1e6      	bne.n	1a006702 <_fwalk_reent+0x12>
1a006734:	4648      	mov	r0, r9
1a006736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00673a:	46b9      	mov	r9, r7
1a00673c:	4648      	mov	r0, r9
1a00673e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a006742:	bf00      	nop

1a006744 <_localeconv_r>:
1a006744:	4a04      	ldr	r2, [pc, #16]	; (1a006758 <_localeconv_r+0x14>)
1a006746:	4b05      	ldr	r3, [pc, #20]	; (1a00675c <_localeconv_r+0x18>)
1a006748:	6812      	ldr	r2, [r2, #0]
1a00674a:	6b50      	ldr	r0, [r2, #52]	; 0x34
1a00674c:	2800      	cmp	r0, #0
1a00674e:	bf08      	it	eq
1a006750:	4618      	moveq	r0, r3
1a006752:	30f0      	adds	r0, #240	; 0xf0
1a006754:	4770      	bx	lr
1a006756:	bf00      	nop
1a006758:	100000cc 	.word	0x100000cc
1a00675c:	10000908 	.word	0x10000908

1a006760 <__retarget_lock_init_recursive>:
1a006760:	4770      	bx	lr
1a006762:	bf00      	nop

1a006764 <__retarget_lock_close_recursive>:
1a006764:	4770      	bx	lr
1a006766:	bf00      	nop

1a006768 <__retarget_lock_acquire_recursive>:
1a006768:	4770      	bx	lr
1a00676a:	bf00      	nop

1a00676c <__retarget_lock_release_recursive>:
1a00676c:	4770      	bx	lr
1a00676e:	bf00      	nop

1a006770 <__swhatbuf_r>:
1a006770:	b570      	push	{r4, r5, r6, lr}
1a006772:	460c      	mov	r4, r1
1a006774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006778:	2900      	cmp	r1, #0
1a00677a:	b096      	sub	sp, #88	; 0x58
1a00677c:	4615      	mov	r5, r2
1a00677e:	461e      	mov	r6, r3
1a006780:	da0f      	bge.n	1a0067a2 <__swhatbuf_r+0x32>
1a006782:	89a2      	ldrh	r2, [r4, #12]
1a006784:	2300      	movs	r3, #0
1a006786:	f012 0080 	ands.w	r0, r2, #128	; 0x80
1a00678a:	6033      	str	r3, [r6, #0]
1a00678c:	d104      	bne.n	1a006798 <__swhatbuf_r+0x28>
1a00678e:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a006792:	602b      	str	r3, [r5, #0]
1a006794:	b016      	add	sp, #88	; 0x58
1a006796:	bd70      	pop	{r4, r5, r6, pc}
1a006798:	2240      	movs	r2, #64	; 0x40
1a00679a:	4618      	mov	r0, r3
1a00679c:	602a      	str	r2, [r5, #0]
1a00679e:	b016      	add	sp, #88	; 0x58
1a0067a0:	bd70      	pop	{r4, r5, r6, pc}
1a0067a2:	466a      	mov	r2, sp
1a0067a4:	f7fa ffcf 	bl	1a001746 <_fstat_r>
1a0067a8:	2800      	cmp	r0, #0
1a0067aa:	dbea      	blt.n	1a006782 <__swhatbuf_r+0x12>
1a0067ac:	9b01      	ldr	r3, [sp, #4]
1a0067ae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
1a0067b2:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
1a0067b6:	fab3 f383 	clz	r3, r3
1a0067ba:	095b      	lsrs	r3, r3, #5
1a0067bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
1a0067c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
1a0067c4:	6033      	str	r3, [r6, #0]
1a0067c6:	602a      	str	r2, [r5, #0]
1a0067c8:	b016      	add	sp, #88	; 0x58
1a0067ca:	bd70      	pop	{r4, r5, r6, pc}

1a0067cc <__smakebuf_r>:
1a0067cc:	898a      	ldrh	r2, [r1, #12]
1a0067ce:	0792      	lsls	r2, r2, #30
1a0067d0:	460b      	mov	r3, r1
1a0067d2:	d506      	bpl.n	1a0067e2 <__smakebuf_r+0x16>
1a0067d4:	f101 0243 	add.w	r2, r1, #67	; 0x43
1a0067d8:	2101      	movs	r1, #1
1a0067da:	601a      	str	r2, [r3, #0]
1a0067dc:	e9c3 2104 	strd	r2, r1, [r3, #16]
1a0067e0:	4770      	bx	lr
1a0067e2:	b570      	push	{r4, r5, r6, lr}
1a0067e4:	b082      	sub	sp, #8
1a0067e6:	ab01      	add	r3, sp, #4
1a0067e8:	466a      	mov	r2, sp
1a0067ea:	460c      	mov	r4, r1
1a0067ec:	4605      	mov	r5, r0
1a0067ee:	f7ff ffbf 	bl	1a006770 <__swhatbuf_r>
1a0067f2:	9900      	ldr	r1, [sp, #0]
1a0067f4:	4606      	mov	r6, r0
1a0067f6:	4628      	mov	r0, r5
1a0067f8:	f000 f832 	bl	1a006860 <_malloc_r>
1a0067fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006800:	b1d8      	cbz	r0, 1a00683a <__smakebuf_r+0x6e>
1a006802:	4916      	ldr	r1, [pc, #88]	; (1a00685c <__smakebuf_r+0x90>)
1a006804:	63e9      	str	r1, [r5, #60]	; 0x3c
1a006806:	9a01      	ldr	r2, [sp, #4]
1a006808:	9900      	ldr	r1, [sp, #0]
1a00680a:	6020      	str	r0, [r4, #0]
1a00680c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a006810:	81a3      	strh	r3, [r4, #12]
1a006812:	e9c4 0104 	strd	r0, r1, [r4, #16]
1a006816:	b91a      	cbnz	r2, 1a006820 <__smakebuf_r+0x54>
1a006818:	4333      	orrs	r3, r6
1a00681a:	81a3      	strh	r3, [r4, #12]
1a00681c:	b002      	add	sp, #8
1a00681e:	bd70      	pop	{r4, r5, r6, pc}
1a006820:	4628      	mov	r0, r5
1a006822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a006826:	f7fa ff93 	bl	1a001750 <_isatty_r>
1a00682a:	b1a0      	cbz	r0, 1a006856 <__smakebuf_r+0x8a>
1a00682c:	89a3      	ldrh	r3, [r4, #12]
1a00682e:	f023 0303 	bic.w	r3, r3, #3
1a006832:	f043 0301 	orr.w	r3, r3, #1
1a006836:	b21b      	sxth	r3, r3
1a006838:	e7ee      	b.n	1a006818 <__smakebuf_r+0x4c>
1a00683a:	059a      	lsls	r2, r3, #22
1a00683c:	d4ee      	bmi.n	1a00681c <__smakebuf_r+0x50>
1a00683e:	f023 0303 	bic.w	r3, r3, #3
1a006842:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a006846:	f043 0302 	orr.w	r3, r3, #2
1a00684a:	2101      	movs	r1, #1
1a00684c:	81a3      	strh	r3, [r4, #12]
1a00684e:	6022      	str	r2, [r4, #0]
1a006850:	e9c4 2104 	strd	r2, r1, [r4, #16]
1a006854:	e7e2      	b.n	1a00681c <__smakebuf_r+0x50>
1a006856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00685a:	e7dd      	b.n	1a006818 <__smakebuf_r+0x4c>
1a00685c:	1a0060f1 	.word	0x1a0060f1

1a006860 <_malloc_r>:
1a006860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a006864:	f101 050b 	add.w	r5, r1, #11
1a006868:	2d16      	cmp	r5, #22
1a00686a:	b083      	sub	sp, #12
1a00686c:	4606      	mov	r6, r0
1a00686e:	d823      	bhi.n	1a0068b8 <_malloc_r+0x58>
1a006870:	2910      	cmp	r1, #16
1a006872:	f200 80b9 	bhi.w	1a0069e8 <_malloc_r+0x188>
1a006876:	f000 fb4f 	bl	1a006f18 <__malloc_lock>
1a00687a:	2510      	movs	r5, #16
1a00687c:	2318      	movs	r3, #24
1a00687e:	2002      	movs	r0, #2
1a006880:	4fc5      	ldr	r7, [pc, #788]	; (1a006b98 <_malloc_r+0x338>)
1a006882:	443b      	add	r3, r7
1a006884:	f1a3 0208 	sub.w	r2, r3, #8
1a006888:	685c      	ldr	r4, [r3, #4]
1a00688a:	4294      	cmp	r4, r2
1a00688c:	f000 8166 	beq.w	1a006b5c <_malloc_r+0x2fc>
1a006890:	6863      	ldr	r3, [r4, #4]
1a006892:	f023 0303 	bic.w	r3, r3, #3
1a006896:	4423      	add	r3, r4
1a006898:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
1a00689c:	685a      	ldr	r2, [r3, #4]
1a00689e:	60e9      	str	r1, [r5, #12]
1a0068a0:	f042 0201 	orr.w	r2, r2, #1
1a0068a4:	608d      	str	r5, [r1, #8]
1a0068a6:	4630      	mov	r0, r6
1a0068a8:	605a      	str	r2, [r3, #4]
1a0068aa:	f000 fb3b 	bl	1a006f24 <__malloc_unlock>
1a0068ae:	3408      	adds	r4, #8
1a0068b0:	4620      	mov	r0, r4
1a0068b2:	b003      	add	sp, #12
1a0068b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0068b8:	f035 0507 	bics.w	r5, r5, #7
1a0068bc:	f100 8094 	bmi.w	1a0069e8 <_malloc_r+0x188>
1a0068c0:	42a9      	cmp	r1, r5
1a0068c2:	f200 8091 	bhi.w	1a0069e8 <_malloc_r+0x188>
1a0068c6:	f000 fb27 	bl	1a006f18 <__malloc_lock>
1a0068ca:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a0068ce:	f0c0 8183 	bcc.w	1a006bd8 <_malloc_r+0x378>
1a0068d2:	0a6b      	lsrs	r3, r5, #9
1a0068d4:	f000 808f 	beq.w	1a0069f6 <_malloc_r+0x196>
1a0068d8:	2b04      	cmp	r3, #4
1a0068da:	f200 8146 	bhi.w	1a006b6a <_malloc_r+0x30a>
1a0068de:	09ab      	lsrs	r3, r5, #6
1a0068e0:	f103 0039 	add.w	r0, r3, #57	; 0x39
1a0068e4:	f103 0c38 	add.w	ip, r3, #56	; 0x38
1a0068e8:	00c3      	lsls	r3, r0, #3
1a0068ea:	4fab      	ldr	r7, [pc, #684]	; (1a006b98 <_malloc_r+0x338>)
1a0068ec:	443b      	add	r3, r7
1a0068ee:	f1a3 0108 	sub.w	r1, r3, #8
1a0068f2:	685c      	ldr	r4, [r3, #4]
1a0068f4:	42a1      	cmp	r1, r4
1a0068f6:	d106      	bne.n	1a006906 <_malloc_r+0xa6>
1a0068f8:	e00c      	b.n	1a006914 <_malloc_r+0xb4>
1a0068fa:	2a00      	cmp	r2, #0
1a0068fc:	f280 811d 	bge.w	1a006b3a <_malloc_r+0x2da>
1a006900:	68e4      	ldr	r4, [r4, #12]
1a006902:	42a1      	cmp	r1, r4
1a006904:	d006      	beq.n	1a006914 <_malloc_r+0xb4>
1a006906:	6863      	ldr	r3, [r4, #4]
1a006908:	f023 0303 	bic.w	r3, r3, #3
1a00690c:	1b5a      	subs	r2, r3, r5
1a00690e:	2a0f      	cmp	r2, #15
1a006910:	ddf3      	ble.n	1a0068fa <_malloc_r+0x9a>
1a006912:	4660      	mov	r0, ip
1a006914:	693c      	ldr	r4, [r7, #16]
1a006916:	f8df c294 	ldr.w	ip, [pc, #660]	; 1a006bac <_malloc_r+0x34c>
1a00691a:	4564      	cmp	r4, ip
1a00691c:	d071      	beq.n	1a006a02 <_malloc_r+0x1a2>
1a00691e:	6863      	ldr	r3, [r4, #4]
1a006920:	f023 0303 	bic.w	r3, r3, #3
1a006924:	1b5a      	subs	r2, r3, r5
1a006926:	2a0f      	cmp	r2, #15
1a006928:	f300 8144 	bgt.w	1a006bb4 <_malloc_r+0x354>
1a00692c:	2a00      	cmp	r2, #0
1a00692e:	e9c7 cc04 	strd	ip, ip, [r7, #16]
1a006932:	f280 8126 	bge.w	1a006b82 <_malloc_r+0x322>
1a006936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00693a:	f080 8169 	bcs.w	1a006c10 <_malloc_r+0x3b0>
1a00693e:	08db      	lsrs	r3, r3, #3
1a006940:	1c59      	adds	r1, r3, #1
1a006942:	687a      	ldr	r2, [r7, #4]
1a006944:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
1a006948:	f8c4 8008 	str.w	r8, [r4, #8]
1a00694c:	f04f 0e01 	mov.w	lr, #1
1a006950:	109b      	asrs	r3, r3, #2
1a006952:	fa0e f303 	lsl.w	r3, lr, r3
1a006956:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
1a00695a:	4313      	orrs	r3, r2
1a00695c:	f1ae 0208 	sub.w	r2, lr, #8
1a006960:	60e2      	str	r2, [r4, #12]
1a006962:	607b      	str	r3, [r7, #4]
1a006964:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
1a006968:	f8c8 400c 	str.w	r4, [r8, #12]
1a00696c:	1082      	asrs	r2, r0, #2
1a00696e:	2401      	movs	r4, #1
1a006970:	4094      	lsls	r4, r2
1a006972:	429c      	cmp	r4, r3
1a006974:	d84b      	bhi.n	1a006a0e <_malloc_r+0x1ae>
1a006976:	421c      	tst	r4, r3
1a006978:	d106      	bne.n	1a006988 <_malloc_r+0x128>
1a00697a:	f020 0003 	bic.w	r0, r0, #3
1a00697e:	0064      	lsls	r4, r4, #1
1a006980:	421c      	tst	r4, r3
1a006982:	f100 0004 	add.w	r0, r0, #4
1a006986:	d0fa      	beq.n	1a00697e <_malloc_r+0x11e>
1a006988:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
1a00698c:	46ce      	mov	lr, r9
1a00698e:	4680      	mov	r8, r0
1a006990:	f8de 300c 	ldr.w	r3, [lr, #12]
1a006994:	459e      	cmp	lr, r3
1a006996:	d107      	bne.n	1a0069a8 <_malloc_r+0x148>
1a006998:	e122      	b.n	1a006be0 <_malloc_r+0x380>
1a00699a:	2a00      	cmp	r2, #0
1a00699c:	f280 8129 	bge.w	1a006bf2 <_malloc_r+0x392>
1a0069a0:	68db      	ldr	r3, [r3, #12]
1a0069a2:	459e      	cmp	lr, r3
1a0069a4:	f000 811c 	beq.w	1a006be0 <_malloc_r+0x380>
1a0069a8:	6859      	ldr	r1, [r3, #4]
1a0069aa:	f021 0103 	bic.w	r1, r1, #3
1a0069ae:	1b4a      	subs	r2, r1, r5
1a0069b0:	2a0f      	cmp	r2, #15
1a0069b2:	ddf2      	ble.n	1a00699a <_malloc_r+0x13a>
1a0069b4:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
1a0069b8:	195c      	adds	r4, r3, r5
1a0069ba:	f045 0501 	orr.w	r5, r5, #1
1a0069be:	605d      	str	r5, [r3, #4]
1a0069c0:	f042 0501 	orr.w	r5, r2, #1
1a0069c4:	f8c8 e00c 	str.w	lr, [r8, #12]
1a0069c8:	4630      	mov	r0, r6
1a0069ca:	f8ce 8008 	str.w	r8, [lr, #8]
1a0069ce:	e9c7 4404 	strd	r4, r4, [r7, #16]
1a0069d2:	e9c4 cc02 	strd	ip, ip, [r4, #8]
1a0069d6:	6065      	str	r5, [r4, #4]
1a0069d8:	505a      	str	r2, [r3, r1]
1a0069da:	9301      	str	r3, [sp, #4]
1a0069dc:	f000 faa2 	bl	1a006f24 <__malloc_unlock>
1a0069e0:	9b01      	ldr	r3, [sp, #4]
1a0069e2:	f103 0408 	add.w	r4, r3, #8
1a0069e6:	e763      	b.n	1a0068b0 <_malloc_r+0x50>
1a0069e8:	2400      	movs	r4, #0
1a0069ea:	230c      	movs	r3, #12
1a0069ec:	4620      	mov	r0, r4
1a0069ee:	6033      	str	r3, [r6, #0]
1a0069f0:	b003      	add	sp, #12
1a0069f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0069f6:	f44f 7300 	mov.w	r3, #512	; 0x200
1a0069fa:	2040      	movs	r0, #64	; 0x40
1a0069fc:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
1a006a00:	e773      	b.n	1a0068ea <_malloc_r+0x8a>
1a006a02:	687b      	ldr	r3, [r7, #4]
1a006a04:	1082      	asrs	r2, r0, #2
1a006a06:	2401      	movs	r4, #1
1a006a08:	4094      	lsls	r4, r2
1a006a0a:	429c      	cmp	r4, r3
1a006a0c:	d9b3      	bls.n	1a006976 <_malloc_r+0x116>
1a006a0e:	68bc      	ldr	r4, [r7, #8]
1a006a10:	6863      	ldr	r3, [r4, #4]
1a006a12:	f023 0903 	bic.w	r9, r3, #3
1a006a16:	45a9      	cmp	r9, r5
1a006a18:	d303      	bcc.n	1a006a22 <_malloc_r+0x1c2>
1a006a1a:	eba9 0305 	sub.w	r3, r9, r5
1a006a1e:	2b0f      	cmp	r3, #15
1a006a20:	dc7b      	bgt.n	1a006b1a <_malloc_r+0x2ba>
1a006a22:	4b5e      	ldr	r3, [pc, #376]	; (1a006b9c <_malloc_r+0x33c>)
1a006a24:	f8df a188 	ldr.w	sl, [pc, #392]	; 1a006bb0 <_malloc_r+0x350>
1a006a28:	681a      	ldr	r2, [r3, #0]
1a006a2a:	f8da 3000 	ldr.w	r3, [sl]
1a006a2e:	3301      	adds	r3, #1
1a006a30:	eb05 0802 	add.w	r8, r5, r2
1a006a34:	f000 8148 	beq.w	1a006cc8 <_malloc_r+0x468>
1a006a38:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
1a006a3c:	f108 080f 	add.w	r8, r8, #15
1a006a40:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
1a006a44:	f028 080f 	bic.w	r8, r8, #15
1a006a48:	4641      	mov	r1, r8
1a006a4a:	4630      	mov	r0, r6
1a006a4c:	f7fa feb4 	bl	1a0017b8 <_sbrk_r>
1a006a50:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a006a54:	4683      	mov	fp, r0
1a006a56:	f000 8104 	beq.w	1a006c62 <_malloc_r+0x402>
1a006a5a:	eb04 0009 	add.w	r0, r4, r9
1a006a5e:	4558      	cmp	r0, fp
1a006a60:	f200 80fd 	bhi.w	1a006c5e <_malloc_r+0x3fe>
1a006a64:	4a4e      	ldr	r2, [pc, #312]	; (1a006ba0 <_malloc_r+0x340>)
1a006a66:	6813      	ldr	r3, [r2, #0]
1a006a68:	4443      	add	r3, r8
1a006a6a:	6013      	str	r3, [r2, #0]
1a006a6c:	f000 814d 	beq.w	1a006d0a <_malloc_r+0x4aa>
1a006a70:	f8da 1000 	ldr.w	r1, [sl]
1a006a74:	3101      	adds	r1, #1
1a006a76:	bf1b      	ittet	ne
1a006a78:	ebab 0000 	subne.w	r0, fp, r0
1a006a7c:	181b      	addne	r3, r3, r0
1a006a7e:	f8ca b000 	streq.w	fp, [sl]
1a006a82:	6013      	strne	r3, [r2, #0]
1a006a84:	f01b 0307 	ands.w	r3, fp, #7
1a006a88:	f000 8134 	beq.w	1a006cf4 <_malloc_r+0x494>
1a006a8c:	f1c3 0108 	rsb	r1, r3, #8
1a006a90:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
1a006a94:	448b      	add	fp, r1
1a006a96:	3308      	adds	r3, #8
1a006a98:	44d8      	add	r8, fp
1a006a9a:	f3c8 080b 	ubfx	r8, r8, #0, #12
1a006a9e:	eba3 0808 	sub.w	r8, r3, r8
1a006aa2:	4641      	mov	r1, r8
1a006aa4:	4630      	mov	r0, r6
1a006aa6:	9201      	str	r2, [sp, #4]
1a006aa8:	f7fa fe86 	bl	1a0017b8 <_sbrk_r>
1a006aac:	1c43      	adds	r3, r0, #1
1a006aae:	9a01      	ldr	r2, [sp, #4]
1a006ab0:	f000 8146 	beq.w	1a006d40 <_malloc_r+0x4e0>
1a006ab4:	eba0 010b 	sub.w	r1, r0, fp
1a006ab8:	4441      	add	r1, r8
1a006aba:	f041 0101 	orr.w	r1, r1, #1
1a006abe:	6813      	ldr	r3, [r2, #0]
1a006ac0:	f8c7 b008 	str.w	fp, [r7, #8]
1a006ac4:	4443      	add	r3, r8
1a006ac6:	42bc      	cmp	r4, r7
1a006ac8:	f8cb 1004 	str.w	r1, [fp, #4]
1a006acc:	6013      	str	r3, [r2, #0]
1a006ace:	d015      	beq.n	1a006afc <_malloc_r+0x29c>
1a006ad0:	f1b9 0f0f 	cmp.w	r9, #15
1a006ad4:	f240 8130 	bls.w	1a006d38 <_malloc_r+0x4d8>
1a006ad8:	6860      	ldr	r0, [r4, #4]
1a006ada:	f1a9 010c 	sub.w	r1, r9, #12
1a006ade:	f021 0107 	bic.w	r1, r1, #7
1a006ae2:	f000 0001 	and.w	r0, r0, #1
1a006ae6:	eb04 0c01 	add.w	ip, r4, r1
1a006aea:	4308      	orrs	r0, r1
1a006aec:	f04f 0e05 	mov.w	lr, #5
1a006af0:	290f      	cmp	r1, #15
1a006af2:	6060      	str	r0, [r4, #4]
1a006af4:	e9cc ee01 	strd	lr, lr, [ip, #4]
1a006af8:	f200 813a 	bhi.w	1a006d70 <_malloc_r+0x510>
1a006afc:	4a29      	ldr	r2, [pc, #164]	; (1a006ba4 <_malloc_r+0x344>)
1a006afe:	482a      	ldr	r0, [pc, #168]	; (1a006ba8 <_malloc_r+0x348>)
1a006b00:	6811      	ldr	r1, [r2, #0]
1a006b02:	68bc      	ldr	r4, [r7, #8]
1a006b04:	428b      	cmp	r3, r1
1a006b06:	6801      	ldr	r1, [r0, #0]
1a006b08:	bf88      	it	hi
1a006b0a:	6013      	strhi	r3, [r2, #0]
1a006b0c:	6862      	ldr	r2, [r4, #4]
1a006b0e:	428b      	cmp	r3, r1
1a006b10:	f022 0203 	bic.w	r2, r2, #3
1a006b14:	bf88      	it	hi
1a006b16:	6003      	strhi	r3, [r0, #0]
1a006b18:	e0a7      	b.n	1a006c6a <_malloc_r+0x40a>
1a006b1a:	1962      	adds	r2, r4, r5
1a006b1c:	f043 0301 	orr.w	r3, r3, #1
1a006b20:	f045 0501 	orr.w	r5, r5, #1
1a006b24:	6065      	str	r5, [r4, #4]
1a006b26:	4630      	mov	r0, r6
1a006b28:	60ba      	str	r2, [r7, #8]
1a006b2a:	6053      	str	r3, [r2, #4]
1a006b2c:	f000 f9fa 	bl	1a006f24 <__malloc_unlock>
1a006b30:	3408      	adds	r4, #8
1a006b32:	4620      	mov	r0, r4
1a006b34:	b003      	add	sp, #12
1a006b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006b3a:	4423      	add	r3, r4
1a006b3c:	68e1      	ldr	r1, [r4, #12]
1a006b3e:	685a      	ldr	r2, [r3, #4]
1a006b40:	68a5      	ldr	r5, [r4, #8]
1a006b42:	f042 0201 	orr.w	r2, r2, #1
1a006b46:	60e9      	str	r1, [r5, #12]
1a006b48:	4630      	mov	r0, r6
1a006b4a:	608d      	str	r5, [r1, #8]
1a006b4c:	605a      	str	r2, [r3, #4]
1a006b4e:	f000 f9e9 	bl	1a006f24 <__malloc_unlock>
1a006b52:	3408      	adds	r4, #8
1a006b54:	4620      	mov	r0, r4
1a006b56:	b003      	add	sp, #12
1a006b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006b5c:	68dc      	ldr	r4, [r3, #12]
1a006b5e:	42a3      	cmp	r3, r4
1a006b60:	bf08      	it	eq
1a006b62:	3002      	addeq	r0, #2
1a006b64:	f43f aed6 	beq.w	1a006914 <_malloc_r+0xb4>
1a006b68:	e692      	b.n	1a006890 <_malloc_r+0x30>
1a006b6a:	2b14      	cmp	r3, #20
1a006b6c:	d971      	bls.n	1a006c52 <_malloc_r+0x3f2>
1a006b6e:	2b54      	cmp	r3, #84	; 0x54
1a006b70:	f200 80ad 	bhi.w	1a006cce <_malloc_r+0x46e>
1a006b74:	0b2b      	lsrs	r3, r5, #12
1a006b76:	f103 006f 	add.w	r0, r3, #111	; 0x6f
1a006b7a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
1a006b7e:	00c3      	lsls	r3, r0, #3
1a006b80:	e6b3      	b.n	1a0068ea <_malloc_r+0x8a>
1a006b82:	4423      	add	r3, r4
1a006b84:	4630      	mov	r0, r6
1a006b86:	685a      	ldr	r2, [r3, #4]
1a006b88:	f042 0201 	orr.w	r2, r2, #1
1a006b8c:	605a      	str	r2, [r3, #4]
1a006b8e:	3408      	adds	r4, #8
1a006b90:	f000 f9c8 	bl	1a006f24 <__malloc_unlock>
1a006b94:	e68c      	b.n	1a0068b0 <_malloc_r+0x50>
1a006b96:	bf00      	nop
1a006b98:	100004f8 	.word	0x100004f8
1a006b9c:	10000ae0 	.word	0x10000ae0
1a006ba0:	10000ab0 	.word	0x10000ab0
1a006ba4:	10000ad8 	.word	0x10000ad8
1a006ba8:	10000adc 	.word	0x10000adc
1a006bac:	10000500 	.word	0x10000500
1a006bb0:	10000900 	.word	0x10000900
1a006bb4:	1961      	adds	r1, r4, r5
1a006bb6:	f045 0e01 	orr.w	lr, r5, #1
1a006bba:	f042 0501 	orr.w	r5, r2, #1
1a006bbe:	f8c4 e004 	str.w	lr, [r4, #4]
1a006bc2:	4630      	mov	r0, r6
1a006bc4:	e9c7 1104 	strd	r1, r1, [r7, #16]
1a006bc8:	e9c1 cc02 	strd	ip, ip, [r1, #8]
1a006bcc:	604d      	str	r5, [r1, #4]
1a006bce:	50e2      	str	r2, [r4, r3]
1a006bd0:	f000 f9a8 	bl	1a006f24 <__malloc_unlock>
1a006bd4:	3408      	adds	r4, #8
1a006bd6:	e66b      	b.n	1a0068b0 <_malloc_r+0x50>
1a006bd8:	08e8      	lsrs	r0, r5, #3
1a006bda:	f105 0308 	add.w	r3, r5, #8
1a006bde:	e64f      	b.n	1a006880 <_malloc_r+0x20>
1a006be0:	f108 0801 	add.w	r8, r8, #1
1a006be4:	f018 0f03 	tst.w	r8, #3
1a006be8:	f10e 0e08 	add.w	lr, lr, #8
1a006bec:	f47f aed0 	bne.w	1a006990 <_malloc_r+0x130>
1a006bf0:	e052      	b.n	1a006c98 <_malloc_r+0x438>
1a006bf2:	4419      	add	r1, r3
1a006bf4:	461c      	mov	r4, r3
1a006bf6:	684a      	ldr	r2, [r1, #4]
1a006bf8:	68db      	ldr	r3, [r3, #12]
1a006bfa:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a006bfe:	f042 0201 	orr.w	r2, r2, #1
1a006c02:	604a      	str	r2, [r1, #4]
1a006c04:	4630      	mov	r0, r6
1a006c06:	60eb      	str	r3, [r5, #12]
1a006c08:	609d      	str	r5, [r3, #8]
1a006c0a:	f000 f98b 	bl	1a006f24 <__malloc_unlock>
1a006c0e:	e64f      	b.n	1a0068b0 <_malloc_r+0x50>
1a006c10:	0a5a      	lsrs	r2, r3, #9
1a006c12:	2a04      	cmp	r2, #4
1a006c14:	d935      	bls.n	1a006c82 <_malloc_r+0x422>
1a006c16:	2a14      	cmp	r2, #20
1a006c18:	d86f      	bhi.n	1a006cfa <_malloc_r+0x49a>
1a006c1a:	f102 015c 	add.w	r1, r2, #92	; 0x5c
1a006c1e:	00c9      	lsls	r1, r1, #3
1a006c20:	325b      	adds	r2, #91	; 0x5b
1a006c22:	eb07 0e01 	add.w	lr, r7, r1
1a006c26:	5879      	ldr	r1, [r7, r1]
1a006c28:	f1ae 0e08 	sub.w	lr, lr, #8
1a006c2c:	458e      	cmp	lr, r1
1a006c2e:	d058      	beq.n	1a006ce2 <_malloc_r+0x482>
1a006c30:	684a      	ldr	r2, [r1, #4]
1a006c32:	f022 0203 	bic.w	r2, r2, #3
1a006c36:	429a      	cmp	r2, r3
1a006c38:	d902      	bls.n	1a006c40 <_malloc_r+0x3e0>
1a006c3a:	6889      	ldr	r1, [r1, #8]
1a006c3c:	458e      	cmp	lr, r1
1a006c3e:	d1f7      	bne.n	1a006c30 <_malloc_r+0x3d0>
1a006c40:	f8d1 e00c 	ldr.w	lr, [r1, #12]
1a006c44:	687b      	ldr	r3, [r7, #4]
1a006c46:	e9c4 1e02 	strd	r1, lr, [r4, #8]
1a006c4a:	f8ce 4008 	str.w	r4, [lr, #8]
1a006c4e:	60cc      	str	r4, [r1, #12]
1a006c50:	e68c      	b.n	1a00696c <_malloc_r+0x10c>
1a006c52:	f103 005c 	add.w	r0, r3, #92	; 0x5c
1a006c56:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
1a006c5a:	00c3      	lsls	r3, r0, #3
1a006c5c:	e645      	b.n	1a0068ea <_malloc_r+0x8a>
1a006c5e:	42bc      	cmp	r4, r7
1a006c60:	d072      	beq.n	1a006d48 <_malloc_r+0x4e8>
1a006c62:	68bc      	ldr	r4, [r7, #8]
1a006c64:	6862      	ldr	r2, [r4, #4]
1a006c66:	f022 0203 	bic.w	r2, r2, #3
1a006c6a:	4295      	cmp	r5, r2
1a006c6c:	eba2 0305 	sub.w	r3, r2, r5
1a006c70:	d802      	bhi.n	1a006c78 <_malloc_r+0x418>
1a006c72:	2b0f      	cmp	r3, #15
1a006c74:	f73f af51 	bgt.w	1a006b1a <_malloc_r+0x2ba>
1a006c78:	4630      	mov	r0, r6
1a006c7a:	f000 f953 	bl	1a006f24 <__malloc_unlock>
1a006c7e:	2400      	movs	r4, #0
1a006c80:	e616      	b.n	1a0068b0 <_malloc_r+0x50>
1a006c82:	099a      	lsrs	r2, r3, #6
1a006c84:	f102 0139 	add.w	r1, r2, #57	; 0x39
1a006c88:	00c9      	lsls	r1, r1, #3
1a006c8a:	3238      	adds	r2, #56	; 0x38
1a006c8c:	e7c9      	b.n	1a006c22 <_malloc_r+0x3c2>
1a006c8e:	f8d9 9000 	ldr.w	r9, [r9]
1a006c92:	4599      	cmp	r9, r3
1a006c94:	f040 8083 	bne.w	1a006d9e <_malloc_r+0x53e>
1a006c98:	f010 0f03 	tst.w	r0, #3
1a006c9c:	f1a9 0308 	sub.w	r3, r9, #8
1a006ca0:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
1a006ca4:	d1f3      	bne.n	1a006c8e <_malloc_r+0x42e>
1a006ca6:	687b      	ldr	r3, [r7, #4]
1a006ca8:	ea23 0304 	bic.w	r3, r3, r4
1a006cac:	607b      	str	r3, [r7, #4]
1a006cae:	0064      	lsls	r4, r4, #1
1a006cb0:	429c      	cmp	r4, r3
1a006cb2:	f63f aeac 	bhi.w	1a006a0e <_malloc_r+0x1ae>
1a006cb6:	b91c      	cbnz	r4, 1a006cc0 <_malloc_r+0x460>
1a006cb8:	e6a9      	b.n	1a006a0e <_malloc_r+0x1ae>
1a006cba:	0064      	lsls	r4, r4, #1
1a006cbc:	f108 0804 	add.w	r8, r8, #4
1a006cc0:	421c      	tst	r4, r3
1a006cc2:	d0fa      	beq.n	1a006cba <_malloc_r+0x45a>
1a006cc4:	4640      	mov	r0, r8
1a006cc6:	e65f      	b.n	1a006988 <_malloc_r+0x128>
1a006cc8:	f108 0810 	add.w	r8, r8, #16
1a006ccc:	e6bc      	b.n	1a006a48 <_malloc_r+0x1e8>
1a006cce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a006cd2:	d826      	bhi.n	1a006d22 <_malloc_r+0x4c2>
1a006cd4:	0beb      	lsrs	r3, r5, #15
1a006cd6:	f103 0078 	add.w	r0, r3, #120	; 0x78
1a006cda:	f103 0c77 	add.w	ip, r3, #119	; 0x77
1a006cde:	00c3      	lsls	r3, r0, #3
1a006ce0:	e603      	b.n	1a0068ea <_malloc_r+0x8a>
1a006ce2:	687b      	ldr	r3, [r7, #4]
1a006ce4:	1092      	asrs	r2, r2, #2
1a006ce6:	f04f 0801 	mov.w	r8, #1
1a006cea:	fa08 f202 	lsl.w	r2, r8, r2
1a006cee:	4313      	orrs	r3, r2
1a006cf0:	607b      	str	r3, [r7, #4]
1a006cf2:	e7a8      	b.n	1a006c46 <_malloc_r+0x3e6>
1a006cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
1a006cf8:	e6ce      	b.n	1a006a98 <_malloc_r+0x238>
1a006cfa:	2a54      	cmp	r2, #84	; 0x54
1a006cfc:	d829      	bhi.n	1a006d52 <_malloc_r+0x4f2>
1a006cfe:	0b1a      	lsrs	r2, r3, #12
1a006d00:	f102 016f 	add.w	r1, r2, #111	; 0x6f
1a006d04:	00c9      	lsls	r1, r1, #3
1a006d06:	326e      	adds	r2, #110	; 0x6e
1a006d08:	e78b      	b.n	1a006c22 <_malloc_r+0x3c2>
1a006d0a:	f3c0 010b 	ubfx	r1, r0, #0, #12
1a006d0e:	2900      	cmp	r1, #0
1a006d10:	f47f aeae 	bne.w	1a006a70 <_malloc_r+0x210>
1a006d14:	eb09 0208 	add.w	r2, r9, r8
1a006d18:	68b9      	ldr	r1, [r7, #8]
1a006d1a:	f042 0201 	orr.w	r2, r2, #1
1a006d1e:	604a      	str	r2, [r1, #4]
1a006d20:	e6ec      	b.n	1a006afc <_malloc_r+0x29c>
1a006d22:	f240 5254 	movw	r2, #1364	; 0x554
1a006d26:	4293      	cmp	r3, r2
1a006d28:	d81c      	bhi.n	1a006d64 <_malloc_r+0x504>
1a006d2a:	0cab      	lsrs	r3, r5, #18
1a006d2c:	f103 007d 	add.w	r0, r3, #125	; 0x7d
1a006d30:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
1a006d34:	00c3      	lsls	r3, r0, #3
1a006d36:	e5d8      	b.n	1a0068ea <_malloc_r+0x8a>
1a006d38:	2301      	movs	r3, #1
1a006d3a:	f8cb 3004 	str.w	r3, [fp, #4]
1a006d3e:	e79b      	b.n	1a006c78 <_malloc_r+0x418>
1a006d40:	2101      	movs	r1, #1
1a006d42:	f04f 0800 	mov.w	r8, #0
1a006d46:	e6ba      	b.n	1a006abe <_malloc_r+0x25e>
1a006d48:	4a16      	ldr	r2, [pc, #88]	; (1a006da4 <_malloc_r+0x544>)
1a006d4a:	6813      	ldr	r3, [r2, #0]
1a006d4c:	4443      	add	r3, r8
1a006d4e:	6013      	str	r3, [r2, #0]
1a006d50:	e68e      	b.n	1a006a70 <_malloc_r+0x210>
1a006d52:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a006d56:	d814      	bhi.n	1a006d82 <_malloc_r+0x522>
1a006d58:	0bda      	lsrs	r2, r3, #15
1a006d5a:	f102 0178 	add.w	r1, r2, #120	; 0x78
1a006d5e:	00c9      	lsls	r1, r1, #3
1a006d60:	3277      	adds	r2, #119	; 0x77
1a006d62:	e75e      	b.n	1a006c22 <_malloc_r+0x3c2>
1a006d64:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
1a006d68:	207f      	movs	r0, #127	; 0x7f
1a006d6a:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
1a006d6e:	e5bc      	b.n	1a0068ea <_malloc_r+0x8a>
1a006d70:	f104 0108 	add.w	r1, r4, #8
1a006d74:	4630      	mov	r0, r6
1a006d76:	9201      	str	r2, [sp, #4]
1a006d78:	f7ff fa48 	bl	1a00620c <_free_r>
1a006d7c:	9a01      	ldr	r2, [sp, #4]
1a006d7e:	6813      	ldr	r3, [r2, #0]
1a006d80:	e6bc      	b.n	1a006afc <_malloc_r+0x29c>
1a006d82:	f240 5154 	movw	r1, #1364	; 0x554
1a006d86:	428a      	cmp	r2, r1
1a006d88:	d805      	bhi.n	1a006d96 <_malloc_r+0x536>
1a006d8a:	0c9a      	lsrs	r2, r3, #18
1a006d8c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
1a006d90:	00c9      	lsls	r1, r1, #3
1a006d92:	327c      	adds	r2, #124	; 0x7c
1a006d94:	e745      	b.n	1a006c22 <_malloc_r+0x3c2>
1a006d96:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
1a006d9a:	227e      	movs	r2, #126	; 0x7e
1a006d9c:	e741      	b.n	1a006c22 <_malloc_r+0x3c2>
1a006d9e:	687b      	ldr	r3, [r7, #4]
1a006da0:	e785      	b.n	1a006cae <_malloc_r+0x44e>
1a006da2:	bf00      	nop
1a006da4:	10000ab0 	.word	0x10000ab0
1a006da8:	ffffffff 	.word	0xffffffff
1a006dac:	ffffffff 	.word	0xffffffff

1a006db0 <memchr>:
1a006db0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a006db4:	2a10      	cmp	r2, #16
1a006db6:	db2b      	blt.n	1a006e10 <memchr+0x60>
1a006db8:	f010 0f07 	tst.w	r0, #7
1a006dbc:	d008      	beq.n	1a006dd0 <memchr+0x20>
1a006dbe:	f810 3b01 	ldrb.w	r3, [r0], #1
1a006dc2:	3a01      	subs	r2, #1
1a006dc4:	428b      	cmp	r3, r1
1a006dc6:	d02d      	beq.n	1a006e24 <memchr+0x74>
1a006dc8:	f010 0f07 	tst.w	r0, #7
1a006dcc:	b342      	cbz	r2, 1a006e20 <memchr+0x70>
1a006dce:	d1f6      	bne.n	1a006dbe <memchr+0xe>
1a006dd0:	b4f0      	push	{r4, r5, r6, r7}
1a006dd2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a006dd6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a006dda:	f022 0407 	bic.w	r4, r2, #7
1a006dde:	f07f 0700 	mvns.w	r7, #0
1a006de2:	2300      	movs	r3, #0
1a006de4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a006de8:	3c08      	subs	r4, #8
1a006dea:	ea85 0501 	eor.w	r5, r5, r1
1a006dee:	ea86 0601 	eor.w	r6, r6, r1
1a006df2:	fa85 f547 	uadd8	r5, r5, r7
1a006df6:	faa3 f587 	sel	r5, r3, r7
1a006dfa:	fa86 f647 	uadd8	r6, r6, r7
1a006dfe:	faa5 f687 	sel	r6, r5, r7
1a006e02:	b98e      	cbnz	r6, 1a006e28 <memchr+0x78>
1a006e04:	d1ee      	bne.n	1a006de4 <memchr+0x34>
1a006e06:	bcf0      	pop	{r4, r5, r6, r7}
1a006e08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a006e0c:	f002 0207 	and.w	r2, r2, #7
1a006e10:	b132      	cbz	r2, 1a006e20 <memchr+0x70>
1a006e12:	f810 3b01 	ldrb.w	r3, [r0], #1
1a006e16:	3a01      	subs	r2, #1
1a006e18:	ea83 0301 	eor.w	r3, r3, r1
1a006e1c:	b113      	cbz	r3, 1a006e24 <memchr+0x74>
1a006e1e:	d1f8      	bne.n	1a006e12 <memchr+0x62>
1a006e20:	2000      	movs	r0, #0
1a006e22:	4770      	bx	lr
1a006e24:	3801      	subs	r0, #1
1a006e26:	4770      	bx	lr
1a006e28:	2d00      	cmp	r5, #0
1a006e2a:	bf06      	itte	eq
1a006e2c:	4635      	moveq	r5, r6
1a006e2e:	3803      	subeq	r0, #3
1a006e30:	3807      	subne	r0, #7
1a006e32:	f015 0f01 	tst.w	r5, #1
1a006e36:	d107      	bne.n	1a006e48 <memchr+0x98>
1a006e38:	3001      	adds	r0, #1
1a006e3a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a006e3e:	bf02      	ittt	eq
1a006e40:	3001      	addeq	r0, #1
1a006e42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a006e46:	3001      	addeq	r0, #1
1a006e48:	bcf0      	pop	{r4, r5, r6, r7}
1a006e4a:	3801      	subs	r0, #1
1a006e4c:	4770      	bx	lr
1a006e4e:	bf00      	nop

1a006e50 <memmove>:
1a006e50:	4288      	cmp	r0, r1
1a006e52:	b4f0      	push	{r4, r5, r6, r7}
1a006e54:	d90d      	bls.n	1a006e72 <memmove+0x22>
1a006e56:	188b      	adds	r3, r1, r2
1a006e58:	4283      	cmp	r3, r0
1a006e5a:	d90a      	bls.n	1a006e72 <memmove+0x22>
1a006e5c:	1884      	adds	r4, r0, r2
1a006e5e:	b132      	cbz	r2, 1a006e6e <memmove+0x1e>
1a006e60:	4622      	mov	r2, r4
1a006e62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a006e66:	f802 4d01 	strb.w	r4, [r2, #-1]!
1a006e6a:	4299      	cmp	r1, r3
1a006e6c:	d1f9      	bne.n	1a006e62 <memmove+0x12>
1a006e6e:	bcf0      	pop	{r4, r5, r6, r7}
1a006e70:	4770      	bx	lr
1a006e72:	2a0f      	cmp	r2, #15
1a006e74:	d949      	bls.n	1a006f0a <memmove+0xba>
1a006e76:	ea40 0301 	orr.w	r3, r0, r1
1a006e7a:	079b      	lsls	r3, r3, #30
1a006e7c:	d147      	bne.n	1a006f0e <memmove+0xbe>
1a006e7e:	f1a2 0310 	sub.w	r3, r2, #16
1a006e82:	091b      	lsrs	r3, r3, #4
1a006e84:	f101 0720 	add.w	r7, r1, #32
1a006e88:	eb07 1703 	add.w	r7, r7, r3, lsl #4
1a006e8c:	f101 0410 	add.w	r4, r1, #16
1a006e90:	f100 0510 	add.w	r5, r0, #16
1a006e94:	f854 6c10 	ldr.w	r6, [r4, #-16]
1a006e98:	f845 6c10 	str.w	r6, [r5, #-16]
1a006e9c:	f854 6c0c 	ldr.w	r6, [r4, #-12]
1a006ea0:	f845 6c0c 	str.w	r6, [r5, #-12]
1a006ea4:	f854 6c08 	ldr.w	r6, [r4, #-8]
1a006ea8:	f845 6c08 	str.w	r6, [r5, #-8]
1a006eac:	f854 6c04 	ldr.w	r6, [r4, #-4]
1a006eb0:	f845 6c04 	str.w	r6, [r5, #-4]
1a006eb4:	3410      	adds	r4, #16
1a006eb6:	42bc      	cmp	r4, r7
1a006eb8:	f105 0510 	add.w	r5, r5, #16
1a006ebc:	d1ea      	bne.n	1a006e94 <memmove+0x44>
1a006ebe:	3301      	adds	r3, #1
1a006ec0:	f002 050f 	and.w	r5, r2, #15
1a006ec4:	011b      	lsls	r3, r3, #4
1a006ec6:	2d03      	cmp	r5, #3
1a006ec8:	4419      	add	r1, r3
1a006eca:	4403      	add	r3, r0
1a006ecc:	d921      	bls.n	1a006f12 <memmove+0xc2>
1a006ece:	1f1f      	subs	r7, r3, #4
1a006ed0:	460e      	mov	r6, r1
1a006ed2:	462c      	mov	r4, r5
1a006ed4:	3c04      	subs	r4, #4
1a006ed6:	f856 cb04 	ldr.w	ip, [r6], #4
1a006eda:	f847 cf04 	str.w	ip, [r7, #4]!
1a006ede:	2c03      	cmp	r4, #3
1a006ee0:	d8f8      	bhi.n	1a006ed4 <memmove+0x84>
1a006ee2:	1f2c      	subs	r4, r5, #4
1a006ee4:	f024 0403 	bic.w	r4, r4, #3
1a006ee8:	3404      	adds	r4, #4
1a006eea:	4423      	add	r3, r4
1a006eec:	4421      	add	r1, r4
1a006eee:	f002 0203 	and.w	r2, r2, #3
1a006ef2:	2a00      	cmp	r2, #0
1a006ef4:	d0bb      	beq.n	1a006e6e <memmove+0x1e>
1a006ef6:	3b01      	subs	r3, #1
1a006ef8:	440a      	add	r2, r1
1a006efa:	f811 4b01 	ldrb.w	r4, [r1], #1
1a006efe:	f803 4f01 	strb.w	r4, [r3, #1]!
1a006f02:	4291      	cmp	r1, r2
1a006f04:	d1f9      	bne.n	1a006efa <memmove+0xaa>
1a006f06:	bcf0      	pop	{r4, r5, r6, r7}
1a006f08:	4770      	bx	lr
1a006f0a:	4603      	mov	r3, r0
1a006f0c:	e7f1      	b.n	1a006ef2 <memmove+0xa2>
1a006f0e:	4603      	mov	r3, r0
1a006f10:	e7f1      	b.n	1a006ef6 <memmove+0xa6>
1a006f12:	462a      	mov	r2, r5
1a006f14:	e7ed      	b.n	1a006ef2 <memmove+0xa2>
1a006f16:	bf00      	nop

1a006f18 <__malloc_lock>:
1a006f18:	4801      	ldr	r0, [pc, #4]	; (1a006f20 <__malloc_lock+0x8>)
1a006f1a:	f7ff bc25 	b.w	1a006768 <__retarget_lock_acquire_recursive>
1a006f1e:	bf00      	nop
1a006f20:	10000b0c 	.word	0x10000b0c

1a006f24 <__malloc_unlock>:
1a006f24:	4801      	ldr	r0, [pc, #4]	; (1a006f2c <__malloc_unlock+0x8>)
1a006f26:	f7ff bc21 	b.w	1a00676c <__retarget_lock_release_recursive>
1a006f2a:	bf00      	nop
1a006f2c:	10000b0c 	.word	0x10000b0c

1a006f30 <_Balloc>:
1a006f30:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a006f32:	b570      	push	{r4, r5, r6, lr}
1a006f34:	4605      	mov	r5, r0
1a006f36:	460c      	mov	r4, r1
1a006f38:	b14b      	cbz	r3, 1a006f4e <_Balloc+0x1e>
1a006f3a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a006f3e:	b180      	cbz	r0, 1a006f62 <_Balloc+0x32>
1a006f40:	6802      	ldr	r2, [r0, #0]
1a006f42:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a006f46:	2300      	movs	r3, #0
1a006f48:	e9c0 3303 	strd	r3, r3, [r0, #12]
1a006f4c:	bd70      	pop	{r4, r5, r6, pc}
1a006f4e:	2221      	movs	r2, #33	; 0x21
1a006f50:	2104      	movs	r1, #4
1a006f52:	f000 fded 	bl	1a007b30 <_calloc_r>
1a006f56:	4603      	mov	r3, r0
1a006f58:	64e8      	str	r0, [r5, #76]	; 0x4c
1a006f5a:	2800      	cmp	r0, #0
1a006f5c:	d1ed      	bne.n	1a006f3a <_Balloc+0xa>
1a006f5e:	2000      	movs	r0, #0
1a006f60:	bd70      	pop	{r4, r5, r6, pc}
1a006f62:	2101      	movs	r1, #1
1a006f64:	fa01 f604 	lsl.w	r6, r1, r4
1a006f68:	1d72      	adds	r2, r6, #5
1a006f6a:	4628      	mov	r0, r5
1a006f6c:	0092      	lsls	r2, r2, #2
1a006f6e:	f000 fddf 	bl	1a007b30 <_calloc_r>
1a006f72:	2800      	cmp	r0, #0
1a006f74:	d0f3      	beq.n	1a006f5e <_Balloc+0x2e>
1a006f76:	e9c0 4601 	strd	r4, r6, [r0, #4]
1a006f7a:	e7e4      	b.n	1a006f46 <_Balloc+0x16>

1a006f7c <_Bfree>:
1a006f7c:	b131      	cbz	r1, 1a006f8c <_Bfree+0x10>
1a006f7e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a006f80:	684a      	ldr	r2, [r1, #4]
1a006f82:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a006f86:	6008      	str	r0, [r1, #0]
1a006f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a006f8c:	4770      	bx	lr
1a006f8e:	bf00      	nop

1a006f90 <__multadd>:
1a006f90:	b5f0      	push	{r4, r5, r6, r7, lr}
1a006f92:	690c      	ldr	r4, [r1, #16]
1a006f94:	b083      	sub	sp, #12
1a006f96:	460d      	mov	r5, r1
1a006f98:	4606      	mov	r6, r0
1a006f9a:	f101 0c14 	add.w	ip, r1, #20
1a006f9e:	2700      	movs	r7, #0
1a006fa0:	f8dc 0000 	ldr.w	r0, [ip]
1a006fa4:	b281      	uxth	r1, r0
1a006fa6:	fb02 3301 	mla	r3, r2, r1, r3
1a006faa:	0c01      	lsrs	r1, r0, #16
1a006fac:	0c18      	lsrs	r0, r3, #16
1a006fae:	fb02 0101 	mla	r1, r2, r1, r0
1a006fb2:	b29b      	uxth	r3, r3
1a006fb4:	3701      	adds	r7, #1
1a006fb6:	eb03 4301 	add.w	r3, r3, r1, lsl #16
1a006fba:	42bc      	cmp	r4, r7
1a006fbc:	f84c 3b04 	str.w	r3, [ip], #4
1a006fc0:	ea4f 4311 	mov.w	r3, r1, lsr #16
1a006fc4:	dcec      	bgt.n	1a006fa0 <__multadd+0x10>
1a006fc6:	b13b      	cbz	r3, 1a006fd8 <__multadd+0x48>
1a006fc8:	68aa      	ldr	r2, [r5, #8]
1a006fca:	42a2      	cmp	r2, r4
1a006fcc:	dd07      	ble.n	1a006fde <__multadd+0x4e>
1a006fce:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a006fd2:	3401      	adds	r4, #1
1a006fd4:	6153      	str	r3, [r2, #20]
1a006fd6:	612c      	str	r4, [r5, #16]
1a006fd8:	4628      	mov	r0, r5
1a006fda:	b003      	add	sp, #12
1a006fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a006fde:	6869      	ldr	r1, [r5, #4]
1a006fe0:	9301      	str	r3, [sp, #4]
1a006fe2:	3101      	adds	r1, #1
1a006fe4:	4630      	mov	r0, r6
1a006fe6:	f7ff ffa3 	bl	1a006f30 <_Balloc>
1a006fea:	692a      	ldr	r2, [r5, #16]
1a006fec:	3202      	adds	r2, #2
1a006fee:	f105 010c 	add.w	r1, r5, #12
1a006ff2:	4607      	mov	r7, r0
1a006ff4:	0092      	lsls	r2, r2, #2
1a006ff6:	300c      	adds	r0, #12
1a006ff8:	f7fc f826 	bl	1a003048 <memcpy>
1a006ffc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a006ffe:	6869      	ldr	r1, [r5, #4]
1a007000:	9b01      	ldr	r3, [sp, #4]
1a007002:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a007006:	6028      	str	r0, [r5, #0]
1a007008:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a00700c:	463d      	mov	r5, r7
1a00700e:	e7de      	b.n	1a006fce <__multadd+0x3e>

1a007010 <__hi0bits>:
1a007010:	0c02      	lsrs	r2, r0, #16
1a007012:	0412      	lsls	r2, r2, #16
1a007014:	4603      	mov	r3, r0
1a007016:	b9c2      	cbnz	r2, 1a00704a <__hi0bits+0x3a>
1a007018:	0403      	lsls	r3, r0, #16
1a00701a:	2010      	movs	r0, #16
1a00701c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
1a007020:	bf04      	itt	eq
1a007022:	021b      	lsleq	r3, r3, #8
1a007024:	3008      	addeq	r0, #8
1a007026:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
1a00702a:	bf04      	itt	eq
1a00702c:	011b      	lsleq	r3, r3, #4
1a00702e:	3004      	addeq	r0, #4
1a007030:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
1a007034:	bf04      	itt	eq
1a007036:	009b      	lsleq	r3, r3, #2
1a007038:	3002      	addeq	r0, #2
1a00703a:	2b00      	cmp	r3, #0
1a00703c:	db04      	blt.n	1a007048 <__hi0bits+0x38>
1a00703e:	005b      	lsls	r3, r3, #1
1a007040:	d501      	bpl.n	1a007046 <__hi0bits+0x36>
1a007042:	3001      	adds	r0, #1
1a007044:	4770      	bx	lr
1a007046:	2020      	movs	r0, #32
1a007048:	4770      	bx	lr
1a00704a:	2000      	movs	r0, #0
1a00704c:	e7e6      	b.n	1a00701c <__hi0bits+0xc>
1a00704e:	bf00      	nop

1a007050 <__lo0bits>:
1a007050:	6803      	ldr	r3, [r0, #0]
1a007052:	f013 0207 	ands.w	r2, r3, #7
1a007056:	4601      	mov	r1, r0
1a007058:	d007      	beq.n	1a00706a <__lo0bits+0x1a>
1a00705a:	07da      	lsls	r2, r3, #31
1a00705c:	d41f      	bmi.n	1a00709e <__lo0bits+0x4e>
1a00705e:	0798      	lsls	r0, r3, #30
1a007060:	d51f      	bpl.n	1a0070a2 <__lo0bits+0x52>
1a007062:	085b      	lsrs	r3, r3, #1
1a007064:	600b      	str	r3, [r1, #0]
1a007066:	2001      	movs	r0, #1
1a007068:	4770      	bx	lr
1a00706a:	b298      	uxth	r0, r3
1a00706c:	b1a0      	cbz	r0, 1a007098 <__lo0bits+0x48>
1a00706e:	4610      	mov	r0, r2
1a007070:	f013 0fff 	tst.w	r3, #255	; 0xff
1a007074:	bf04      	itt	eq
1a007076:	0a1b      	lsreq	r3, r3, #8
1a007078:	3008      	addeq	r0, #8
1a00707a:	071a      	lsls	r2, r3, #28
1a00707c:	bf04      	itt	eq
1a00707e:	091b      	lsreq	r3, r3, #4
1a007080:	3004      	addeq	r0, #4
1a007082:	079a      	lsls	r2, r3, #30
1a007084:	bf04      	itt	eq
1a007086:	089b      	lsreq	r3, r3, #2
1a007088:	3002      	addeq	r0, #2
1a00708a:	07da      	lsls	r2, r3, #31
1a00708c:	d402      	bmi.n	1a007094 <__lo0bits+0x44>
1a00708e:	085b      	lsrs	r3, r3, #1
1a007090:	d00b      	beq.n	1a0070aa <__lo0bits+0x5a>
1a007092:	3001      	adds	r0, #1
1a007094:	600b      	str	r3, [r1, #0]
1a007096:	4770      	bx	lr
1a007098:	0c1b      	lsrs	r3, r3, #16
1a00709a:	2010      	movs	r0, #16
1a00709c:	e7e8      	b.n	1a007070 <__lo0bits+0x20>
1a00709e:	2000      	movs	r0, #0
1a0070a0:	4770      	bx	lr
1a0070a2:	089b      	lsrs	r3, r3, #2
1a0070a4:	600b      	str	r3, [r1, #0]
1a0070a6:	2002      	movs	r0, #2
1a0070a8:	4770      	bx	lr
1a0070aa:	2020      	movs	r0, #32
1a0070ac:	4770      	bx	lr
1a0070ae:	bf00      	nop

1a0070b0 <__i2b>:
1a0070b0:	b510      	push	{r4, lr}
1a0070b2:	460c      	mov	r4, r1
1a0070b4:	2101      	movs	r1, #1
1a0070b6:	f7ff ff3b 	bl	1a006f30 <_Balloc>
1a0070ba:	2201      	movs	r2, #1
1a0070bc:	e9c0 2404 	strd	r2, r4, [r0, #16]
1a0070c0:	bd10      	pop	{r4, pc}
1a0070c2:	bf00      	nop

1a0070c4 <__multiply>:
1a0070c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0070c8:	690e      	ldr	r6, [r1, #16]
1a0070ca:	6914      	ldr	r4, [r2, #16]
1a0070cc:	42a6      	cmp	r6, r4
1a0070ce:	b083      	sub	sp, #12
1a0070d0:	460f      	mov	r7, r1
1a0070d2:	4615      	mov	r5, r2
1a0070d4:	da04      	bge.n	1a0070e0 <__multiply+0x1c>
1a0070d6:	4632      	mov	r2, r6
1a0070d8:	462f      	mov	r7, r5
1a0070da:	4626      	mov	r6, r4
1a0070dc:	460d      	mov	r5, r1
1a0070de:	4614      	mov	r4, r2
1a0070e0:	e9d7 1301 	ldrd	r1, r3, [r7, #4]
1a0070e4:	eb06 0804 	add.w	r8, r6, r4
1a0070e8:	4543      	cmp	r3, r8
1a0070ea:	bfb8      	it	lt
1a0070ec:	3101      	addlt	r1, #1
1a0070ee:	f7ff ff1f 	bl	1a006f30 <_Balloc>
1a0070f2:	f100 0914 	add.w	r9, r0, #20
1a0070f6:	eb09 0e88 	add.w	lr, r9, r8, lsl #2
1a0070fa:	45f1      	cmp	r9, lr
1a0070fc:	9000      	str	r0, [sp, #0]
1a0070fe:	d205      	bcs.n	1a00710c <__multiply+0x48>
1a007100:	464b      	mov	r3, r9
1a007102:	2200      	movs	r2, #0
1a007104:	f843 2b04 	str.w	r2, [r3], #4
1a007108:	459e      	cmp	lr, r3
1a00710a:	d8fb      	bhi.n	1a007104 <__multiply+0x40>
1a00710c:	f105 0a14 	add.w	sl, r5, #20
1a007110:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
1a007114:	f107 0314 	add.w	r3, r7, #20
1a007118:	45a2      	cmp	sl, r4
1a00711a:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
1a00711e:	d261      	bcs.n	1a0071e4 <__multiply+0x120>
1a007120:	1b64      	subs	r4, r4, r5
1a007122:	3c15      	subs	r4, #21
1a007124:	f024 0403 	bic.w	r4, r4, #3
1a007128:	f8cd e004 	str.w	lr, [sp, #4]
1a00712c:	44a2      	add	sl, r4
1a00712e:	f105 0210 	add.w	r2, r5, #16
1a007132:	469e      	mov	lr, r3
1a007134:	e005      	b.n	1a007142 <__multiply+0x7e>
1a007136:	0c2d      	lsrs	r5, r5, #16
1a007138:	d12b      	bne.n	1a007192 <__multiply+0xce>
1a00713a:	4592      	cmp	sl, r2
1a00713c:	f109 0904 	add.w	r9, r9, #4
1a007140:	d04e      	beq.n	1a0071e0 <__multiply+0x11c>
1a007142:	f852 5f04 	ldr.w	r5, [r2, #4]!
1a007146:	fa1f fb85 	uxth.w	fp, r5
1a00714a:	f1bb 0f00 	cmp.w	fp, #0
1a00714e:	d0f2      	beq.n	1a007136 <__multiply+0x72>
1a007150:	4677      	mov	r7, lr
1a007152:	464e      	mov	r6, r9
1a007154:	2000      	movs	r0, #0
1a007156:	e000      	b.n	1a00715a <__multiply+0x96>
1a007158:	4626      	mov	r6, r4
1a00715a:	f857 1b04 	ldr.w	r1, [r7], #4
1a00715e:	6834      	ldr	r4, [r6, #0]
1a007160:	b28b      	uxth	r3, r1
1a007162:	b2a5      	uxth	r5, r4
1a007164:	0c09      	lsrs	r1, r1, #16
1a007166:	0c24      	lsrs	r4, r4, #16
1a007168:	fb0b 5303 	mla	r3, fp, r3, r5
1a00716c:	4403      	add	r3, r0
1a00716e:	fb0b 4001 	mla	r0, fp, r1, r4
1a007172:	eb00 4013 	add.w	r0, r0, r3, lsr #16
1a007176:	4634      	mov	r4, r6
1a007178:	b29b      	uxth	r3, r3
1a00717a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1a00717e:	45bc      	cmp	ip, r7
1a007180:	ea4f 4010 	mov.w	r0, r0, lsr #16
1a007184:	f844 3b04 	str.w	r3, [r4], #4
1a007188:	d8e6      	bhi.n	1a007158 <__multiply+0x94>
1a00718a:	6070      	str	r0, [r6, #4]
1a00718c:	6815      	ldr	r5, [r2, #0]
1a00718e:	0c2d      	lsrs	r5, r5, #16
1a007190:	d0d3      	beq.n	1a00713a <__multiply+0x76>
1a007192:	f8d9 3000 	ldr.w	r3, [r9]
1a007196:	4676      	mov	r6, lr
1a007198:	4618      	mov	r0, r3
1a00719a:	46cb      	mov	fp, r9
1a00719c:	2100      	movs	r1, #0
1a00719e:	e000      	b.n	1a0071a2 <__multiply+0xde>
1a0071a0:	46a3      	mov	fp, r4
1a0071a2:	8834      	ldrh	r4, [r6, #0]
1a0071a4:	0c00      	lsrs	r0, r0, #16
1a0071a6:	fb05 0004 	mla	r0, r5, r4, r0
1a0071aa:	4401      	add	r1, r0
1a0071ac:	b29b      	uxth	r3, r3
1a0071ae:	465c      	mov	r4, fp
1a0071b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0071b4:	f844 3b04 	str.w	r3, [r4], #4
1a0071b8:	f856 3b04 	ldr.w	r3, [r6], #4
1a0071bc:	f8db 0004 	ldr.w	r0, [fp, #4]
1a0071c0:	0c1b      	lsrs	r3, r3, #16
1a0071c2:	b287      	uxth	r7, r0
1a0071c4:	fb05 7303 	mla	r3, r5, r3, r7
1a0071c8:	eb03 4311 	add.w	r3, r3, r1, lsr #16
1a0071cc:	45b4      	cmp	ip, r6
1a0071ce:	ea4f 4113 	mov.w	r1, r3, lsr #16
1a0071d2:	d8e5      	bhi.n	1a0071a0 <__multiply+0xdc>
1a0071d4:	4592      	cmp	sl, r2
1a0071d6:	f8cb 3004 	str.w	r3, [fp, #4]
1a0071da:	f109 0904 	add.w	r9, r9, #4
1a0071de:	d1b0      	bne.n	1a007142 <__multiply+0x7e>
1a0071e0:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0071e4:	f1b8 0f00 	cmp.w	r8, #0
1a0071e8:	dd0b      	ble.n	1a007202 <__multiply+0x13e>
1a0071ea:	f85e 3c04 	ldr.w	r3, [lr, #-4]
1a0071ee:	f1ae 0e04 	sub.w	lr, lr, #4
1a0071f2:	b11b      	cbz	r3, 1a0071fc <__multiply+0x138>
1a0071f4:	e005      	b.n	1a007202 <__multiply+0x13e>
1a0071f6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
1a0071fa:	b913      	cbnz	r3, 1a007202 <__multiply+0x13e>
1a0071fc:	f1b8 0801 	subs.w	r8, r8, #1
1a007200:	d1f9      	bne.n	1a0071f6 <__multiply+0x132>
1a007202:	9800      	ldr	r0, [sp, #0]
1a007204:	f8c0 8010 	str.w	r8, [r0, #16]
1a007208:	b003      	add	sp, #12
1a00720a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00720e:	bf00      	nop

1a007210 <__pow5mult>:
1a007210:	f012 0303 	ands.w	r3, r2, #3
1a007214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a007218:	4614      	mov	r4, r2
1a00721a:	4607      	mov	r7, r0
1a00721c:	d12e      	bne.n	1a00727c <__pow5mult+0x6c>
1a00721e:	460d      	mov	r5, r1
1a007220:	10a4      	asrs	r4, r4, #2
1a007222:	d01c      	beq.n	1a00725e <__pow5mult+0x4e>
1a007224:	6cbe      	ldr	r6, [r7, #72]	; 0x48
1a007226:	b396      	cbz	r6, 1a00728e <__pow5mult+0x7e>
1a007228:	07e3      	lsls	r3, r4, #31
1a00722a:	f04f 0800 	mov.w	r8, #0
1a00722e:	d406      	bmi.n	1a00723e <__pow5mult+0x2e>
1a007230:	1064      	asrs	r4, r4, #1
1a007232:	d014      	beq.n	1a00725e <__pow5mult+0x4e>
1a007234:	6830      	ldr	r0, [r6, #0]
1a007236:	b1a8      	cbz	r0, 1a007264 <__pow5mult+0x54>
1a007238:	4606      	mov	r6, r0
1a00723a:	07e3      	lsls	r3, r4, #31
1a00723c:	d5f8      	bpl.n	1a007230 <__pow5mult+0x20>
1a00723e:	4632      	mov	r2, r6
1a007240:	4629      	mov	r1, r5
1a007242:	4638      	mov	r0, r7
1a007244:	f7ff ff3e 	bl	1a0070c4 <__multiply>
1a007248:	b1b5      	cbz	r5, 1a007278 <__pow5mult+0x68>
1a00724a:	686a      	ldr	r2, [r5, #4]
1a00724c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a00724e:	1064      	asrs	r4, r4, #1
1a007250:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a007254:	6029      	str	r1, [r5, #0]
1a007256:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
1a00725a:	4605      	mov	r5, r0
1a00725c:	d1ea      	bne.n	1a007234 <__pow5mult+0x24>
1a00725e:	4628      	mov	r0, r5
1a007260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a007264:	4632      	mov	r2, r6
1a007266:	4631      	mov	r1, r6
1a007268:	4638      	mov	r0, r7
1a00726a:	f7ff ff2b 	bl	1a0070c4 <__multiply>
1a00726e:	6030      	str	r0, [r6, #0]
1a007270:	f8c0 8000 	str.w	r8, [r0]
1a007274:	4606      	mov	r6, r0
1a007276:	e7e0      	b.n	1a00723a <__pow5mult+0x2a>
1a007278:	4605      	mov	r5, r0
1a00727a:	e7d9      	b.n	1a007230 <__pow5mult+0x20>
1a00727c:	3b01      	subs	r3, #1
1a00727e:	4a0b      	ldr	r2, [pc, #44]	; (1a0072ac <__pow5mult+0x9c>)
1a007280:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a007284:	2300      	movs	r3, #0
1a007286:	f7ff fe83 	bl	1a006f90 <__multadd>
1a00728a:	4605      	mov	r5, r0
1a00728c:	e7c8      	b.n	1a007220 <__pow5mult+0x10>
1a00728e:	2101      	movs	r1, #1
1a007290:	4638      	mov	r0, r7
1a007292:	f7ff fe4d 	bl	1a006f30 <_Balloc>
1a007296:	f240 2371 	movw	r3, #625	; 0x271
1a00729a:	6143      	str	r3, [r0, #20]
1a00729c:	2201      	movs	r2, #1
1a00729e:	2300      	movs	r3, #0
1a0072a0:	6102      	str	r2, [r0, #16]
1a0072a2:	4606      	mov	r6, r0
1a0072a4:	64b8      	str	r0, [r7, #72]	; 0x48
1a0072a6:	6003      	str	r3, [r0, #0]
1a0072a8:	e7be      	b.n	1a007228 <__pow5mult+0x18>
1a0072aa:	bf00      	nop
1a0072ac:	1a008660 	.word	0x1a008660

1a0072b0 <__lshift>:
1a0072b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0072b4:	4691      	mov	r9, r2
1a0072b6:	690a      	ldr	r2, [r1, #16]
1a0072b8:	460e      	mov	r6, r1
1a0072ba:	ea4f 1469 	mov.w	r4, r9, asr #5
1a0072be:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
1a0072c2:	eb04 0802 	add.w	r8, r4, r2
1a0072c6:	f108 0501 	add.w	r5, r8, #1
1a0072ca:	429d      	cmp	r5, r3
1a0072cc:	4607      	mov	r7, r0
1a0072ce:	dd04      	ble.n	1a0072da <__lshift+0x2a>
1a0072d0:	005b      	lsls	r3, r3, #1
1a0072d2:	429d      	cmp	r5, r3
1a0072d4:	f101 0101 	add.w	r1, r1, #1
1a0072d8:	dcfa      	bgt.n	1a0072d0 <__lshift+0x20>
1a0072da:	4638      	mov	r0, r7
1a0072dc:	f7ff fe28 	bl	1a006f30 <_Balloc>
1a0072e0:	2c00      	cmp	r4, #0
1a0072e2:	f100 0314 	add.w	r3, r0, #20
1a0072e6:	dd37      	ble.n	1a007358 <__lshift+0xa8>
1a0072e8:	eb03 0184 	add.w	r1, r3, r4, lsl #2
1a0072ec:	2200      	movs	r2, #0
1a0072ee:	f843 2b04 	str.w	r2, [r3], #4
1a0072f2:	428b      	cmp	r3, r1
1a0072f4:	d1fb      	bne.n	1a0072ee <__lshift+0x3e>
1a0072f6:	6934      	ldr	r4, [r6, #16]
1a0072f8:	f106 0314 	add.w	r3, r6, #20
1a0072fc:	f019 091f 	ands.w	r9, r9, #31
1a007300:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
1a007304:	d020      	beq.n	1a007348 <__lshift+0x98>
1a007306:	f1c9 0e20 	rsb	lr, r9, #32
1a00730a:	2200      	movs	r2, #0
1a00730c:	e000      	b.n	1a007310 <__lshift+0x60>
1a00730e:	4651      	mov	r1, sl
1a007310:	681c      	ldr	r4, [r3, #0]
1a007312:	468a      	mov	sl, r1
1a007314:	fa04 f409 	lsl.w	r4, r4, r9
1a007318:	4314      	orrs	r4, r2
1a00731a:	f84a 4b04 	str.w	r4, [sl], #4
1a00731e:	f853 2b04 	ldr.w	r2, [r3], #4
1a007322:	4563      	cmp	r3, ip
1a007324:	fa22 f20e 	lsr.w	r2, r2, lr
1a007328:	d3f1      	bcc.n	1a00730e <__lshift+0x5e>
1a00732a:	604a      	str	r2, [r1, #4]
1a00732c:	b10a      	cbz	r2, 1a007332 <__lshift+0x82>
1a00732e:	f108 0502 	add.w	r5, r8, #2
1a007332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a007334:	6872      	ldr	r2, [r6, #4]
1a007336:	3d01      	subs	r5, #1
1a007338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a00733c:	6105      	str	r5, [r0, #16]
1a00733e:	6031      	str	r1, [r6, #0]
1a007340:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
1a007344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007348:	3904      	subs	r1, #4
1a00734a:	f853 2b04 	ldr.w	r2, [r3], #4
1a00734e:	f841 2f04 	str.w	r2, [r1, #4]!
1a007352:	459c      	cmp	ip, r3
1a007354:	d8f9      	bhi.n	1a00734a <__lshift+0x9a>
1a007356:	e7ec      	b.n	1a007332 <__lshift+0x82>
1a007358:	4619      	mov	r1, r3
1a00735a:	e7cc      	b.n	1a0072f6 <__lshift+0x46>

1a00735c <__mcmp>:
1a00735c:	b430      	push	{r4, r5}
1a00735e:	690b      	ldr	r3, [r1, #16]
1a007360:	4605      	mov	r5, r0
1a007362:	6900      	ldr	r0, [r0, #16]
1a007364:	1ac0      	subs	r0, r0, r3
1a007366:	d10f      	bne.n	1a007388 <__mcmp+0x2c>
1a007368:	009b      	lsls	r3, r3, #2
1a00736a:	3514      	adds	r5, #20
1a00736c:	3114      	adds	r1, #20
1a00736e:	4419      	add	r1, r3
1a007370:	442b      	add	r3, r5
1a007372:	e001      	b.n	1a007378 <__mcmp+0x1c>
1a007374:	429d      	cmp	r5, r3
1a007376:	d207      	bcs.n	1a007388 <__mcmp+0x2c>
1a007378:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a00737c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a007380:	4294      	cmp	r4, r2
1a007382:	d0f7      	beq.n	1a007374 <__mcmp+0x18>
1a007384:	d302      	bcc.n	1a00738c <__mcmp+0x30>
1a007386:	2001      	movs	r0, #1
1a007388:	bc30      	pop	{r4, r5}
1a00738a:	4770      	bx	lr
1a00738c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007390:	e7fa      	b.n	1a007388 <__mcmp+0x2c>
1a007392:	bf00      	nop

1a007394 <__mdiff>:
1a007394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a007398:	6913      	ldr	r3, [r2, #16]
1a00739a:	690d      	ldr	r5, [r1, #16]
1a00739c:	1aed      	subs	r5, r5, r3
1a00739e:	2d00      	cmp	r5, #0
1a0073a0:	460e      	mov	r6, r1
1a0073a2:	4690      	mov	r8, r2
1a0073a4:	f101 0414 	add.w	r4, r1, #20
1a0073a8:	f102 0714 	add.w	r7, r2, #20
1a0073ac:	d114      	bne.n	1a0073d8 <__mdiff+0x44>
1a0073ae:	009b      	lsls	r3, r3, #2
1a0073b0:	18e2      	adds	r2, r4, r3
1a0073b2:	443b      	add	r3, r7
1a0073b4:	e001      	b.n	1a0073ba <__mdiff+0x26>
1a0073b6:	42a2      	cmp	r2, r4
1a0073b8:	d959      	bls.n	1a00746e <__mdiff+0xda>
1a0073ba:	f852 cd04 	ldr.w	ip, [r2, #-4]!
1a0073be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
1a0073c2:	458c      	cmp	ip, r1
1a0073c4:	d0f7      	beq.n	1a0073b6 <__mdiff+0x22>
1a0073c6:	d209      	bcs.n	1a0073dc <__mdiff+0x48>
1a0073c8:	4622      	mov	r2, r4
1a0073ca:	4633      	mov	r3, r6
1a0073cc:	463c      	mov	r4, r7
1a0073ce:	4646      	mov	r6, r8
1a0073d0:	4617      	mov	r7, r2
1a0073d2:	4698      	mov	r8, r3
1a0073d4:	2501      	movs	r5, #1
1a0073d6:	e001      	b.n	1a0073dc <__mdiff+0x48>
1a0073d8:	dbf6      	blt.n	1a0073c8 <__mdiff+0x34>
1a0073da:	2500      	movs	r5, #0
1a0073dc:	6871      	ldr	r1, [r6, #4]
1a0073de:	f7ff fda7 	bl	1a006f30 <_Balloc>
1a0073e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a0073e6:	6936      	ldr	r6, [r6, #16]
1a0073e8:	60c5      	str	r5, [r0, #12]
1a0073ea:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
1a0073ee:	46bc      	mov	ip, r7
1a0073f0:	f100 0514 	add.w	r5, r0, #20
1a0073f4:	eb04 0786 	add.w	r7, r4, r6, lsl #2
1a0073f8:	2300      	movs	r3, #0
1a0073fa:	f85c 1b04 	ldr.w	r1, [ip], #4
1a0073fe:	f854 8b04 	ldr.w	r8, [r4], #4
1a007402:	b28a      	uxth	r2, r1
1a007404:	fa13 f388 	uxtah	r3, r3, r8
1a007408:	0c09      	lsrs	r1, r1, #16
1a00740a:	1a9a      	subs	r2, r3, r2
1a00740c:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
1a007410:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a007414:	b292      	uxth	r2, r2
1a007416:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a00741a:	45e6      	cmp	lr, ip
1a00741c:	f845 2b04 	str.w	r2, [r5], #4
1a007420:	ea4f 4323 	mov.w	r3, r3, asr #16
1a007424:	d8e9      	bhi.n	1a0073fa <__mdiff+0x66>
1a007426:	42a7      	cmp	r7, r4
1a007428:	d917      	bls.n	1a00745a <__mdiff+0xc6>
1a00742a:	46ae      	mov	lr, r5
1a00742c:	46a4      	mov	ip, r4
1a00742e:	f85c 2b04 	ldr.w	r2, [ip], #4
1a007432:	fa13 f382 	uxtah	r3, r3, r2
1a007436:	1419      	asrs	r1, r3, #16
1a007438:	eb01 4112 	add.w	r1, r1, r2, lsr #16
1a00743c:	b29b      	uxth	r3, r3
1a00743e:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
1a007442:	4567      	cmp	r7, ip
1a007444:	f84e 2b04 	str.w	r2, [lr], #4
1a007448:	ea4f 4321 	mov.w	r3, r1, asr #16
1a00744c:	d8ef      	bhi.n	1a00742e <__mdiff+0x9a>
1a00744e:	43e4      	mvns	r4, r4
1a007450:	4427      	add	r7, r4
1a007452:	f027 0703 	bic.w	r7, r7, #3
1a007456:	3704      	adds	r7, #4
1a007458:	443d      	add	r5, r7
1a00745a:	3d04      	subs	r5, #4
1a00745c:	b922      	cbnz	r2, 1a007468 <__mdiff+0xd4>
1a00745e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a007462:	3e01      	subs	r6, #1
1a007464:	2b00      	cmp	r3, #0
1a007466:	d0fa      	beq.n	1a00745e <__mdiff+0xca>
1a007468:	6106      	str	r6, [r0, #16]
1a00746a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00746e:	2100      	movs	r1, #0
1a007470:	f7ff fd5e 	bl	1a006f30 <_Balloc>
1a007474:	2201      	movs	r2, #1
1a007476:	2300      	movs	r3, #0
1a007478:	e9c0 2304 	strd	r2, r3, [r0, #16]
1a00747c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a007480 <__d2b>:
1a007480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a007484:	460f      	mov	r7, r1
1a007486:	b083      	sub	sp, #12
1a007488:	2101      	movs	r1, #1
1a00748a:	ec55 4b10 	vmov	r4, r5, d0
1a00748e:	4616      	mov	r6, r2
1a007490:	f7ff fd4e 	bl	1a006f30 <_Balloc>
1a007494:	f3c5 580a 	ubfx	r8, r5, #20, #11
1a007498:	4681      	mov	r9, r0
1a00749a:	f3c5 0313 	ubfx	r3, r5, #0, #20
1a00749e:	f1b8 0f00 	cmp.w	r8, #0
1a0074a2:	d001      	beq.n	1a0074a8 <__d2b+0x28>
1a0074a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a0074a8:	2c00      	cmp	r4, #0
1a0074aa:	9301      	str	r3, [sp, #4]
1a0074ac:	d024      	beq.n	1a0074f8 <__d2b+0x78>
1a0074ae:	a802      	add	r0, sp, #8
1a0074b0:	f840 4d08 	str.w	r4, [r0, #-8]!
1a0074b4:	f7ff fdcc 	bl	1a007050 <__lo0bits>
1a0074b8:	2800      	cmp	r0, #0
1a0074ba:	d136      	bne.n	1a00752a <__d2b+0xaa>
1a0074bc:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0074c0:	f8c9 2014 	str.w	r2, [r9, #20]
1a0074c4:	2b00      	cmp	r3, #0
1a0074c6:	bf0c      	ite	eq
1a0074c8:	2101      	moveq	r1, #1
1a0074ca:	2102      	movne	r1, #2
1a0074cc:	f8c9 3018 	str.w	r3, [r9, #24]
1a0074d0:	f8c9 1010 	str.w	r1, [r9, #16]
1a0074d4:	f1b8 0f00 	cmp.w	r8, #0
1a0074d8:	d11b      	bne.n	1a007512 <__d2b+0x92>
1a0074da:	eb09 0381 	add.w	r3, r9, r1, lsl #2
1a0074de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a0074e2:	6038      	str	r0, [r7, #0]
1a0074e4:	6918      	ldr	r0, [r3, #16]
1a0074e6:	f7ff fd93 	bl	1a007010 <__hi0bits>
1a0074ea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
1a0074ee:	6030      	str	r0, [r6, #0]
1a0074f0:	4648      	mov	r0, r9
1a0074f2:	b003      	add	sp, #12
1a0074f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0074f8:	a801      	add	r0, sp, #4
1a0074fa:	f7ff fda9 	bl	1a007050 <__lo0bits>
1a0074fe:	9b01      	ldr	r3, [sp, #4]
1a007500:	f8c9 3014 	str.w	r3, [r9, #20]
1a007504:	2101      	movs	r1, #1
1a007506:	3020      	adds	r0, #32
1a007508:	f8c9 1010 	str.w	r1, [r9, #16]
1a00750c:	f1b8 0f00 	cmp.w	r8, #0
1a007510:	d0e3      	beq.n	1a0074da <__d2b+0x5a>
1a007512:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
1a007516:	eb08 0300 	add.w	r3, r8, r0
1a00751a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a00751e:	603b      	str	r3, [r7, #0]
1a007520:	6030      	str	r0, [r6, #0]
1a007522:	4648      	mov	r0, r9
1a007524:	b003      	add	sp, #12
1a007526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00752a:	e9dd 1300 	ldrd	r1, r3, [sp]
1a00752e:	f1c0 0220 	rsb	r2, r0, #32
1a007532:	fa03 f202 	lsl.w	r2, r3, r2
1a007536:	430a      	orrs	r2, r1
1a007538:	40c3      	lsrs	r3, r0
1a00753a:	9301      	str	r3, [sp, #4]
1a00753c:	f8c9 2014 	str.w	r2, [r9, #20]
1a007540:	e7c0      	b.n	1a0074c4 <__d2b+0x44>
1a007542:	bf00      	nop

1a007544 <_realloc_r>:
1a007544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007548:	4692      	mov	sl, r2
1a00754a:	b083      	sub	sp, #12
1a00754c:	2900      	cmp	r1, #0
1a00754e:	f000 80a1 	beq.w	1a007694 <_realloc_r+0x150>
1a007552:	460d      	mov	r5, r1
1a007554:	4680      	mov	r8, r0
1a007556:	f10a 040b 	add.w	r4, sl, #11
1a00755a:	f7ff fcdd 	bl	1a006f18 <__malloc_lock>
1a00755e:	f855 2c04 	ldr.w	r2, [r5, #-4]
1a007562:	2c16      	cmp	r4, #22
1a007564:	f022 0603 	bic.w	r6, r2, #3
1a007568:	f1a5 0708 	sub.w	r7, r5, #8
1a00756c:	d83e      	bhi.n	1a0075ec <_realloc_r+0xa8>
1a00756e:	2410      	movs	r4, #16
1a007570:	4621      	mov	r1, r4
1a007572:	45a2      	cmp	sl, r4
1a007574:	d83f      	bhi.n	1a0075f6 <_realloc_r+0xb2>
1a007576:	428e      	cmp	r6, r1
1a007578:	eb07 0906 	add.w	r9, r7, r6
1a00757c:	da74      	bge.n	1a007668 <_realloc_r+0x124>
1a00757e:	4bc7      	ldr	r3, [pc, #796]	; (1a00789c <_realloc_r+0x358>)
1a007580:	6898      	ldr	r0, [r3, #8]
1a007582:	4548      	cmp	r0, r9
1a007584:	f000 80aa 	beq.w	1a0076dc <_realloc_r+0x198>
1a007588:	f8d9 0004 	ldr.w	r0, [r9, #4]
1a00758c:	f020 0301 	bic.w	r3, r0, #1
1a007590:	444b      	add	r3, r9
1a007592:	685b      	ldr	r3, [r3, #4]
1a007594:	07db      	lsls	r3, r3, #31
1a007596:	f140 8083 	bpl.w	1a0076a0 <_realloc_r+0x15c>
1a00759a:	07d2      	lsls	r2, r2, #31
1a00759c:	d534      	bpl.n	1a007608 <_realloc_r+0xc4>
1a00759e:	4651      	mov	r1, sl
1a0075a0:	4640      	mov	r0, r8
1a0075a2:	f7ff f95d 	bl	1a006860 <_malloc_r>
1a0075a6:	4682      	mov	sl, r0
1a0075a8:	b1e0      	cbz	r0, 1a0075e4 <_realloc_r+0xa0>
1a0075aa:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a0075ae:	f023 0301 	bic.w	r3, r3, #1
1a0075b2:	443b      	add	r3, r7
1a0075b4:	f1a0 0208 	sub.w	r2, r0, #8
1a0075b8:	4293      	cmp	r3, r2
1a0075ba:	f000 80f9 	beq.w	1a0077b0 <_realloc_r+0x26c>
1a0075be:	1f32      	subs	r2, r6, #4
1a0075c0:	2a24      	cmp	r2, #36	; 0x24
1a0075c2:	f200 8107 	bhi.w	1a0077d4 <_realloc_r+0x290>
1a0075c6:	2a13      	cmp	r2, #19
1a0075c8:	6829      	ldr	r1, [r5, #0]
1a0075ca:	f200 80e6 	bhi.w	1a00779a <_realloc_r+0x256>
1a0075ce:	4603      	mov	r3, r0
1a0075d0:	462a      	mov	r2, r5
1a0075d2:	6019      	str	r1, [r3, #0]
1a0075d4:	6851      	ldr	r1, [r2, #4]
1a0075d6:	6059      	str	r1, [r3, #4]
1a0075d8:	6892      	ldr	r2, [r2, #8]
1a0075da:	609a      	str	r2, [r3, #8]
1a0075dc:	4629      	mov	r1, r5
1a0075de:	4640      	mov	r0, r8
1a0075e0:	f7fe fe14 	bl	1a00620c <_free_r>
1a0075e4:	4640      	mov	r0, r8
1a0075e6:	f7ff fc9d 	bl	1a006f24 <__malloc_unlock>
1a0075ea:	e04f      	b.n	1a00768c <_realloc_r+0x148>
1a0075ec:	f024 0407 	bic.w	r4, r4, #7
1a0075f0:	2c00      	cmp	r4, #0
1a0075f2:	4621      	mov	r1, r4
1a0075f4:	dabd      	bge.n	1a007572 <_realloc_r+0x2e>
1a0075f6:	f04f 0a00 	mov.w	sl, #0
1a0075fa:	230c      	movs	r3, #12
1a0075fc:	4650      	mov	r0, sl
1a0075fe:	f8c8 3000 	str.w	r3, [r8]
1a007602:	b003      	add	sp, #12
1a007604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007608:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a00760c:	eba7 0b03 	sub.w	fp, r7, r3
1a007610:	f8db 2004 	ldr.w	r2, [fp, #4]
1a007614:	f022 0203 	bic.w	r2, r2, #3
1a007618:	18b3      	adds	r3, r6, r2
1a00761a:	428b      	cmp	r3, r1
1a00761c:	dbbf      	blt.n	1a00759e <_realloc_r+0x5a>
1a00761e:	46da      	mov	sl, fp
1a007620:	f8db 100c 	ldr.w	r1, [fp, #12]
1a007624:	f85a 0f08 	ldr.w	r0, [sl, #8]!
1a007628:	1f32      	subs	r2, r6, #4
1a00762a:	2a24      	cmp	r2, #36	; 0x24
1a00762c:	60c1      	str	r1, [r0, #12]
1a00762e:	eb0b 0903 	add.w	r9, fp, r3
1a007632:	6088      	str	r0, [r1, #8]
1a007634:	f200 80c6 	bhi.w	1a0077c4 <_realloc_r+0x280>
1a007638:	2a13      	cmp	r2, #19
1a00763a:	6829      	ldr	r1, [r5, #0]
1a00763c:	f240 80c0 	bls.w	1a0077c0 <_realloc_r+0x27c>
1a007640:	f8cb 1008 	str.w	r1, [fp, #8]
1a007644:	6869      	ldr	r1, [r5, #4]
1a007646:	f8cb 100c 	str.w	r1, [fp, #12]
1a00764a:	2a1b      	cmp	r2, #27
1a00764c:	68a9      	ldr	r1, [r5, #8]
1a00764e:	f200 80d8 	bhi.w	1a007802 <_realloc_r+0x2be>
1a007652:	f10b 0210 	add.w	r2, fp, #16
1a007656:	3508      	adds	r5, #8
1a007658:	6011      	str	r1, [r2, #0]
1a00765a:	6869      	ldr	r1, [r5, #4]
1a00765c:	6051      	str	r1, [r2, #4]
1a00765e:	68a9      	ldr	r1, [r5, #8]
1a007660:	6091      	str	r1, [r2, #8]
1a007662:	461e      	mov	r6, r3
1a007664:	465f      	mov	r7, fp
1a007666:	4655      	mov	r5, sl
1a007668:	687b      	ldr	r3, [r7, #4]
1a00766a:	1b32      	subs	r2, r6, r4
1a00766c:	2a0f      	cmp	r2, #15
1a00766e:	f003 0301 	and.w	r3, r3, #1
1a007672:	d822      	bhi.n	1a0076ba <_realloc_r+0x176>
1a007674:	4333      	orrs	r3, r6
1a007676:	607b      	str	r3, [r7, #4]
1a007678:	f8d9 3004 	ldr.w	r3, [r9, #4]
1a00767c:	f043 0301 	orr.w	r3, r3, #1
1a007680:	f8c9 3004 	str.w	r3, [r9, #4]
1a007684:	4640      	mov	r0, r8
1a007686:	f7ff fc4d 	bl	1a006f24 <__malloc_unlock>
1a00768a:	46aa      	mov	sl, r5
1a00768c:	4650      	mov	r0, sl
1a00768e:	b003      	add	sp, #12
1a007690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007694:	4611      	mov	r1, r2
1a007696:	b003      	add	sp, #12
1a007698:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00769c:	f7ff b8e0 	b.w	1a006860 <_malloc_r>
1a0076a0:	f020 0003 	bic.w	r0, r0, #3
1a0076a4:	1833      	adds	r3, r6, r0
1a0076a6:	428b      	cmp	r3, r1
1a0076a8:	db61      	blt.n	1a00776e <_realloc_r+0x22a>
1a0076aa:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
1a0076ae:	461e      	mov	r6, r3
1a0076b0:	60ca      	str	r2, [r1, #12]
1a0076b2:	eb07 0903 	add.w	r9, r7, r3
1a0076b6:	6091      	str	r1, [r2, #8]
1a0076b8:	e7d6      	b.n	1a007668 <_realloc_r+0x124>
1a0076ba:	1939      	adds	r1, r7, r4
1a0076bc:	4323      	orrs	r3, r4
1a0076be:	f042 0201 	orr.w	r2, r2, #1
1a0076c2:	607b      	str	r3, [r7, #4]
1a0076c4:	604a      	str	r2, [r1, #4]
1a0076c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
1a0076ca:	f043 0301 	orr.w	r3, r3, #1
1a0076ce:	3108      	adds	r1, #8
1a0076d0:	f8c9 3004 	str.w	r3, [r9, #4]
1a0076d4:	4640      	mov	r0, r8
1a0076d6:	f7fe fd99 	bl	1a00620c <_free_r>
1a0076da:	e7d3      	b.n	1a007684 <_realloc_r+0x140>
1a0076dc:	6840      	ldr	r0, [r0, #4]
1a0076de:	f020 0903 	bic.w	r9, r0, #3
1a0076e2:	44b1      	add	r9, r6
1a0076e4:	f104 0010 	add.w	r0, r4, #16
1a0076e8:	4581      	cmp	r9, r0
1a0076ea:	da77      	bge.n	1a0077dc <_realloc_r+0x298>
1a0076ec:	07d2      	lsls	r2, r2, #31
1a0076ee:	f53f af56 	bmi.w	1a00759e <_realloc_r+0x5a>
1a0076f2:	f855 2c08 	ldr.w	r2, [r5, #-8]
1a0076f6:	eba7 0b02 	sub.w	fp, r7, r2
1a0076fa:	f8db 2004 	ldr.w	r2, [fp, #4]
1a0076fe:	f022 0203 	bic.w	r2, r2, #3
1a007702:	4491      	add	r9, r2
1a007704:	4548      	cmp	r0, r9
1a007706:	dc87      	bgt.n	1a007618 <_realloc_r+0xd4>
1a007708:	46da      	mov	sl, fp
1a00770a:	f8db 100c 	ldr.w	r1, [fp, #12]
1a00770e:	f85a 0f08 	ldr.w	r0, [sl, #8]!
1a007712:	1f32      	subs	r2, r6, #4
1a007714:	2a24      	cmp	r2, #36	; 0x24
1a007716:	60c1      	str	r1, [r0, #12]
1a007718:	6088      	str	r0, [r1, #8]
1a00771a:	f200 80a1 	bhi.w	1a007860 <_realloc_r+0x31c>
1a00771e:	2a13      	cmp	r2, #19
1a007720:	6829      	ldr	r1, [r5, #0]
1a007722:	f240 809b 	bls.w	1a00785c <_realloc_r+0x318>
1a007726:	f8cb 1008 	str.w	r1, [fp, #8]
1a00772a:	6869      	ldr	r1, [r5, #4]
1a00772c:	f8cb 100c 	str.w	r1, [fp, #12]
1a007730:	2a1b      	cmp	r2, #27
1a007732:	68a9      	ldr	r1, [r5, #8]
1a007734:	f200 809b 	bhi.w	1a00786e <_realloc_r+0x32a>
1a007738:	f10b 0210 	add.w	r2, fp, #16
1a00773c:	3508      	adds	r5, #8
1a00773e:	6011      	str	r1, [r2, #0]
1a007740:	6869      	ldr	r1, [r5, #4]
1a007742:	6051      	str	r1, [r2, #4]
1a007744:	68a9      	ldr	r1, [r5, #8]
1a007746:	6091      	str	r1, [r2, #8]
1a007748:	eb0b 0104 	add.w	r1, fp, r4
1a00774c:	eba9 0204 	sub.w	r2, r9, r4
1a007750:	f042 0201 	orr.w	r2, r2, #1
1a007754:	6099      	str	r1, [r3, #8]
1a007756:	604a      	str	r2, [r1, #4]
1a007758:	f8db 3004 	ldr.w	r3, [fp, #4]
1a00775c:	f003 0301 	and.w	r3, r3, #1
1a007760:	431c      	orrs	r4, r3
1a007762:	4640      	mov	r0, r8
1a007764:	f8cb 4004 	str.w	r4, [fp, #4]
1a007768:	f7ff fbdc 	bl	1a006f24 <__malloc_unlock>
1a00776c:	e78e      	b.n	1a00768c <_realloc_r+0x148>
1a00776e:	07d3      	lsls	r3, r2, #31
1a007770:	f53f af15 	bmi.w	1a00759e <_realloc_r+0x5a>
1a007774:	f855 3c08 	ldr.w	r3, [r5, #-8]
1a007778:	eba7 0b03 	sub.w	fp, r7, r3
1a00777c:	f8db 2004 	ldr.w	r2, [fp, #4]
1a007780:	f022 0203 	bic.w	r2, r2, #3
1a007784:	4410      	add	r0, r2
1a007786:	1983      	adds	r3, r0, r6
1a007788:	428b      	cmp	r3, r1
1a00778a:	f6ff af45 	blt.w	1a007618 <_realloc_r+0xd4>
1a00778e:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
1a007792:	46da      	mov	sl, fp
1a007794:	60ca      	str	r2, [r1, #12]
1a007796:	6091      	str	r1, [r2, #8]
1a007798:	e742      	b.n	1a007620 <_realloc_r+0xdc>
1a00779a:	6001      	str	r1, [r0, #0]
1a00779c:	686b      	ldr	r3, [r5, #4]
1a00779e:	6043      	str	r3, [r0, #4]
1a0077a0:	2a1b      	cmp	r2, #27
1a0077a2:	d83a      	bhi.n	1a00781a <_realloc_r+0x2d6>
1a0077a4:	f105 0208 	add.w	r2, r5, #8
1a0077a8:	f100 0308 	add.w	r3, r0, #8
1a0077ac:	68a9      	ldr	r1, [r5, #8]
1a0077ae:	e710      	b.n	1a0075d2 <_realloc_r+0x8e>
1a0077b0:	f850 3c04 	ldr.w	r3, [r0, #-4]
1a0077b4:	f023 0303 	bic.w	r3, r3, #3
1a0077b8:	441e      	add	r6, r3
1a0077ba:	eb07 0906 	add.w	r9, r7, r6
1a0077be:	e753      	b.n	1a007668 <_realloc_r+0x124>
1a0077c0:	4652      	mov	r2, sl
1a0077c2:	e749      	b.n	1a007658 <_realloc_r+0x114>
1a0077c4:	4629      	mov	r1, r5
1a0077c6:	4650      	mov	r0, sl
1a0077c8:	461e      	mov	r6, r3
1a0077ca:	465f      	mov	r7, fp
1a0077cc:	f7ff fb40 	bl	1a006e50 <memmove>
1a0077d0:	4655      	mov	r5, sl
1a0077d2:	e749      	b.n	1a007668 <_realloc_r+0x124>
1a0077d4:	4629      	mov	r1, r5
1a0077d6:	f7ff fb3b 	bl	1a006e50 <memmove>
1a0077da:	e6ff      	b.n	1a0075dc <_realloc_r+0x98>
1a0077dc:	4427      	add	r7, r4
1a0077de:	eba9 0904 	sub.w	r9, r9, r4
1a0077e2:	f049 0201 	orr.w	r2, r9, #1
1a0077e6:	609f      	str	r7, [r3, #8]
1a0077e8:	607a      	str	r2, [r7, #4]
1a0077ea:	f855 3c04 	ldr.w	r3, [r5, #-4]
1a0077ee:	f003 0301 	and.w	r3, r3, #1
1a0077f2:	431c      	orrs	r4, r3
1a0077f4:	4640      	mov	r0, r8
1a0077f6:	f845 4c04 	str.w	r4, [r5, #-4]
1a0077fa:	f7ff fb93 	bl	1a006f24 <__malloc_unlock>
1a0077fe:	46aa      	mov	sl, r5
1a007800:	e744      	b.n	1a00768c <_realloc_r+0x148>
1a007802:	f8cb 1010 	str.w	r1, [fp, #16]
1a007806:	68e9      	ldr	r1, [r5, #12]
1a007808:	f8cb 1014 	str.w	r1, [fp, #20]
1a00780c:	2a24      	cmp	r2, #36	; 0x24
1a00780e:	d010      	beq.n	1a007832 <_realloc_r+0x2ee>
1a007810:	6929      	ldr	r1, [r5, #16]
1a007812:	f10b 0218 	add.w	r2, fp, #24
1a007816:	3510      	adds	r5, #16
1a007818:	e71e      	b.n	1a007658 <_realloc_r+0x114>
1a00781a:	68ab      	ldr	r3, [r5, #8]
1a00781c:	6083      	str	r3, [r0, #8]
1a00781e:	68eb      	ldr	r3, [r5, #12]
1a007820:	60c3      	str	r3, [r0, #12]
1a007822:	2a24      	cmp	r2, #36	; 0x24
1a007824:	d010      	beq.n	1a007848 <_realloc_r+0x304>
1a007826:	f105 0210 	add.w	r2, r5, #16
1a00782a:	f100 0310 	add.w	r3, r0, #16
1a00782e:	6929      	ldr	r1, [r5, #16]
1a007830:	e6cf      	b.n	1a0075d2 <_realloc_r+0x8e>
1a007832:	692a      	ldr	r2, [r5, #16]
1a007834:	f8cb 2018 	str.w	r2, [fp, #24]
1a007838:	696a      	ldr	r2, [r5, #20]
1a00783a:	f8cb 201c 	str.w	r2, [fp, #28]
1a00783e:	69a9      	ldr	r1, [r5, #24]
1a007840:	f10b 0220 	add.w	r2, fp, #32
1a007844:	3518      	adds	r5, #24
1a007846:	e707      	b.n	1a007658 <_realloc_r+0x114>
1a007848:	692b      	ldr	r3, [r5, #16]
1a00784a:	6103      	str	r3, [r0, #16]
1a00784c:	696b      	ldr	r3, [r5, #20]
1a00784e:	6143      	str	r3, [r0, #20]
1a007850:	69a9      	ldr	r1, [r5, #24]
1a007852:	f105 0218 	add.w	r2, r5, #24
1a007856:	f100 0318 	add.w	r3, r0, #24
1a00785a:	e6ba      	b.n	1a0075d2 <_realloc_r+0x8e>
1a00785c:	4652      	mov	r2, sl
1a00785e:	e76e      	b.n	1a00773e <_realloc_r+0x1fa>
1a007860:	4629      	mov	r1, r5
1a007862:	4650      	mov	r0, sl
1a007864:	9301      	str	r3, [sp, #4]
1a007866:	f7ff faf3 	bl	1a006e50 <memmove>
1a00786a:	9b01      	ldr	r3, [sp, #4]
1a00786c:	e76c      	b.n	1a007748 <_realloc_r+0x204>
1a00786e:	f8cb 1010 	str.w	r1, [fp, #16]
1a007872:	68e9      	ldr	r1, [r5, #12]
1a007874:	f8cb 1014 	str.w	r1, [fp, #20]
1a007878:	2a24      	cmp	r2, #36	; 0x24
1a00787a:	d004      	beq.n	1a007886 <_realloc_r+0x342>
1a00787c:	6929      	ldr	r1, [r5, #16]
1a00787e:	f10b 0218 	add.w	r2, fp, #24
1a007882:	3510      	adds	r5, #16
1a007884:	e75b      	b.n	1a00773e <_realloc_r+0x1fa>
1a007886:	692a      	ldr	r2, [r5, #16]
1a007888:	f8cb 2018 	str.w	r2, [fp, #24]
1a00788c:	696a      	ldr	r2, [r5, #20]
1a00788e:	f8cb 201c 	str.w	r2, [fp, #28]
1a007892:	69a9      	ldr	r1, [r5, #24]
1a007894:	f10b 0220 	add.w	r2, fp, #32
1a007898:	3518      	adds	r5, #24
1a00789a:	e750      	b.n	1a00773e <_realloc_r+0x1fa>
1a00789c:	100004f8 	.word	0x100004f8

1a0078a0 <frexp>:
1a0078a0:	ec53 2b10 	vmov	r2, r3, d0
1a0078a4:	b570      	push	{r4, r5, r6, lr}
1a0078a6:	4e16      	ldr	r6, [pc, #88]	; (1a007900 <frexp+0x60>)
1a0078a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a0078ac:	2500      	movs	r5, #0
1a0078ae:	42b1      	cmp	r1, r6
1a0078b0:	4604      	mov	r4, r0
1a0078b2:	6005      	str	r5, [r0, #0]
1a0078b4:	dc21      	bgt.n	1a0078fa <frexp+0x5a>
1a0078b6:	ee10 6a10 	vmov	r6, s0
1a0078ba:	430e      	orrs	r6, r1
1a0078bc:	d01d      	beq.n	1a0078fa <frexp+0x5a>
1a0078be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a0078c2:	4618      	mov	r0, r3
1a0078c4:	da0c      	bge.n	1a0078e0 <frexp+0x40>
1a0078c6:	4619      	mov	r1, r3
1a0078c8:	2200      	movs	r2, #0
1a0078ca:	ee10 0a10 	vmov	r0, s0
1a0078ce:	4b0d      	ldr	r3, [pc, #52]	; (1a007904 <frexp+0x64>)
1a0078d0:	f7fb f984 	bl	1a002bdc <__aeabi_dmul>
1a0078d4:	f06f 0535 	mvn.w	r5, #53	; 0x35
1a0078d8:	4602      	mov	r2, r0
1a0078da:	4608      	mov	r0, r1
1a0078dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0078e0:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
1a0078e4:	1509      	asrs	r1, r1, #20
1a0078e6:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
1a0078ea:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
1a0078ee:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
1a0078f2:	4429      	add	r1, r5
1a0078f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
1a0078f8:	6021      	str	r1, [r4, #0]
1a0078fa:	ec43 2b10 	vmov	d0, r2, r3
1a0078fe:	bd70      	pop	{r4, r5, r6, pc}
1a007900:	7fefffff 	.word	0x7fefffff
1a007904:	43500000 	.word	0x43500000

1a007908 <__sread>:
1a007908:	b510      	push	{r4, lr}
1a00790a:	460c      	mov	r4, r1
1a00790c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007910:	f7f9 ff2c 	bl	1a00176c <_read_r>
1a007914:	2800      	cmp	r0, #0
1a007916:	db03      	blt.n	1a007920 <__sread+0x18>
1a007918:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a00791a:	4403      	add	r3, r0
1a00791c:	6523      	str	r3, [r4, #80]	; 0x50
1a00791e:	bd10      	pop	{r4, pc}
1a007920:	89a3      	ldrh	r3, [r4, #12]
1a007922:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a007926:	81a3      	strh	r3, [r4, #12]
1a007928:	bd10      	pop	{r4, pc}
1a00792a:	bf00      	nop

1a00792c <__swrite>:
1a00792c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a007930:	4616      	mov	r6, r2
1a007932:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
1a007936:	461f      	mov	r7, r3
1a007938:	05d3      	lsls	r3, r2, #23
1a00793a:	460c      	mov	r4, r1
1a00793c:	4605      	mov	r5, r0
1a00793e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007942:	d507      	bpl.n	1a007954 <__swrite+0x28>
1a007944:	2200      	movs	r2, #0
1a007946:	2302      	movs	r3, #2
1a007948:	f7f9 ff0b 	bl	1a001762 <_lseek_r>
1a00794c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a007950:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a007954:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a007958:	81a2      	strh	r2, [r4, #12]
1a00795a:	463b      	mov	r3, r7
1a00795c:	4632      	mov	r2, r6
1a00795e:	4628      	mov	r0, r5
1a007960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a007964:	f7f9 bf38 	b.w	1a0017d8 <_write_r>

1a007968 <__sseek>:
1a007968:	b510      	push	{r4, lr}
1a00796a:	460c      	mov	r4, r1
1a00796c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007970:	f7f9 fef7 	bl	1a001762 <_lseek_r>
1a007974:	89a3      	ldrh	r3, [r4, #12]
1a007976:	1c42      	adds	r2, r0, #1
1a007978:	bf0e      	itee	eq
1a00797a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a00797e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a007982:	6520      	strne	r0, [r4, #80]	; 0x50
1a007984:	81a3      	strh	r3, [r4, #12]
1a007986:	bd10      	pop	{r4, pc}

1a007988 <__sclose>:
1a007988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00798c:	f7f9 bed6 	b.w	1a00173c <_close_r>

1a007990 <strncpy>:
1a007990:	ea40 0301 	orr.w	r3, r0, r1
1a007994:	079b      	lsls	r3, r3, #30
1a007996:	b470      	push	{r4, r5, r6}
1a007998:	d12a      	bne.n	1a0079f0 <strncpy+0x60>
1a00799a:	2a03      	cmp	r2, #3
1a00799c:	d928      	bls.n	1a0079f0 <strncpy+0x60>
1a00799e:	460c      	mov	r4, r1
1a0079a0:	4603      	mov	r3, r0
1a0079a2:	4621      	mov	r1, r4
1a0079a4:	f854 6b04 	ldr.w	r6, [r4], #4
1a0079a8:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
1a0079ac:	ea25 0506 	bic.w	r5, r5, r6
1a0079b0:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
1a0079b4:	d106      	bne.n	1a0079c4 <strncpy+0x34>
1a0079b6:	3a04      	subs	r2, #4
1a0079b8:	2a03      	cmp	r2, #3
1a0079ba:	f843 6b04 	str.w	r6, [r3], #4
1a0079be:	4621      	mov	r1, r4
1a0079c0:	d8ef      	bhi.n	1a0079a2 <strncpy+0x12>
1a0079c2:	b19a      	cbz	r2, 1a0079ec <strncpy+0x5c>
1a0079c4:	780c      	ldrb	r4, [r1, #0]
1a0079c6:	701c      	strb	r4, [r3, #0]
1a0079c8:	3a01      	subs	r2, #1
1a0079ca:	3301      	adds	r3, #1
1a0079cc:	b13c      	cbz	r4, 1a0079de <strncpy+0x4e>
1a0079ce:	b16a      	cbz	r2, 1a0079ec <strncpy+0x5c>
1a0079d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a0079d4:	f803 4b01 	strb.w	r4, [r3], #1
1a0079d8:	3a01      	subs	r2, #1
1a0079da:	2c00      	cmp	r4, #0
1a0079dc:	d1f7      	bne.n	1a0079ce <strncpy+0x3e>
1a0079de:	b12a      	cbz	r2, 1a0079ec <strncpy+0x5c>
1a0079e0:	441a      	add	r2, r3
1a0079e2:	2100      	movs	r1, #0
1a0079e4:	f803 1b01 	strb.w	r1, [r3], #1
1a0079e8:	4293      	cmp	r3, r2
1a0079ea:	d1fb      	bne.n	1a0079e4 <strncpy+0x54>
1a0079ec:	bc70      	pop	{r4, r5, r6}
1a0079ee:	4770      	bx	lr
1a0079f0:	4603      	mov	r3, r0
1a0079f2:	e7e6      	b.n	1a0079c2 <strncpy+0x32>

1a0079f4 <__sprint_r.part.0>:
1a0079f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0079f8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
1a0079fa:	049c      	lsls	r4, r3, #18
1a0079fc:	4692      	mov	sl, r2
1a0079fe:	d52d      	bpl.n	1a007a5c <__sprint_r.part.0+0x68>
1a007a00:	6893      	ldr	r3, [r2, #8]
1a007a02:	6812      	ldr	r2, [r2, #0]
1a007a04:	b343      	cbz	r3, 1a007a58 <__sprint_r.part.0+0x64>
1a007a06:	460e      	mov	r6, r1
1a007a08:	4607      	mov	r7, r0
1a007a0a:	f102 0908 	add.w	r9, r2, #8
1a007a0e:	e959 5b02 	ldrd	r5, fp, [r9, #-8]
1a007a12:	ea5f 089b 	movs.w	r8, fp, lsr #2
1a007a16:	d015      	beq.n	1a007a44 <__sprint_r.part.0+0x50>
1a007a18:	3d04      	subs	r5, #4
1a007a1a:	2400      	movs	r4, #0
1a007a1c:	e001      	b.n	1a007a22 <__sprint_r.part.0+0x2e>
1a007a1e:	45a0      	cmp	r8, r4
1a007a20:	d00e      	beq.n	1a007a40 <__sprint_r.part.0+0x4c>
1a007a22:	4632      	mov	r2, r6
1a007a24:	f855 1f04 	ldr.w	r1, [r5, #4]!
1a007a28:	4638      	mov	r0, r7
1a007a2a:	f000 f96d 	bl	1a007d08 <_fputwc_r>
1a007a2e:	1c43      	adds	r3, r0, #1
1a007a30:	f104 0401 	add.w	r4, r4, #1
1a007a34:	d1f3      	bne.n	1a007a1e <__sprint_r.part.0+0x2a>
1a007a36:	2300      	movs	r3, #0
1a007a38:	e9ca 3301 	strd	r3, r3, [sl, #4]
1a007a3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007a40:	f8da 3008 	ldr.w	r3, [sl, #8]
1a007a44:	f02b 0b03 	bic.w	fp, fp, #3
1a007a48:	eba3 030b 	sub.w	r3, r3, fp
1a007a4c:	f8ca 3008 	str.w	r3, [sl, #8]
1a007a50:	f109 0908 	add.w	r9, r9, #8
1a007a54:	2b00      	cmp	r3, #0
1a007a56:	d1da      	bne.n	1a007a0e <__sprint_r.part.0+0x1a>
1a007a58:	2000      	movs	r0, #0
1a007a5a:	e7ec      	b.n	1a007a36 <__sprint_r.part.0+0x42>
1a007a5c:	f7fe fcca 	bl	1a0063f4 <__sfvwrite_r>
1a007a60:	2300      	movs	r3, #0
1a007a62:	e9ca 3301 	strd	r3, r3, [sl, #4]
1a007a66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a007a6a:	bf00      	nop

1a007a6c <__sprint_r>:
1a007a6c:	6893      	ldr	r3, [r2, #8]
1a007a6e:	b10b      	cbz	r3, 1a007a74 <__sprint_r+0x8>
1a007a70:	f7ff bfc0 	b.w	1a0079f4 <__sprint_r.part.0>
1a007a74:	b410      	push	{r4}
1a007a76:	4618      	mov	r0, r3
1a007a78:	6053      	str	r3, [r2, #4]
1a007a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a007a7e:	4770      	bx	lr

1a007a80 <__swbuf_r>:
1a007a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a007a82:	460d      	mov	r5, r1
1a007a84:	4614      	mov	r4, r2
1a007a86:	4606      	mov	r6, r0
1a007a88:	b110      	cbz	r0, 1a007a90 <__swbuf_r+0x10>
1a007a8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a007a8c:	2b00      	cmp	r3, #0
1a007a8e:	d043      	beq.n	1a007b18 <__swbuf_r+0x98>
1a007a90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a007a94:	69a3      	ldr	r3, [r4, #24]
1a007a96:	60a3      	str	r3, [r4, #8]
1a007a98:	b291      	uxth	r1, r2
1a007a9a:	0708      	lsls	r0, r1, #28
1a007a9c:	d51b      	bpl.n	1a007ad6 <__swbuf_r+0x56>
1a007a9e:	6923      	ldr	r3, [r4, #16]
1a007aa0:	b1cb      	cbz	r3, 1a007ad6 <__swbuf_r+0x56>
1a007aa2:	b2ed      	uxtb	r5, r5
1a007aa4:	0489      	lsls	r1, r1, #18
1a007aa6:	462f      	mov	r7, r5
1a007aa8:	d522      	bpl.n	1a007af0 <__swbuf_r+0x70>
1a007aaa:	6822      	ldr	r2, [r4, #0]
1a007aac:	6961      	ldr	r1, [r4, #20]
1a007aae:	1ad3      	subs	r3, r2, r3
1a007ab0:	4299      	cmp	r1, r3
1a007ab2:	dd29      	ble.n	1a007b08 <__swbuf_r+0x88>
1a007ab4:	3301      	adds	r3, #1
1a007ab6:	68a1      	ldr	r1, [r4, #8]
1a007ab8:	1c50      	adds	r0, r2, #1
1a007aba:	3901      	subs	r1, #1
1a007abc:	60a1      	str	r1, [r4, #8]
1a007abe:	6020      	str	r0, [r4, #0]
1a007ac0:	7015      	strb	r5, [r2, #0]
1a007ac2:	6962      	ldr	r2, [r4, #20]
1a007ac4:	429a      	cmp	r2, r3
1a007ac6:	d02a      	beq.n	1a007b1e <__swbuf_r+0x9e>
1a007ac8:	89a3      	ldrh	r3, [r4, #12]
1a007aca:	07db      	lsls	r3, r3, #31
1a007acc:	d501      	bpl.n	1a007ad2 <__swbuf_r+0x52>
1a007ace:	2d0a      	cmp	r5, #10
1a007ad0:	d025      	beq.n	1a007b1e <__swbuf_r+0x9e>
1a007ad2:	4638      	mov	r0, r7
1a007ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a007ad6:	4621      	mov	r1, r4
1a007ad8:	4630      	mov	r0, r6
1a007ada:	f7fd fa01 	bl	1a004ee0 <__swsetup_r>
1a007ade:	bb20      	cbnz	r0, 1a007b2a <__swbuf_r+0xaa>
1a007ae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a007ae4:	6923      	ldr	r3, [r4, #16]
1a007ae6:	b291      	uxth	r1, r2
1a007ae8:	b2ed      	uxtb	r5, r5
1a007aea:	0489      	lsls	r1, r1, #18
1a007aec:	462f      	mov	r7, r5
1a007aee:	d4dc      	bmi.n	1a007aaa <__swbuf_r+0x2a>
1a007af0:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a007af2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a007af6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a007afa:	81a2      	strh	r2, [r4, #12]
1a007afc:	6822      	ldr	r2, [r4, #0]
1a007afe:	6661      	str	r1, [r4, #100]	; 0x64
1a007b00:	6961      	ldr	r1, [r4, #20]
1a007b02:	1ad3      	subs	r3, r2, r3
1a007b04:	4299      	cmp	r1, r3
1a007b06:	dcd5      	bgt.n	1a007ab4 <__swbuf_r+0x34>
1a007b08:	4621      	mov	r1, r4
1a007b0a:	4630      	mov	r0, r6
1a007b0c:	f7fe fa9a 	bl	1a006044 <_fflush_r>
1a007b10:	b958      	cbnz	r0, 1a007b2a <__swbuf_r+0xaa>
1a007b12:	6822      	ldr	r2, [r4, #0]
1a007b14:	2301      	movs	r3, #1
1a007b16:	e7ce      	b.n	1a007ab6 <__swbuf_r+0x36>
1a007b18:	f7fe faf0 	bl	1a0060fc <__sinit>
1a007b1c:	e7b8      	b.n	1a007a90 <__swbuf_r+0x10>
1a007b1e:	4621      	mov	r1, r4
1a007b20:	4630      	mov	r0, r6
1a007b22:	f7fe fa8f 	bl	1a006044 <_fflush_r>
1a007b26:	2800      	cmp	r0, #0
1a007b28:	d0d3      	beq.n	1a007ad2 <__swbuf_r+0x52>
1a007b2a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a007b2e:	e7d0      	b.n	1a007ad2 <__swbuf_r+0x52>

1a007b30 <_calloc_r>:
1a007b30:	b510      	push	{r4, lr}
1a007b32:	fb02 f101 	mul.w	r1, r2, r1
1a007b36:	f7fe fe93 	bl	1a006860 <_malloc_r>
1a007b3a:	4604      	mov	r4, r0
1a007b3c:	b1d8      	cbz	r0, 1a007b76 <_calloc_r+0x46>
1a007b3e:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a007b42:	f022 0203 	bic.w	r2, r2, #3
1a007b46:	3a04      	subs	r2, #4
1a007b48:	2a24      	cmp	r2, #36	; 0x24
1a007b4a:	d81d      	bhi.n	1a007b88 <_calloc_r+0x58>
1a007b4c:	2a13      	cmp	r2, #19
1a007b4e:	d914      	bls.n	1a007b7a <_calloc_r+0x4a>
1a007b50:	2300      	movs	r3, #0
1a007b52:	2a1b      	cmp	r2, #27
1a007b54:	e9c0 3300 	strd	r3, r3, [r0]
1a007b58:	d91b      	bls.n	1a007b92 <_calloc_r+0x62>
1a007b5a:	2a24      	cmp	r2, #36	; 0x24
1a007b5c:	e9c0 3302 	strd	r3, r3, [r0, #8]
1a007b60:	bf0a      	itet	eq
1a007b62:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
1a007b66:	f100 0210 	addne.w	r2, r0, #16
1a007b6a:	f100 0218 	addeq.w	r2, r0, #24
1a007b6e:	2300      	movs	r3, #0
1a007b70:	e9c2 3300 	strd	r3, r3, [r2]
1a007b74:	6093      	str	r3, [r2, #8]
1a007b76:	4620      	mov	r0, r4
1a007b78:	bd10      	pop	{r4, pc}
1a007b7a:	4602      	mov	r2, r0
1a007b7c:	2300      	movs	r3, #0
1a007b7e:	e9c2 3300 	strd	r3, r3, [r2]
1a007b82:	6093      	str	r3, [r2, #8]
1a007b84:	4620      	mov	r0, r4
1a007b86:	bd10      	pop	{r4, pc}
1a007b88:	2100      	movs	r1, #0
1a007b8a:	f7fb faf7 	bl	1a00317c <memset>
1a007b8e:	4620      	mov	r0, r4
1a007b90:	bd10      	pop	{r4, pc}
1a007b92:	f100 0208 	add.w	r2, r0, #8
1a007b96:	e7f1      	b.n	1a007b7c <_calloc_r+0x4c>

1a007b98 <_fclose_r>:
1a007b98:	b570      	push	{r4, r5, r6, lr}
1a007b9a:	2900      	cmp	r1, #0
1a007b9c:	d048      	beq.n	1a007c30 <_fclose_r+0x98>
1a007b9e:	4605      	mov	r5, r0
1a007ba0:	460c      	mov	r4, r1
1a007ba2:	b110      	cbz	r0, 1a007baa <_fclose_r+0x12>
1a007ba4:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a007ba6:	2b00      	cmp	r3, #0
1a007ba8:	d048      	beq.n	1a007c3c <_fclose_r+0xa4>
1a007baa:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a007bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007bb0:	07d0      	lsls	r0, r2, #31
1a007bb2:	d440      	bmi.n	1a007c36 <_fclose_r+0x9e>
1a007bb4:	0599      	lsls	r1, r3, #22
1a007bb6:	d530      	bpl.n	1a007c1a <_fclose_r+0x82>
1a007bb8:	4621      	mov	r1, r4
1a007bba:	4628      	mov	r0, r5
1a007bbc:	f7fe f998 	bl	1a005ef0 <__sflush_r>
1a007bc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a007bc2:	4606      	mov	r6, r0
1a007bc4:	b133      	cbz	r3, 1a007bd4 <_fclose_r+0x3c>
1a007bc6:	69e1      	ldr	r1, [r4, #28]
1a007bc8:	4628      	mov	r0, r5
1a007bca:	4798      	blx	r3
1a007bcc:	2800      	cmp	r0, #0
1a007bce:	bfb8      	it	lt
1a007bd0:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
1a007bd4:	89a3      	ldrh	r3, [r4, #12]
1a007bd6:	061a      	lsls	r2, r3, #24
1a007bd8:	d43c      	bmi.n	1a007c54 <_fclose_r+0xbc>
1a007bda:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a007bdc:	b141      	cbz	r1, 1a007bf0 <_fclose_r+0x58>
1a007bde:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a007be2:	4299      	cmp	r1, r3
1a007be4:	d002      	beq.n	1a007bec <_fclose_r+0x54>
1a007be6:	4628      	mov	r0, r5
1a007be8:	f7fe fb10 	bl	1a00620c <_free_r>
1a007bec:	2300      	movs	r3, #0
1a007bee:	6323      	str	r3, [r4, #48]	; 0x30
1a007bf0:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a007bf2:	b121      	cbz	r1, 1a007bfe <_fclose_r+0x66>
1a007bf4:	4628      	mov	r0, r5
1a007bf6:	f7fe fb09 	bl	1a00620c <_free_r>
1a007bfa:	2300      	movs	r3, #0
1a007bfc:	6463      	str	r3, [r4, #68]	; 0x44
1a007bfe:	f7fe faa9 	bl	1a006154 <__sfp_lock_acquire>
1a007c02:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a007c04:	2200      	movs	r2, #0
1a007c06:	07db      	lsls	r3, r3, #31
1a007c08:	81a2      	strh	r2, [r4, #12]
1a007c0a:	d51f      	bpl.n	1a007c4c <_fclose_r+0xb4>
1a007c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a007c0e:	f7fe fda9 	bl	1a006764 <__retarget_lock_close_recursive>
1a007c12:	f7fe faa5 	bl	1a006160 <__sfp_lock_release>
1a007c16:	4630      	mov	r0, r6
1a007c18:	bd70      	pop	{r4, r5, r6, pc}
1a007c1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a007c1c:	f7fe fda4 	bl	1a006768 <__retarget_lock_acquire_recursive>
1a007c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007c24:	2b00      	cmp	r3, #0
1a007c26:	d1c7      	bne.n	1a007bb8 <_fclose_r+0x20>
1a007c28:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a007c2a:	f016 0601 	ands.w	r6, r6, #1
1a007c2e:	d016      	beq.n	1a007c5e <_fclose_r+0xc6>
1a007c30:	2600      	movs	r6, #0
1a007c32:	4630      	mov	r0, r6
1a007c34:	bd70      	pop	{r4, r5, r6, pc}
1a007c36:	2b00      	cmp	r3, #0
1a007c38:	d0fa      	beq.n	1a007c30 <_fclose_r+0x98>
1a007c3a:	e7bd      	b.n	1a007bb8 <_fclose_r+0x20>
1a007c3c:	f7fe fa5e 	bl	1a0060fc <__sinit>
1a007c40:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a007c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007c46:	07d0      	lsls	r0, r2, #31
1a007c48:	d4f5      	bmi.n	1a007c36 <_fclose_r+0x9e>
1a007c4a:	e7b3      	b.n	1a007bb4 <_fclose_r+0x1c>
1a007c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a007c4e:	f7fe fd8d 	bl	1a00676c <__retarget_lock_release_recursive>
1a007c52:	e7db      	b.n	1a007c0c <_fclose_r+0x74>
1a007c54:	6921      	ldr	r1, [r4, #16]
1a007c56:	4628      	mov	r0, r5
1a007c58:	f7fe fad8 	bl	1a00620c <_free_r>
1a007c5c:	e7bd      	b.n	1a007bda <_fclose_r+0x42>
1a007c5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a007c60:	f7fe fd84 	bl	1a00676c <__retarget_lock_release_recursive>
1a007c64:	4630      	mov	r0, r6
1a007c66:	bd70      	pop	{r4, r5, r6, pc}

1a007c68 <__fputwc>:
1a007c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a007c6c:	b082      	sub	sp, #8
1a007c6e:	4681      	mov	r9, r0
1a007c70:	4688      	mov	r8, r1
1a007c72:	4614      	mov	r4, r2
1a007c74:	f000 f87a 	bl	1a007d6c <__locale_mb_cur_max>
1a007c78:	2801      	cmp	r0, #1
1a007c7a:	d103      	bne.n	1a007c84 <__fputwc+0x1c>
1a007c7c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a007c80:	2bfe      	cmp	r3, #254	; 0xfe
1a007c82:	d933      	bls.n	1a007cec <__fputwc+0x84>
1a007c84:	4642      	mov	r2, r8
1a007c86:	f104 035c 	add.w	r3, r4, #92	; 0x5c
1a007c8a:	a901      	add	r1, sp, #4
1a007c8c:	4648      	mov	r0, r9
1a007c8e:	f000 f891 	bl	1a007db4 <_wcrtomb_r>
1a007c92:	1c42      	adds	r2, r0, #1
1a007c94:	4606      	mov	r6, r0
1a007c96:	d02f      	beq.n	1a007cf8 <__fputwc+0x90>
1a007c98:	b320      	cbz	r0, 1a007ce4 <__fputwc+0x7c>
1a007c9a:	f89d c004 	ldrb.w	ip, [sp, #4]
1a007c9e:	2500      	movs	r5, #0
1a007ca0:	f10d 0a04 	add.w	sl, sp, #4
1a007ca4:	e009      	b.n	1a007cba <__fputwc+0x52>
1a007ca6:	6823      	ldr	r3, [r4, #0]
1a007ca8:	1c5a      	adds	r2, r3, #1
1a007caa:	6022      	str	r2, [r4, #0]
1a007cac:	f883 c000 	strb.w	ip, [r3]
1a007cb0:	3501      	adds	r5, #1
1a007cb2:	42b5      	cmp	r5, r6
1a007cb4:	d216      	bcs.n	1a007ce4 <__fputwc+0x7c>
1a007cb6:	f815 c00a 	ldrb.w	ip, [r5, sl]
1a007cba:	68a3      	ldr	r3, [r4, #8]
1a007cbc:	3b01      	subs	r3, #1
1a007cbe:	2b00      	cmp	r3, #0
1a007cc0:	60a3      	str	r3, [r4, #8]
1a007cc2:	daf0      	bge.n	1a007ca6 <__fputwc+0x3e>
1a007cc4:	69a7      	ldr	r7, [r4, #24]
1a007cc6:	42bb      	cmp	r3, r7
1a007cc8:	4661      	mov	r1, ip
1a007cca:	4622      	mov	r2, r4
1a007ccc:	4648      	mov	r0, r9
1a007cce:	db02      	blt.n	1a007cd6 <__fputwc+0x6e>
1a007cd0:	f1bc 0f0a 	cmp.w	ip, #10
1a007cd4:	d1e7      	bne.n	1a007ca6 <__fputwc+0x3e>
1a007cd6:	f7ff fed3 	bl	1a007a80 <__swbuf_r>
1a007cda:	1c43      	adds	r3, r0, #1
1a007cdc:	d1e8      	bne.n	1a007cb0 <__fputwc+0x48>
1a007cde:	b002      	add	sp, #8
1a007ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007ce4:	4640      	mov	r0, r8
1a007ce6:	b002      	add	sp, #8
1a007ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007cec:	fa5f fc88 	uxtb.w	ip, r8
1a007cf0:	4606      	mov	r6, r0
1a007cf2:	f88d c004 	strb.w	ip, [sp, #4]
1a007cf6:	e7d2      	b.n	1a007c9e <__fputwc+0x36>
1a007cf8:	89a3      	ldrh	r3, [r4, #12]
1a007cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a007cfe:	81a3      	strh	r3, [r4, #12]
1a007d00:	b002      	add	sp, #8
1a007d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a007d06:	bf00      	nop

1a007d08 <_fputwc_r>:
1a007d08:	b530      	push	{r4, r5, lr}
1a007d0a:	4605      	mov	r5, r0
1a007d0c:	6e50      	ldr	r0, [r2, #100]	; 0x64
1a007d0e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
1a007d12:	07c0      	lsls	r0, r0, #31
1a007d14:	4614      	mov	r4, r2
1a007d16:	b083      	sub	sp, #12
1a007d18:	b29a      	uxth	r2, r3
1a007d1a:	d401      	bmi.n	1a007d20 <_fputwc_r+0x18>
1a007d1c:	0590      	lsls	r0, r2, #22
1a007d1e:	d51c      	bpl.n	1a007d5a <_fputwc_r+0x52>
1a007d20:	0490      	lsls	r0, r2, #18
1a007d22:	d406      	bmi.n	1a007d32 <_fputwc_r+0x2a>
1a007d24:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a007d26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a007d2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a007d2e:	81a3      	strh	r3, [r4, #12]
1a007d30:	6662      	str	r2, [r4, #100]	; 0x64
1a007d32:	4628      	mov	r0, r5
1a007d34:	4622      	mov	r2, r4
1a007d36:	f7ff ff97 	bl	1a007c68 <__fputwc>
1a007d3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a007d3c:	07da      	lsls	r2, r3, #31
1a007d3e:	4605      	mov	r5, r0
1a007d40:	d402      	bmi.n	1a007d48 <_fputwc_r+0x40>
1a007d42:	89a3      	ldrh	r3, [r4, #12]
1a007d44:	059b      	lsls	r3, r3, #22
1a007d46:	d502      	bpl.n	1a007d4e <_fputwc_r+0x46>
1a007d48:	4628      	mov	r0, r5
1a007d4a:	b003      	add	sp, #12
1a007d4c:	bd30      	pop	{r4, r5, pc}
1a007d4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a007d50:	f7fe fd0c 	bl	1a00676c <__retarget_lock_release_recursive>
1a007d54:	4628      	mov	r0, r5
1a007d56:	b003      	add	sp, #12
1a007d58:	bd30      	pop	{r4, r5, pc}
1a007d5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a007d5c:	9101      	str	r1, [sp, #4]
1a007d5e:	f7fe fd03 	bl	1a006768 <__retarget_lock_acquire_recursive>
1a007d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a007d66:	9901      	ldr	r1, [sp, #4]
1a007d68:	b29a      	uxth	r2, r3
1a007d6a:	e7d9      	b.n	1a007d20 <_fputwc_r+0x18>

1a007d6c <__locale_mb_cur_max>:
1a007d6c:	4b04      	ldr	r3, [pc, #16]	; (1a007d80 <__locale_mb_cur_max+0x14>)
1a007d6e:	4a05      	ldr	r2, [pc, #20]	; (1a007d84 <__locale_mb_cur_max+0x18>)
1a007d70:	681b      	ldr	r3, [r3, #0]
1a007d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a007d74:	2b00      	cmp	r3, #0
1a007d76:	bf08      	it	eq
1a007d78:	4613      	moveq	r3, r2
1a007d7a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
1a007d7e:	4770      	bx	lr
1a007d80:	100000cc 	.word	0x100000cc
1a007d84:	10000908 	.word	0x10000908

1a007d88 <__ascii_mbtowc>:
1a007d88:	b082      	sub	sp, #8
1a007d8a:	b149      	cbz	r1, 1a007da0 <__ascii_mbtowc+0x18>
1a007d8c:	b15a      	cbz	r2, 1a007da6 <__ascii_mbtowc+0x1e>
1a007d8e:	b16b      	cbz	r3, 1a007dac <__ascii_mbtowc+0x24>
1a007d90:	7813      	ldrb	r3, [r2, #0]
1a007d92:	600b      	str	r3, [r1, #0]
1a007d94:	7812      	ldrb	r2, [r2, #0]
1a007d96:	1c10      	adds	r0, r2, #0
1a007d98:	bf18      	it	ne
1a007d9a:	2001      	movne	r0, #1
1a007d9c:	b002      	add	sp, #8
1a007d9e:	4770      	bx	lr
1a007da0:	a901      	add	r1, sp, #4
1a007da2:	2a00      	cmp	r2, #0
1a007da4:	d1f3      	bne.n	1a007d8e <__ascii_mbtowc+0x6>
1a007da6:	4610      	mov	r0, r2
1a007da8:	b002      	add	sp, #8
1a007daa:	4770      	bx	lr
1a007dac:	f06f 0001 	mvn.w	r0, #1
1a007db0:	e7f4      	b.n	1a007d9c <__ascii_mbtowc+0x14>
1a007db2:	bf00      	nop

1a007db4 <_wcrtomb_r>:
1a007db4:	b5f0      	push	{r4, r5, r6, r7, lr}
1a007db6:	4c11      	ldr	r4, [pc, #68]	; (1a007dfc <_wcrtomb_r+0x48>)
1a007db8:	6824      	ldr	r4, [r4, #0]
1a007dba:	b085      	sub	sp, #20
1a007dbc:	4606      	mov	r6, r0
1a007dbe:	6b64      	ldr	r4, [r4, #52]	; 0x34
1a007dc0:	461f      	mov	r7, r3
1a007dc2:	b151      	cbz	r1, 1a007dda <_wcrtomb_r+0x26>
1a007dc4:	4d0e      	ldr	r5, [pc, #56]	; (1a007e00 <_wcrtomb_r+0x4c>)
1a007dc6:	2c00      	cmp	r4, #0
1a007dc8:	bf08      	it	eq
1a007dca:	462c      	moveq	r4, r5
1a007dcc:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a007dd0:	47a0      	blx	r4
1a007dd2:	1c43      	adds	r3, r0, #1
1a007dd4:	d00c      	beq.n	1a007df0 <_wcrtomb_r+0x3c>
1a007dd6:	b005      	add	sp, #20
1a007dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a007dda:	4a09      	ldr	r2, [pc, #36]	; (1a007e00 <_wcrtomb_r+0x4c>)
1a007ddc:	2c00      	cmp	r4, #0
1a007dde:	bf08      	it	eq
1a007de0:	4614      	moveq	r4, r2
1a007de2:	460a      	mov	r2, r1
1a007de4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
1a007de8:	a901      	add	r1, sp, #4
1a007dea:	47a0      	blx	r4
1a007dec:	1c43      	adds	r3, r0, #1
1a007dee:	d1f2      	bne.n	1a007dd6 <_wcrtomb_r+0x22>
1a007df0:	2200      	movs	r2, #0
1a007df2:	238a      	movs	r3, #138	; 0x8a
1a007df4:	603a      	str	r2, [r7, #0]
1a007df6:	6033      	str	r3, [r6, #0]
1a007df8:	b005      	add	sp, #20
1a007dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a007dfc:	100000cc 	.word	0x100000cc
1a007e00:	10000908 	.word	0x10000908

1a007e04 <__ascii_wctomb>:
1a007e04:	b121      	cbz	r1, 1a007e10 <__ascii_wctomb+0xc>
1a007e06:	2aff      	cmp	r2, #255	; 0xff
1a007e08:	d804      	bhi.n	1a007e14 <__ascii_wctomb+0x10>
1a007e0a:	700a      	strb	r2, [r1, #0]
1a007e0c:	2001      	movs	r0, #1
1a007e0e:	4770      	bx	lr
1a007e10:	4608      	mov	r0, r1
1a007e12:	4770      	bx	lr
1a007e14:	238a      	movs	r3, #138	; 0x8a
1a007e16:	6003      	str	r3, [r0, #0]
1a007e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007e1c:	4770      	bx	lr
1a007e1e:	bf00      	nop

1a007e20 <__gedf2>:
1a007e20:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a007e24:	e006      	b.n	1a007e34 <__cmpdf2+0x4>
1a007e26:	bf00      	nop

1a007e28 <__ledf2>:
1a007e28:	f04f 0c01 	mov.w	ip, #1
1a007e2c:	e002      	b.n	1a007e34 <__cmpdf2+0x4>
1a007e2e:	bf00      	nop

1a007e30 <__cmpdf2>:
1a007e30:	f04f 0c01 	mov.w	ip, #1
1a007e34:	f84d cd04 	str.w	ip, [sp, #-4]!
1a007e38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a007e3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007e40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a007e44:	bf18      	it	ne
1a007e46:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a007e4a:	d01b      	beq.n	1a007e84 <__cmpdf2+0x54>
1a007e4c:	b001      	add	sp, #4
1a007e4e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a007e52:	bf0c      	ite	eq
1a007e54:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a007e58:	ea91 0f03 	teqne	r1, r3
1a007e5c:	bf02      	ittt	eq
1a007e5e:	ea90 0f02 	teqeq	r0, r2
1a007e62:	2000      	moveq	r0, #0
1a007e64:	4770      	bxeq	lr
1a007e66:	f110 0f00 	cmn.w	r0, #0
1a007e6a:	ea91 0f03 	teq	r1, r3
1a007e6e:	bf58      	it	pl
1a007e70:	4299      	cmppl	r1, r3
1a007e72:	bf08      	it	eq
1a007e74:	4290      	cmpeq	r0, r2
1a007e76:	bf2c      	ite	cs
1a007e78:	17d8      	asrcs	r0, r3, #31
1a007e7a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a007e7e:	f040 0001 	orr.w	r0, r0, #1
1a007e82:	4770      	bx	lr
1a007e84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a007e88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007e8c:	d102      	bne.n	1a007e94 <__cmpdf2+0x64>
1a007e8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a007e92:	d107      	bne.n	1a007ea4 <__cmpdf2+0x74>
1a007e94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a007e98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007e9c:	d1d6      	bne.n	1a007e4c <__cmpdf2+0x1c>
1a007e9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a007ea2:	d0d3      	beq.n	1a007e4c <__cmpdf2+0x1c>
1a007ea4:	f85d 0b04 	ldr.w	r0, [sp], #4
1a007ea8:	4770      	bx	lr
1a007eaa:	bf00      	nop

1a007eac <__aeabi_cdrcmple>:
1a007eac:	4684      	mov	ip, r0
1a007eae:	4610      	mov	r0, r2
1a007eb0:	4662      	mov	r2, ip
1a007eb2:	468c      	mov	ip, r1
1a007eb4:	4619      	mov	r1, r3
1a007eb6:	4663      	mov	r3, ip
1a007eb8:	e000      	b.n	1a007ebc <__aeabi_cdcmpeq>
1a007eba:	bf00      	nop

1a007ebc <__aeabi_cdcmpeq>:
1a007ebc:	b501      	push	{r0, lr}
1a007ebe:	f7ff ffb7 	bl	1a007e30 <__cmpdf2>
1a007ec2:	2800      	cmp	r0, #0
1a007ec4:	bf48      	it	mi
1a007ec6:	f110 0f00 	cmnmi.w	r0, #0
1a007eca:	bd01      	pop	{r0, pc}

1a007ecc <__aeabi_dcmpeq>:
1a007ecc:	f84d ed08 	str.w	lr, [sp, #-8]!
1a007ed0:	f7ff fff4 	bl	1a007ebc <__aeabi_cdcmpeq>
1a007ed4:	bf0c      	ite	eq
1a007ed6:	2001      	moveq	r0, #1
1a007ed8:	2000      	movne	r0, #0
1a007eda:	f85d fb08 	ldr.w	pc, [sp], #8
1a007ede:	bf00      	nop

1a007ee0 <__aeabi_dcmplt>:
1a007ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a007ee4:	f7ff ffea 	bl	1a007ebc <__aeabi_cdcmpeq>
1a007ee8:	bf34      	ite	cc
1a007eea:	2001      	movcc	r0, #1
1a007eec:	2000      	movcs	r0, #0
1a007eee:	f85d fb08 	ldr.w	pc, [sp], #8
1a007ef2:	bf00      	nop

1a007ef4 <__aeabi_dcmple>:
1a007ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
1a007ef8:	f7ff ffe0 	bl	1a007ebc <__aeabi_cdcmpeq>
1a007efc:	bf94      	ite	ls
1a007efe:	2001      	movls	r0, #1
1a007f00:	2000      	movhi	r0, #0
1a007f02:	f85d fb08 	ldr.w	pc, [sp], #8
1a007f06:	bf00      	nop

1a007f08 <__aeabi_dcmpge>:
1a007f08:	f84d ed08 	str.w	lr, [sp, #-8]!
1a007f0c:	f7ff ffce 	bl	1a007eac <__aeabi_cdrcmple>
1a007f10:	bf94      	ite	ls
1a007f12:	2001      	movls	r0, #1
1a007f14:	2000      	movhi	r0, #0
1a007f16:	f85d fb08 	ldr.w	pc, [sp], #8
1a007f1a:	bf00      	nop

1a007f1c <__aeabi_dcmpgt>:
1a007f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a007f20:	f7ff ffc4 	bl	1a007eac <__aeabi_cdrcmple>
1a007f24:	bf34      	ite	cc
1a007f26:	2001      	movcc	r0, #1
1a007f28:	2000      	movcs	r0, #0
1a007f2a:	f85d fb08 	ldr.w	pc, [sp], #8
1a007f2e:	bf00      	nop

1a007f30 <__aeabi_dcmpun>:
1a007f30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a007f34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007f38:	d102      	bne.n	1a007f40 <__aeabi_dcmpun+0x10>
1a007f3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a007f3e:	d10a      	bne.n	1a007f56 <__aeabi_dcmpun+0x26>
1a007f40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a007f44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a007f48:	d102      	bne.n	1a007f50 <__aeabi_dcmpun+0x20>
1a007f4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a007f4e:	d102      	bne.n	1a007f56 <__aeabi_dcmpun+0x26>
1a007f50:	f04f 0000 	mov.w	r0, #0
1a007f54:	4770      	bx	lr
1a007f56:	f04f 0001 	mov.w	r0, #1
1a007f5a:	4770      	bx	lr

1a007f5c <__aeabi_d2iz>:
1a007f5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a007f60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a007f64:	d215      	bcs.n	1a007f92 <__aeabi_d2iz+0x36>
1a007f66:	d511      	bpl.n	1a007f8c <__aeabi_d2iz+0x30>
1a007f68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a007f6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a007f70:	d912      	bls.n	1a007f98 <__aeabi_d2iz+0x3c>
1a007f72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a007f76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a007f7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a007f7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a007f82:	fa23 f002 	lsr.w	r0, r3, r2
1a007f86:	bf18      	it	ne
1a007f88:	4240      	negne	r0, r0
1a007f8a:	4770      	bx	lr
1a007f8c:	f04f 0000 	mov.w	r0, #0
1a007f90:	4770      	bx	lr
1a007f92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a007f96:	d105      	bne.n	1a007fa4 <__aeabi_d2iz+0x48>
1a007f98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a007f9c:	bf08      	it	eq
1a007f9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a007fa2:	4770      	bx	lr
1a007fa4:	f04f 0000 	mov.w	r0, #0
1a007fa8:	4770      	bx	lr
1a007faa:	bf00      	nop
1a007fac:	73b2d678 	.word	0x73b2d678
1a007fb0:	00000155 	.word	0x00000155
1a007fb4:	cf01a8c0 	.word	0xcf01a8c0
1a007fb8:	00ffffff 	.word	0x00ffffff
1a007fbc:	0101a8c0 	.word	0x0101a8c0
1a007fc0:	0f01a8c0 	.word	0x0f01a8c0
1a007fc4:	64636261 	.word	0x64636261
1a007fc8:	68676665 	.word	0x68676665
1a007fcc:	ff6b6a69 	.word	0xff6b6a69
1a007fd0:	4b434f53 	.word	0x4b434f53
1a007fd4:	5453455f 	.word	0x5453455f
1a007fd8:	494c4241 	.word	0x494c4241
1a007fdc:	44454853 	.word	0x44454853
1a007fe0:	0000000d 	.word	0x0000000d
1a007fe4:	433a6425 	.word	0x433a6425
1a007fe8:	656e6e6f 	.word	0x656e6e6f
1a007fec:	64657463 	.word	0x64657463
1a007ff0:	206f7420 	.word	0x206f7420
1a007ff4:	6425202d 	.word	0x6425202d
1a007ff8:	2e64252e 	.word	0x2e64252e
1a007ffc:	252e6425 	.word	0x252e6425
1a008000:	203a2064 	.word	0x203a2064
1a008004:	0a0d6425 	.word	0x0a0d6425
1a008008:	00000000 	.word	0x00000000
1a00800c:	4b434f53 	.word	0x4b434f53
1a008010:	4f4c435f 	.word	0x4f4c435f
1a008014:	575f4553 	.word	0x575f4553
1a008018:	0d544941 	.word	0x0d544941
1a00801c:	00000000 	.word	0x00000000
1a008020:	4b434f53 	.word	0x4b434f53
1a008024:	494e495f 	.word	0x494e495f
1a008028:	00000d54 	.word	0x00000d54
1a00802c:	4b434f53 	.word	0x4b434f53
1a008030:	4f4c435f 	.word	0x4f4c435f
1a008034:	0d444553 	.word	0x0d444553
1a008038:	00000000 	.word	0x00000000
1a00803c:	41464544 	.word	0x41464544
1a008040:	0d544c55 	.word	0x0d544c55
1a008044:	ffffff00 	.word	0xffffff00
1a008048:	63696e49 	.word	0x63696e49
1a00804c:	696c6169 	.word	0x696c6169
1a008050:	646e617a 	.word	0x646e617a
1a008054:	2e2e2e6f 	.word	0x2e2e2e6f
1a008058:	0000000d 	.word	0x0000000d
1a00805c:	6d6d6f43 	.word	0x6d6d6f43
1a008060:	696e6920 	.word	0x696e6920
1a008064:	6c616963 	.word	0x6c616963
1a008068:	64617a69 	.word	0x64617a69
1a00806c:	6f632061 	.word	0x6f632061
1a008070:	63657272 	.word	0x63657272
1a008074:	656d6174 	.word	0x656d6174
1a008078:	2e65746e 	.word	0x2e65746e
1a00807c:	000d0a0d 	.word	0x000d0a0d
1a008080:	65646f4d 	.word	0x65646f4d
1a008084:	20676572 	.word	0x20676572
1a008088:	73206564 	.word	0x73206564
1a00808c:	656b636f 	.word	0x656b636f
1a008090:	3a4e2074 	.word	0x3a4e2074
1a008094:	25200a0d 	.word	0x25200a0d
1a008098:	000a0d78 	.word	0x000a0d78
1a00809c:	2043414d 	.word	0x2043414d
1a0080a0:	6c206564 	.word	0x6c206564
1a0080a4:	4f422061 	.word	0x4f422061
1a0080a8:	3a445241 	.word	0x3a445241
1a0080ac:	25200a0d 	.word	0x25200a0d
1a0080b0:	78253a78 	.word	0x78253a78
1a0080b4:	3a78253a 	.word	0x3a78253a
1a0080b8:	253a7825 	.word	0x253a7825
1a0080bc:	78253a78 	.word	0x78253a78
1a0080c0:	0d202020 	.word	0x0d202020
1a0080c4:	0000000a 	.word	0x0000000a
1a0080c8:	64205049 	.word	0x64205049
1a0080cc:	616c2065 	.word	0x616c2065
1a0080d0:	414f4220 	.word	0x414f4220
1a0080d4:	203a4452 	.word	0x203a4452
1a0080d8:	252e6425 	.word	0x252e6425
1a0080dc:	64252e64 	.word	0x64252e64
1a0080e0:	2064252e 	.word	0x2064252e
1a0080e4:	0a0d2020 	.word	0x0a0d2020
1a0080e8:	00000000 	.word	0x00000000
1a0080ec:	52425553 	.word	0x52425553
1a0080f0:	20204445 	.word	0x20204445
1a0080f4:	20202020 	.word	0x20202020
1a0080f8:	20202020 	.word	0x20202020
1a0080fc:	252e6425 	.word	0x252e6425
1a008100:	64252e64 	.word	0x64252e64
1a008104:	2064252e 	.word	0x2064252e
1a008108:	0a0d2020 	.word	0x0a0d2020
1a00810c:	00000000 	.word	0x00000000
1a008110:	41544547 	.word	0x41544547
1a008114:	20594157 	.word	0x20594157
1a008118:	20202020 	.word	0x20202020
1a00811c:	20202020 	.word	0x20202020
1a008120:	252e6425 	.word	0x252e6425
1a008124:	64252e64 	.word	0x64252e64
1a008128:	2064252e 	.word	0x2064252e
1a00812c:	0a0d2020 	.word	0x0a0d2020
1a008130:	00000000 	.word	0x00000000
1a008134:	72657550 	.word	0x72657550
1a008138:	4f206f74 	.word	0x4f206f74
1a00813c:	65676972 	.word	0x65676972
1a008140:	20203a6e 	.word	0x20203a6e
1a008144:	25202020 	.word	0x25202020
1a008148:	000a0d64 	.word	0x000a0d64
1a00814c:	72657550 	.word	0x72657550
1a008150:	44206f74 	.word	0x44206f74
1a008154:	69747365 	.word	0x69747365
1a008158:	203a6f6e 	.word	0x203a6f6e
1a00815c:	20202020 	.word	0x20202020
1a008160:	0a0d6425 	.word	0x0a0d6425
1a008164:	00000000 	.word	0x00000000
1a008168:	4b4e494c 	.word	0x4b4e494c
1a00816c:	0d4e4f5f 	.word	0x0d4e4f5f
1a008170:	00000000 	.word	0x00000000
1a008174:	646e6142 	.word	0x646e6142
1a008178:	20617265 	.word	0x20617265
1a00817c:	45206564 	.word	0x45206564
1a008180:	4f525252 	.word	0x4f525252
1a008184:	203a2052 	.word	0x203a2052
1a008188:	20206425 	.word	0x20206425
1a00818c:	00000a0d 	.word	0x00000a0d
1a008190:	66667542 	.word	0x66667542
1a008194:	3a207265 	.word	0x3a207265
1a008198:	25202020 	.word	0x25202020
1a00819c:	20202c63 	.word	0x20202c63
1a0081a0:	202c6325 	.word	0x202c6325
1a0081a4:	2c632520 	.word	0x2c632520
1a0081a8:	63252020 	.word	0x63252020
1a0081ac:	20202020 	.word	0x20202020
1a0081b0:	0d200a0d 	.word	0x0d200a0d
1a0081b4:	0a0d200a 	.word	0x0a0d200a
1a0081b8:	00000000 	.word	0x00000000
1a0081bc:	4b4e494c 	.word	0x4b4e494c
1a0081c0:	46464f5f 	.word	0x46464f5f
1a0081c4:	4b4e552f 	.word	0x4b4e552f
1a0081c8:	4e574f4e 	.word	0x4e574f4e
1a0081cc:	ff000d20 	.word	0xff000d20

1a0081d0 <ultrasonicSensorsIrqMap>:
1a0081d0:	ff020100                                ....

1a0081d4 <gpioPinsInit>:
1a0081d4:	02000104 00050701 05010d03 04080100     ................
1a0081e4:	02020002 02000304 00000403 04070002     ................
1a0081f4:	030c0300 09050402 05040103 04030208     ................
1a008204:	04020305 06040504 0802000c 03000b06     ................
1a008214:	00090607 07060503 060f0504 03030004     ................
1a008224:	02000404 00050404 06040502 04060200     ................
1a008234:	0c050408 05040a04 0003010e 14010a00     ................
1a008244:	010f0000 0d000012 00001101 0010010c     ................
1a008254:	07070300 000f0300 01000001 00000000     ................
1a008264:	000a0600 08060603 06100504 04030005     ................
1a008274:	03000106 04090400 04010d05 010b0000     ................
1a008284:	0200000f 00000001 00010104 02010800     ................
1a008294:	01090000 09010006 05040002 04010200     ................
1a0082a4:	02020105 02020504 0e00000a 01000b02     ................
1a0082b4:	000c020b 00040c01 04000200 01020001     ................
1a0082c4:	02000204 00030402 03070302 070b0300     ................
1a0082d4:	0c030004 03000507 0006070d 01020e03     ................
1a0082e4:	04010504 06020006 02000504 00040405     ................
1a0082f4:	08040402 040c0504 0d050409 05040a04     ................
1a008304:	0005010e ffff0801                       ........

1a00830c <lpcUarts>:
1a00830c:	40081000 06020406 00180205 40081000     ...@...........@
1a00831c:	09070509 00180706 40082000 00000000     ......... .@....
1a00832c:	00190000 400c1000 07060107 001a0602     .......@........
1a00833c:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a00834c:	02020302 001b0204                       ........

1a008354 <ExtRateIn>:
1a008354:	00000000                                ....

1a008358 <GpioButtons>:
1a008358:	08000400 09010900                       ........

1a008360 <GpioLeds>:
1a008360:	01050005 0e000205 0c010b01              ............

1a00836c <GpioPorts>:
1a00836c:	03030003 0f050403 05031005 07030603     ................
1a00837c:	ffff0802                                ....

1a008380 <OscRateIn>:
1a008380:	00b71b00                                ....

1a008384 <InitClkStates>:
1a008384:	00010308 00010307 01010f01              ............

1a008390 <pinmuxing>:
1a008390:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0083a0:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0083b0:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0083c0:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0083d0:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0083e0:	00d50301 00d50401 00160107 00560207     ..............V.
1a0083f0:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a008400:	00570206 00f30f01 00f71001 00f31101     ..W.............
1a008410:	00b31201 00f01301 00b31401 00b60707     ................
1a008420:	00f20000 00b60100                       ........

1a008428 <UART_BClock>:
1a008428:	01a201c2 01620182                       ......b.

1a008430 <UART_PClock>:
1a008430:	00820081 00a200a1 08040201 0f0f0f03     ................
1a008440:	ffff00ff                                ....

1a008444 <periph_to_base>:
1a008444:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a008454:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a008464:	000100e0 01000100 01200003 00060120     .......... . ...
1a008474:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a008484:	01820013 00120182 01a201a2 01c20011     ................
1a008494:	001001c2 01e201e2 0202000f 000e0202     ................
1a0084a4:	02220222 0223000d 001c0223              "."...#.#...

1a0084b0 <InitClkStates>:
1a0084b0:	00010100 00010909 0001090a 01010701     ................
1a0084c0:	00010902 00010906 0101090c 0001090d     ................
1a0084d0:	0001090e 0001090f 00010910 00010911     ................
1a0084e0:	00010912 00010913 00011114 00011119     ................
1a0084f0:	0001111a 0001111b 00464e49 00666e69     ........INF.inf.
1a008500:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
1a008510:	62613938 66656463 00000000 33323130     89abcdef....0123
1a008520:	37363534 42413938 46454443 00000000     456789ABCDEF....
1a008530:	6c756e28 0000296c ffff0030              (null)..0...

1a00853c <blanks.8605>:
1a00853c:	20202020 20202020 20202020 20202020                     

1a00854c <zeroes.8606>:
1a00854c:	30303030 30303030 30303030 30303030     0000000000000000
1a00855c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
1a00856c:	ffffffff                                ....

1a008570 <__mprec_bigtens>:
1a008570:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a008580:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a008590:	7f73bf3c 75154fdd                       <.s..O.u

1a008598 <__mprec_tens>:
1a008598:	00000000 3ff00000 00000000 40240000     .......?......$@
1a0085a8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a0085b8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a0085c8:	00000000 412e8480 00000000 416312d0     .......A......cA
1a0085d8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a0085e8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a0085f8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a008608:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a008618:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a008628:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a008638:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a008648:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a008658:	79d99db4 44ea7843                       ...yCx.D

1a008660 <p05.7367>:
1a008660:	00000005 00000019 0000007d 00000043     ........}...C...
1a008670:	49534f50 ffff0058 0000002e              POSIX.......

1a00867c <_ctype_>:
1a00867c:	20202000 20202020 28282020 20282828     .         ((((( 
1a00868c:	20202020 20202020 20202020 20202020                     
1a00869c:	10108820 10101010 10101010 10101010      ...............
1a0086ac:	04040410 04040404 10040404 10101010     ................
1a0086bc:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a0086cc:	01010101 01010101 01010101 10101010     ................
1a0086dc:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a0086ec:	02020202 02020202 02020202 10101010     ................
1a0086fc:	00000020 00000000 00000000 00000000      ...............
	...
1a00877c:	ffffff00                                ....
